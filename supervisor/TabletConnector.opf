;; -*-Lisp-*-
;;author: Michelangelo Fiore
;;this module contains procedure to manage the connection between the
;;supervisor and the tablet. At the moment this is not safe and doesn't accout for other executions of the robot

(
 (defop |sendMessage|
  :invocation (!(TabletConnector.sendMessage @message))
  :documentation "Sends a message to the tablet"
  :body (
	 (?(TabletConnector.tabletName @name))
  	(!(SEND-MESSAGE @name @message))	
	)
  )

(defop |sendStringMessage|
  :invocation (!(TabletConnector.sendStringMessage @message))
  :documentation "sends a message to the tablet in string format"
  :body (
	 (?(TabletConnector.tabletName @name))
  	(!(SEND-STRING @name @message))	
	 )
  )


(defop |handleReport|
  :invocation(!(TabletConnector.handleReport ))
  :documentation "used to generalize common operations after receiving a command "
  :body (
	 (^(|| (PlanManager.report @report) (order stop) (order pause)))
	 (IF(?(order stop))
	    (~>(order stop))
	    (=>(PlanManager.stop))
	    (^(PlanManager.report @report))
	    
	 ELSEIF(?(order pause))
	 (~>(order pause))
	 (IF(?(ExecutionManager.isExecutingAction @executionId))
	    (?(ExecutionManager.isExecutingAction @executionId))
	    (=>(ExecutionManager.halt (VAL @executionId)))

	    (^(|| (order stop) (order resume)))
	    (IF(?(order stop))
	       (~>(order stop))
	       (=>(PlanManager.stop))
	       (^(PlanManager.report @report))

	       ELSEIF(?(order resume))
	       (~>(order resume))
	       (=>(ExecutionManager.resume (VAL @executionId)))
	       (^(PlanManager.report (VAL @report)))
	       )
	    )
	 )

	 
	 (~>(PlanManager.report (VAL @report)))
	 (!(TabletConnector.sendMessage (order stop))) 
	 (^(order stop))
	 (~>(order stop))
	 
	 )
  )

(defop |setPlanManager|
  :invocation (!(TabletConnector.setPlanManager))
  :documentation "utility function to save some coding. Stops running plans on the robot and eventually starts the planning manager"
  :body (

	 (IF(?(PlanManager.isManagingAgent @agent))
	    (=>(PlanManager.stop))
	    (^(PlanManager.report @report))
	    (~>(PlanManager.report (VAL @report)))
	    )
	 
	 (IF(?(PlanManager.isRunning FALSE))
	    (=>(PlanManager.managePlans))
	    )

	 )
  )
(defop |getCommand|
  :invocation (!(TabletConnector.getCommand))
  :body (
	 (!(= @id 1))
	 (WHILE(?(TabletConnector.shouldRun TRUE))
	       (^(order @command))
	       (~> (order (VAL @command)))
	       (!(= @idStr (TERM-STRING-CAT @id)))  
	       (!(= @id (+ @id 1)))
	       (=>(PlanManager.planningModality HUMAN))
	       (IF(?(EQUAL @command stop))
		  (!(TabletConnector.sendMessage (order stop))) 
		  (=>(TabletConnector.shouldRun FALSE))
		  
		  ELSEIF(?(EQUAL @command take))
		  (^(parameter name @objectName))
		  (~>(parameter name (VAL @objectName)))
	
		  (!(TabletConnector.setPlanManager))
		  (=>(PlanManager.goal TakeObject (. PR2_ROBOT (VAL @objectName) .)))
		  (=>(PlanManager.newGoal TRUE))

		  (!(TabletConnector.handleReport))
		  
		     
		  
		  ELSEIF(?(EQUAL @command drop))
		  (^(parameter name @placementName))
		  (~>(parameter name (VAL @placementName)))

		  (IF(?(Robot.hasObject RIGHT @objectName))

		     (!(TabletConnector.setPlanManager))
		     (=>(PlanManager.goal ThrowObject (. PR2_ROBOT (VAL @objectName) PINK_TRASHBIN .)))
		     (=>(PlanManager.newGoal TRUE))
		     (!(TabletConnector.handleReport))

		     
		     )
		  
		  ELSEIF(?(EQUAL @command clean))
		 
		  (!(TabletConnector.setPlanManager))
		  (=>(PlanManager.goal Clean (. TABLE_4 .)))
		  (=>(PlanManager.newGoal TRUE))
		  (!(TabletConnector.handleReport))

		  
		  ELSEIF(?(EQUAL @command stop))
		  (=>(PlanManager.stop))
		  
		  ELSEIF(?(EQUAL @command give))
		  (^(parameter name @objectName))
		  (~>(parameter name (VAL @objectName)))
		  (^(parameter actor @actorName))
		  (~>(parameter actor (VAL @actorName)))

		  (!(TabletConnector.setPlanManager))
		  (IF(?(EQUAL @actorName robot))
		     (=>(PlanManager.goal GiveObject (. PR2_ROBOT HERAKLES_HUMAN1 (VAL @objectName) .)))

		     ELSE
		     (=>(PlanManager.goal GiveObject (. HERAKLES_HUMAN1 PR2_ROBOT (VAL @objectName) .)))
				  
		     )
		  (=>(PlanManager.newGoal TRUE))
		  (!(TabletConnector.handleReport))


		  ELSEIF(?(EQUAL @command list))
		  (^(parameter type @listType))
		  (~>(parameter type (VAL @listType)))
		  (IF(?(EQUAL @listType objects))
		     (!(TabletConnector.sendMessage (GREY_TAPE LOTR_TAPE WALLE_TAPE)))
		     ELSEIF(?(EQUAL @listType places))
		     (!(TabletConnector.sendMessage (PINK_TRASHBIN TABLE)))
		     )
		  )
	       )
	 )
  )




)
