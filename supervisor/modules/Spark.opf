;; -*-Lisp-*-
;;author: Michelangelo Fiore
;;this module contains procedures to handle spark requestes.

(
 (defop |init|
   :invocation (!(Spark.init))
   :documentation "initializes spark"
   :body (
	  (!(SEM-CREATE Spark.sem 1 SEM-FIFO))
	  (=>(Spark.freeId 0))
	  (=>(Spark.freeSphereId 0))
	  (=>(Spark.freeSphereId 1))
	  (=>(Spark.freeSphereId 2))
	  (=>(Spark.freeSphereId 3))
	  (=>(Spark.freeSphereId 4))
	  (=>(Spark.freeSphereId 5))
	  (=>(Spark.freeSphereId 6))
	  (=>(Spark.freeSphereId 7))
	  (=>(Spark.freeSphereId 8))
	  (=>(Spark.freeSphereId 9))
	  (=>(Spark.previousWorldState -1))
	  )
   )
 
 (defop |getFreeSphereId|
   :invocation(!(Spark.getFreeSphereId $id))
   :body (
	  (!(SEM-P Spark.sem))
	  (?(Spark.freeSphereId $id))
	  (~>(Spark.freeSphereId (VAL $id)))
	  (!(SEM-V Spark.sem))
	  )
   )

(defop |Spark.getFreeId|
   :invocation(!(Spark.getFreeId $id))
   :documentation "gets a new id for requestes"
   :body (
	  (!(SEM-P Spark.sem))
	  (?(Spark.freeId $id))

	  (=>(Spark.freeId (+ $id 1)))
	  (!(SEM-V Spark.sem))
	  )
   )



(defop |GetJointAbsPose|
  :invocation (Spark.request getJointAbsPose @name @joint @id)
  :documentation "Returns the coordinates of an spark object joint (Note, if @name refers to an actual object and not to a robot or human @joint is ignored)"
  :body (

         (!(SEM-P Spark.sem))
         (IF(?(Spark.isActive BASE TRUE))
         	(=>(Spark.freeId (+ @id 1)))

         	(!(= @param (STRUCT_SPARK_JOINT_ABS_POS_PARAM
         		(robotName
         			(name  (TERM-STRING-CAT @name)))

         		(jointName
         			(name  (TERM-STRING-CAT @joint)))
         		)))

         	(!(GenomInterface.handleRequest SPARK SPARK_GETJOINTABSPOSE (Spark.stop (VAL @id)) (FALSE) (FALSE) 300 (VAL @param) @report @result))
         	(!(ReportManager.publish Spark.report (VAL @id) (VAL @report)))

         	(IF(?(EQUAL @report "OK"))
         		(!(== (VAL @result)  (POM_EULER
         			(yaw  @yaw)
					(pitch  @pitch)
					(roll  @roll)
					(x  @x)
					(y  @y)
					(z  @z))
				))
				(=>(Spark.result (VAL @id) (VAL @x) (VAL @y) (VAL @z) (VAL @yaw) (VAL @pitch) (VAL @roll)))
				)       
				ELSE
				(=>(Spark.report (VAL @id) "OK"))
				(=>(Spark.result (VAL @id) 0 0 0 0 0 0))
				)

  (!(SEM-V Spark.sem))


  )
)
(defop |setGraspedObject|
  :invocation (Spark.request setGraspedObject @objectName @isGrasped @armId @id)
  :documentation "Considers an object grasped by the robot. isGrasped 1,0 . armId=0 rightArm 1=leftArm"
  :body (
	  (!(SEM-P Spark.sem))

	 (=>(Spark.freeId (+ @id 1)))
	 (!(= @param (STRUCT_SPARK_SET_GRASPED_OBJECT_PARAMS 
		     (name 
		      (name  (TERM-STRING-CAT @objectName)))
		      
		      (is_grasping_object  (VAL @isGrasped))
		      (grasped_object_arm_id (VAL @armId) ))))
	 

	 (!(GenomInterface.handleRequest SPARK SPARK_SETGRASPEDOBJECT  (Spark.stop (VAL @id)) (FALSE) (FALSE) 300 (VAL @param) @report @result))
     (!(ReportManager.publish Spark.report (VAL @id) (VAL @report)))
	 (!(SEM-V Spark.sem))
 
	 )
  )

(defop |updateSphereMonitor|
  :invocation(Spark.request updateSphereMonitor @sphereId @activateSphere @objectName @hand @agent @x @y @z @type @id)
  :body (
	 (!(SEM-P Spark.sem))
	 (=>(Spark.freeId (+ @id 1)))
	 

	 (IF(?(EQUAL @activateSphere GEN_FALSE))
	    (=>(Spark.freeSphereId @sphereId))

	    (!(= @radius 0))
	    (!(= @multiplier 0))

	    ELSE
	    (?(Object.type (VAL @objectName) @class @objectType))
        (!(= @type SPARK_PICK_OBJECT))
        (?(Spark.sphereParameters (VAL @class) @radius @multiplier))
	    )
	 

	 
	 (!(= @param (STRUCT_SPARK_ACTION_MONITORING_SPHERE_INPUT_PARAMS 
		      (monitorIndex  @sphereId)
		      (activateSphere  @activateSphere)
		      (objectName 
		       (name  (TERM-STRING-CAT @objectName)))

		      (handIndexInput  @hand)
		      (agentName 
		       (name  (TERM-STRING-CAT @agent)))

		      (sphereCenter 
		       (x  @x)
		       (y  @y)
		       (z  @z))

		      

           (sphereRadius  @radius)
           (sphereRadiusMultiply  @multiplier)
           (sphereCenterTranslationMultiply  1.0)
           (filteringTimeThreshold  0.0)
           (sphereType  @type))	 
	      ))
	 
	 (IF(?(Spark.isActive BASE TRUE))
	 (!(GenomInterface.handleRequest SPARK SPARK_UPDATESPHEREMONITOR  (Spark.stop (VAL @id)) (FALSE) (FALSE) 300 (VAL @param) @report @result))
     
     ELSE
     (!(= @report "OK"))
	 )
     (!(ReportManager.publish Spark.report (VAL @id) (VAL @report)))

	 (!(SEM-V Spark.sem))
	 )
  )

(defop |setInferrenceForObject|
  :invocation (Spark.request setInferrenceForObject @objectName @hasInferrence @agent @agentPart @inferrenceType @multiply @id)
  :documentation "Not clear what it does. Values for inferrenceType :  SPARK_IS_IN SPARK_HUMAN_HAND SPARK_ROUGH_ROBOT_HAND SPARK_PRECISE_ROBOT_HAND SPARK_NO_INFERRENCE"
  :body (
	  (!(SEM-P Spark.sem))
	  
	 (=>(Spark.freeId (+ @id 1)))
	 
	 (!(= @param (STRUCT_SPARK_SET_INFERRENCE_FOR_OBJECT_PARAMS 
			   (objectName 
			    (name  (TERM-STRING-CAT @objectName)))
			    
			    (hasInferrence  (VAL @hasInferrence))
			    (agentOrObjectName 
			     (name  (TERM-STRING-CAT @agent)))

			    (agentPartNum  (VAL @agentPart))
			    (inferrenceType  (VAL @inferrenceType))
			    (perceptionInferrenceConflictThresholdMultiply  (VAL @multiply)))))
	 (!(GenomInterface.handleRequest SPARK SPARK_SETINFERRENCEFOROBJECT  (Spark.stop (VAL @id)) (FALSE) (FALSE) 300 (VAL @param) @report @result))
     (!(ReportManager.publish Spark.report (VAL @id) (VAL @report)))
	 (!(SEM-V Spark.sem))

	  
	 )
  )
(defop |PlaceObject|
  :invocation (Spark.request placeObject @object @x @y @z @yaw @pitch @roll @id)
  :body (
	 (!(SEM-P Spark.sem))
	 
	 (=>(Spark.freeId (+ @id 1)))

	 (!(= @param (STRUCT_SPARK_M3D_OBJECT 
		      (name 
		       (name  (TERM-STRING-CAT @object)))
		      
		      (coords 
		       (x  @x)
		       (y  @y)
		       (z  @z)
		       (yaw  @yaw)
		       (pitch  @pitch)
		       (roll @roll))
		      )))

	   (!(GenomInterface.handleRequest SPARK SPARK_PLACEOBJECT  (Spark.stop (VAL @id)) (FALSE) (FALSE) 300 (VAL @param) @report @result))
       (!(ReportManager.publish Spark.report (VAL @id) (VAL @report)))

       (IF(?(Spark.isActive factsManagement SIM))
          (!(DatabaseInterface.findList (AGENT-STATEMENT PR2_ROBOT @agent hasInHand (VAL @object)) (. @agent .) @result))
          (IF(?(~(NULL @result)))
             (!(= @agent (CAR(CAR @result))))
             (!(DatabaseInterface.remove (AGENT-STATEMENT PR2_ROBOT @agent hasInHand (VAL @object) ) @result))
             )
          )
	   (!(SEM-V Spark.sem))
	 )
  )

(defop |PlaceObjectForSimu|
  :invocation (Spark.request placeObjectForSimu @object @x @y @z @yaw @pitch @roll @hasDisappeared @id)
  :documentation "Moves an object. What does forSimu mean?"
  :body (
	 (!(SEM-P Spark.sem))
	 
	 (=>(Spark.freeId (+ @id 1)))
	 
	 (!(= @param (STRUCT_SPARK_M3D_OBJECT_SIMU_PARAMS 
		      (name 
		   (name  (TERM-STRING-CAT @object)))
		      
		  (coords 
		   (x  (VAL @x))
		   (y  (VAL @y))
		   (z  (VAL @z))
		   (yaw  (VAL @yaw))
		   (pitch  (VAL @pitch))
		   (roll  (VAL @roll)))
		  
		  (hasDisappeared  (VAL @hasDisappeared)))))

		 (!(GenomInterface.handleRequest SPARK SPARK_PLACEOBJECTFORSIMU  (Spark.stop (VAL @id)) (FALSE) (FALSE) 300 (VAL @param) @report @result))
         (!(ReportManager.publish Spark.report (VAL @id) (VAL @report)))
		 (!(SEM-V Spark.sem))

	 )
  )

(defop |setObjectFixed|
  :invocation(Spark.request setObjectFixed @object @value @id)
  :body (
	 (!(SEM-P Spark.sem))
	 (=>(Spark.freeId (+ @id 1)))
	 (IF(?(EQUAL @value TRUE))
	    (!(= @trueValue GEN_TRUE))
	    
	    ELSE
	    (!(= @trueValue GEN_FALSE))
	    )
	 
	 (!(= @param (STRUCT_SPARK_ENTITY_STATE 
	  (name 
	   (name  (TERM-STRING-CAT @object)))
	  (state  (VAL @trueValue))
	  )))

	 (!(GenomInterface.handleRequest SPARK SPARK_SETOBJECTFIXED  (Spark.stop (VAL @id)) (FALSE) (FALSE) 300 (VAL @param) @report @result))
     (!(ReportManager.publish Spark.report (VAL @id) (VAL @report)))
	 
	 (!(SEM-V Spark.sem))
	 )
  )
(defop |setObjectInHand|
  :invocation(Spark.request setObjectInHand @agent @object @arm @value @id)
  :body (
	 (IF(?(EQUAL @value TRUE))
          (!(= @flag 1))
	      
	    ELSE 
	    (!(= @flag 0))
	    )
	 
	  (?(Spark.robotHand (VAL @arm) @sparkHand))
	  (?(Spark.robotName @sparkRobotName))

	  (IF(?(~(EQUAL @agent @sparkRobotName)))
         (!(Spark.getFreeId @sparkId))
         (!(ReportManager.sub Spark.report @sparkId))
	       (=>(Spark.request setInferrenceForObject (VAL @object) (VAL @flag) (VAL @agent) (VAL @sparkHand) SPARK_HUMAN_HAND 1.0 (VAL @sparkId)))  
	       (^(Spark.report @sparkId @report))
           (!(ReportManager.unsub Spark.report @sparkId))

	       ELSE
           (!(Spark.getFreeId @sparkId))
           (!(ReportManager.sub Spark.report @sparkId))
	       (=>(Spark.request setGraspedObject (VAL @object) (VAL @flag) (VAL @sparkHand) (VAL @sparkId)))
	       (^(Spark.report @sparkId @report))
           (!(ReportManager.unsub Spark.report @sparkId))
	       
           (!(Spark.getFreeId @sparkId))
           (!(ReportManager.sub Spark.report @sparkId))
	       (=>(Spark.request setInferrenceForObject (VAL @object) (VAL @flag) (VAL @agent) (VAL @sparkHand) SPARK_PRECISE_ROBOT_HAND 1.0 (VAL @sparkId)))  
	       (^(Spark.report @sparkId @report))
           (!(ReportManager.unsub Spark.report @sparkId))
	  
           )
      (IF(?(EQUAL @value TRUE))
         (?(Spark.freeId @sparkId))
         (=>(Spark.request placeObjectForSimu (VAL @object) 0 0 0 0 0 0 1 (VAL @sparkId)))
         (!(ExecutionManager.handleReport Spark @sparkId @executionId FALSE FALSE NO_NAME))
         )

      (IF(?(Spark.isActive factsManagement SIM))
         (!(DatabaseInterface.findList (AGENT-STATEMENT PR2_ROBOT (VAL @object) isOn @support) (. @support .) @result))
         (WHILE(?(~(NULL @result)))
               (!(= @support (CAR(CAR @result))))
               (!(= @result (CDR @result)))
            (!(DatabaseInterface.remove (AGENT-STATEMENT PR2_ROBOT (VAL @object) isOn (VAL @support)) @r))
            )
         )
      (!(ReportManager.publish Spark.report @id "OK"))

	  
	 )
  )

(defop |UpdateGTPFacts|
   :invocation (Spark.request updateGTPFacts @id) 
   :documentation "Update the database with fact from GTP"
   :body (
	  
	  (!(SEM-P Spark.sem))
	  (=>(Spark.freeId (+ @id 1))) 

	(?(Spark.previousWorldState @factId))
	
	(IF(?(EQUAL @factId -1))
		(!(DatabaseInterface.cleanDb $result))
		)
		
	  (!(= @param (INTEGER (VAL @factId)
			
	   )))
	 
	  (!(GenomInterface.handleRequest SPARK SPARK_GETUPDATEDGTPFACTS (Spark.stop (VAL @id)) (FALSE) (FALSE) 300 (VAL @param) @report @result))
  
	  (IF(?(EQUAL @report "OK"))
	     (!(== (VAL @result) (SPARK_STRUCT_LIST_GTP_FACTS 
           (nbFacts  @nbFacts)
           (wsId  @wsId)
	   @gtp_fact
	   )))
	     (!(= @facts (BUILD-LLISP-FROM-TERM-COMP @gtp_fact)))
	  (!(= @facts (CDR @facts)))
	(!(= @numFact 0))
	(WHILE(?(~(EQUAL @numFact @nbFacts)))
		(!(= @factTypeList (CAR @facts)))
		(!(= @facts (CDR @facts)))
		(!(= @factTypeLisp (BUILD-LLISP-FROM-TERM-COMP @factTypeList)))
		(!(= @factTypeName (BUILD-LLISP-FROM-TERM-COMP (CAR (CDR @factTypeLisp)))))
		(!(= @factType (CAR (CDR @factTypeName))))
		
		(!(= @factSubTypeList (CAR @facts)))
		(!(= @facts (CDR @facts)))
		(!(= @factSubTypeLisp (BUILD-LLISP-FROM-TERM-COMP @factSubTypeList)))
		(!(= @factSubTypeName (BUILD-LLISP-FROM-TERM-COMP (CAR (CDR @factSubTypeLisp)))))
		(!(= @factSubType (CAR (CDR @factSubTypeName))))

		(!(= @mainEntityList (CAR @facts)))
		(!(= @facts (CDR @facts)))
		(!(= @mainEntityLisp (BUILD-LLISP-FROM-TERM-COMP @mainEntityList)))
		(!(= @mainEntityName (BUILD-LLISP-FROM-TERM-COMP (CAR (CDR @mainEntityLisp)))))
		(!(= @mainEntity (CAR (CDR @mainEntityName))))
		
		(!(= @targetEntityList (CAR @facts)))
		(!(= @facts (CDR @facts)))
		(!(= @targetEntityLisp (BUILD-LLISP-FROM-TERM-COMP @targetEntityList)))
		(!(= @targetEntityName (BUILD-LLISP-FROM-TERM-COMP (CAR (CDR @targetEntityLisp)))))
		(!(= @targetEntity (CAR (CDR @targetEntityName))))
		
		(!(= @isComputedList (CAR @facts)))
		(!(= @facts (CDR @facts)))
		(!(= @isComputedLisp (BUILD-LLISP-FROM-TERM-COMP @isComputedList)))
		(!(= @isComputed (CAR (CDR @isComputedLisp))))

		(!(= @boolValueList (CAR @facts)))
		(!(= @facts (CDR @facts)))
		(!(= @boolValueLisp (BUILD-LLISP-FROM-TERM-COMP @boolValueList)))
		(!(= @boolValue (CAR (CDR @boolValueLisp))))

		(!(= @valueTypeList (CAR @facts)))
		(!(= @facts (CDR @facts)))
		(!(= @valueTypeLisp (BUILD-LLISP-FROM-TERM-COMP @valueTypeList)))
		(!(= @valueType (CAR (CDR @valueTypeLisp))))
		
		(!(= @dummyList (CAR @facts)))
		(!(= @facts (CDR @facts)))

		(!(= @specificValueList (CAR @facts)))
		(!(= @facts (CDR @facts)))
		(!(= @specificValueLisp (BUILD-LLISP-FROM-TERM-COMP @specificValueList)))
		(!(= @specificValue (CAR (CDR @specificValueLisp))))

		(IF(?(EQUAL @isComputed GEN_TRUE))
			(IF(?(EQUAL @boolValue GEN_TRUE))
				(IF(?(EQUAL @factType "IsReacheable"))
				        (IF(?(Spark.objectGTP (VAL @mainEntity) @mainName))
					   (IF(?(Spark.objectGTP (VAL @targetEntity) @targetName))
					(!(DatabaseInterface.add (AGENT-STATEMENT PR2_ROBOT @targetName isReachableBy @mainName) $result))
					))
					ELSEIF(?(EQUAL @factType "IsVisible"))
				        (IF(?(Spark.objectGTP (VAL @mainEntity) @mainName))
					   (IF(?(Spark.objectGTP (VAL @targetEntity) @targetName))
					   (!(DatabaseInterface.add (AGENT-STATEMENT PR2_ROBOT @targetName isVisibleBy @mainName) $result))
					   ))
					ELSEIF(?(EQUAL @factType "IsOn"))
					    (IF(?(~(EQUAL @factSubType "IsAbove")))
					       (!(PRINT @factSubType))
				        (IF(?(Spark.objectGTP (VAL @mainEntity) @mainName))
					   (IF(?(Spark.objectGTP (VAL @targetEntity) @targetName))
					       (!(DatabaseInterface.add (AGENT-STATEMENT PR2_ROBOT @mainName isOn @targetName) $result))
					       ))
					       )
					       ELSEIF(?(EQUAL @factType "IsNextTo"))
				        (IF(?(Spark.objectGTP (VAL @mainEntity) @mainName))
					   (IF(?(Spark.objectGTP (VAL @targetEntity) @targetName))
					          (!(DatabaseInterface.add (AGENT-STATEMENT PR2_ROBOT @mainName isNextTo @targetName) $result))
						  ))
					       ELSEIF(?(EQUAL @factType "IsIn"))
				        (IF(?(Spark.objectGTP (VAL @mainEntity) @mainName))
					   (IF(?(Spark.objectGTP (VAL @targetEntity) @targetName))
						   (!(DatabaseInterface.add (AGENT-STATEMENT PR2_ROBOT @mainName isIn @targetName) $result))
						   ))
					)
				ELSE
					(IF(?(EQUAL @factType "IsReacheable"))
				        (IF(?(Spark.objectGTP (VAL @mainEntity) @mainName))
					   (IF(?(Spark.objectGTP (VAL @targetEntity) @targetName))
					(!(DatabaseInterface.remove (AGENT-STATEMENT PR2_ROBOT (VAL @targetName) isReachableBy (VAL @mainName)) $result))
					))
					ELSEIF(?(EQUAL @factType "IsVisible"))
				        (IF(?(Spark.objectGTP (VAL @mainEntity) @mainName))
					   (IF(?(Spark.objectGTP (VAL @targetEntity) @targetName))
					   (!(DatabaseInterface.remove (AGENT-STATEMENT PR2_ROBOT (VAL @targetName) isVisibleBy (VAL @mainName)) $result))
					   ))
					ELSEIF(?(EQUAL @factType "IsOn"))
					    (IF(?(~(EQUAL @factSubType "IsAbove")))
					       (!(PRINT @factSubType))
				        (IF(?(Spark.objectGTP (VAL @mainEntity) @mainName))
					   (IF(?(Spark.objectGTP (VAL @targetEntity) @targetName))
					       (!(DatabaseInterface.remove (AGENT-STATEMENT PR2_ROBOT (VAL @mainName) isOn (VAL @targetName)) $result))
					       ))
					       )
					       ELSEIF(?(EQUAL @factType "IsNextTo"))
				        (IF(?(Spark.objectGTP (VAL @mainEntity) @mainName))
					   (IF(?(Spark.objectGTP (VAL @targetEntity) @targetName))
					          (!(DatabaseInterface.remove (AGENT-STATEMENT PR2_ROBOT (VAL @mainName) isNextTo (VAL @targetName)) $result))
						  ))
					       ELSEIF(?(EQUAL @factType "IsIn"))
				        (IF(?(Spark.objectGTP (VAL @mainEntity) @mainName))
					   (IF(?(Spark.objectGTP (VAL @targetEntity) @targetName))
						   (!(DatabaseInterface.remove (AGENT-STATEMENT PR2_ROBOT (VAL @mainName) isIn (VAL @targetName)) $result))
						   ))
					)
				)
			)
		
		(!(= @numFact (+ @numFact 1)))
		)
            (!(ReportManager.publish Spark.report (VAL @id) (VAL @report)))
		(~>(Spark.previousWorldState @factId))
		(=>(Spark.previousWorldState @wsId))

	     )
	  (!(SEM-V Spark.sem))

	
	  
	  )
   )

)
