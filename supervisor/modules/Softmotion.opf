;; -*-Lisp-*-
;;author: Michelangelo Fiore
;;This module handles Softmotion requestes. These procedures are thread safe. Each part of the body is governed by a different mutex.


(
 (defop |init|
   :invocation(!(Softmotion.init))
   :documentation "Initializes the module"
   :body (
	  (!(SEM-CREATE Softmotion.sem 1 SEM-FIFO))
	  (=>(Softmotion.freeId 0))

	  )
   )

(defop |Softmotion.getFreeId|
   :invocation(!(Softmotion.getFreeId $id))
   :documentation "gets a new id for requestes"
   :body (
	  (!(SEM-P Softmotion.sem))
	  (?(Softmotion.freeId $id))

	  (=>(Softmotion.freeId (+ $id 1)))
	  (!(SEM-V Softmotion.sem))
	  )
   )
 (defop |moveArm|
   :invocation(Softmotion.request moveArm @armId @id)
   :documentation "Executes the trajectory calculated previously by MHP"
   :body (
	  (?(Softmotion.arm @arm (VAL @armId)))
	  (IF(?(EQUAL @arm RIGHT))
	     (!(SEM-P Softmotion.sem))
	     (!(= @armJoint RIGHT_ARM))
	     
	     ELSE
	     (!(SEM-P Softmotion.sem))
	     (!(= @armJoint LEFT_ARM))
	     )
	  


	  (!(= @parameters 
	       (PR2SM_TRACK_STR 
		(posterName 
		 (name  "mhpArmTraj"))	     
		(trackMode PR2SM_TRACK_POSTER )
		(robotPart (VAL @armId)))))

      (!(GenomInterface.handleRequest  PR2SOFTMOTION PR2SOFTMOTION_TRACKQ (Softmotion.stop (VAL @id)) (FALSE) (FALSE) 300 (VAL @parameters) @report @result))
      (!(ReportManager.publish Softmotion.report (VAL @id) (VAL @report)))

	 
	  (IF(?(EQUAL @arm RIGHT))
	     (!(SEM-V Softmotion.sem))
	     ELSE
	     (!(SEM-V Softmotion.sem))
	     ) 
	  (!(Mhp.cleanTrajectories))
	  )
)

 (defop |moveArmWithoutMhpClean|
   :invocation(Softmotion.request moveArmWithoutMhpClean @armId @id)
   :documentation "Executes the trajectory calculated previously by MHP and not delete this trajectory"
   :body (
	  (?(Softmotion.arm @arm (VAL @armId)))
	  (IF(?(EQUAL @arm RIGHT))
	     (!(SEM-P Softmotion.sem))
	     
	     ELSE
	     (!(SEM-P Softmotion.sem))
	     )
	  

	  
	  (!(= @parameters 
	       (PR2SM_TRACK_STR 
		(posterName 
		 (name  "mhpArmTraj"))	     
		(trackMode PR2SM_TRACK_POSTER )
		(robotPart (VAL @armId)))))

	  (!(GenomInterface.handleRequest  PR2SOFTMOTION PR2SOFTMOTION_TRACKQ (Softmotion.stop (VAL @id)) (Robot.isMovingArm (VAL @arm) TRUE) (Robot.isMovingArm (VAL @arm) FALSE) 300 (VAL @parameters) @report @result))
      (!(ReportManager.publish Softmotion.report (VAL @id) (VAL @report)))

	 
	  (IF(?(EQUAL @arm RIGHT))
	     (!(SEM-V Softmotion.sem))
	     ELSE
	     (!(SEM-V Softmotion.sem))
	     ) 
	  )
   
   )


(defop |GoToQ|
  :invocation(Softmotion.request goToQ @robotPart @relatif @base_tx @base_ty @base_tz @base_rx
                                @base_ry @base_rz @torso @head_pan @head_tilt @laser_tilt
                                @r_shoulder_pan @r_shoulder_lift @r_upper_arm_roll @r_elbow_flex
                                @r_forearm_roll @r_wrist_flex @r_writ_roll @r_gripper
                                @r_gripper_false @l_shoulder_pan @l_shoulder_lift
                                @l_upper_arm_roll @l_elbow_flex  @l_forearm_roll @l_wrist_flex
                                @l_wrist_roll @l_gripper @l_gripper_false @id
                                )
  :body (


         (!(= @parameters
                  (PR2SM_QSTR
                   (robotPart  @robotPart)
                   (relatif  @relatif)
                   (base_tx  @base_tx)
                   (base_ty  @base_ty)
                   (base_tz  @base_tz)
                   (base_rx  @base_rx)
                   (base_ry  @base_ry)
                   (base_rz  @base_rz)
                   (torso  @torso)
                   (head_pan  @head_pan)
                   (head_tilt  @head_tilt)
                   (laser_tilt  @laser_tilt)
                   (r_shoulder_pan  @r_shoulder_pan)
                   (r_shoulder_lift  @r_shoulder_lift)
                   (r_upper_arm_roll  @r_upper_arm_roll)
                   (r_elbow_flex  @r_elbow_flex)
                   (r_forearm_roll  @r_forearm_roll)
                   (r_wrist_flex  @r_wrist_flex)
                   (r_writ_roll  @r_writ_roll)
                   (r_gripper  @r_gripper)
                   (r_gripper_false  @r_gripper_false)
                   (l_shoulder_pan  @l_shoulder_pan)
                   (l_shoulder_lift  @l_shoulder_lift)
                   (l_upper_arm_roll  @l_upper_arm_roll)
                   (l_elbow_flex  @l_elbow_flex)
                   (l_forearm_roll  @l_forearm_roll)
                   (l_wrist_flex  @l_wrist_flex)
                   (l_wrist_roll  @l_wrist_roll)
                   (l_gripper  @l_gripper)
                   (l_gripper_false  @l_gripper_false))))

         (!(GenomInterface.handleRequest  PR2SOFTMOTION PR2SOFTMOTION_GOTOQ (Softmotion.stop (VAL @id)) (FALSE) (FALSE) 10 (VAL @parameters) @report @result))
         (!(ReportManager.publish Softmotion.report (VAL @id) (VAL @report)))

         )

  )

(defop |moveArmWithoutMhp|
  :invocation(Softmotion.request moveArmWithoutMhp @q0 @q1 @q2 @q3 @q4 @q5 @q6 @id)
  :documentation
  :body (
	 (!(SEM-P Softmotion.sem))


	   
	   (!(= @parameters 
		(PR2SM_QSTR 
		 (robotPart  RARM)
		 (relatif  0)
		 (base_tx  0.0)
		 (base_ty  0.0)
		 (base_tz  0.0)
		 (base_rx  0.0)
		 (base_ry  0.0)
		 (base_rz  0.0)
		 (torso  0.0)
		 (head_pan  0.0)
		 (head_tilt  0.0)
		 (laser_tilt  0.0)
		 (r_shoulder_pan  @q0)
		 (r_shoulder_lift  @q1)
		 (r_upper_arm_roll  @q2)
		 (r_elbow_flex  @q3)
		 (r_forearm_roll  @q4)
		 (r_wrist_flex  @q5)
		 (r_writ_roll  @q6)
		 (r_gripper  0.0)
		 (r_gripper_false  0.0)
		 (l_shoulder_pan  0.0)
		 (l_shoulder_lift  0.0)
		 (l_upper_arm_roll  0.0)
		 (l_elbow_flex  0.0)
		 (l_forearm_roll  0.0)
		 (l_wrist_flex  0.0)
		 (l_wrist_roll  0.0)
		 (l_gripper  0.0)
		 (l_gripper_false  0.0))
		))
	   
	   

	   (!(GenomInterface.handleRequest PR2SOFTMOTION PR2SOFTMOTION_GOTOQ (Softmotion.stop (VAL @id)) (Robot.isMoving HEAD TRUE) (Robot.isMoving HEAD FALSE) 300 (VAL @parameters) @report @result))
       (!(ReportManager.publish Softmotion.report (VAL @id) (VAL @report)))

       (~>(Mhp.previousTask @a @b))
	   (=>(Mhp.previousTask -1 -1))
	   (!(SEM-V Softmotion.sem))
	 )
  )
 (defop |moveHead|
   :invocation(Softmotion.request moveHead @pan @tilt @id)
   :documentation "Moves the head of the robot"
   :body  (
	   
	   (!(SEM-P Softmotion.sem))

	   

	   
	   (!(= @parameters 
		(PR2SM_QSTR 
		 (robotPart  HEAD)
		 (relatif  0)
		 (base_tx  0.0)
		 (base_ty  0.0)
		 (base_tz  0.0)
		 (base_rx  0.0)
		 (base_ry  0.0)
		 (base_rz  0.0)
		 (torso  0.0)
		 (head_pan  (VAL @pan))
		 (head_tilt  (VAL @tilt))
		 (laser_tilt  0.0)
		 (r_shoulder_pan  0.0)
		 (r_shoulder_lift  0.0)
		 (r_upper_arm_roll  0.0)
		 (r_elbow_flex  0.0)
		 (r_forearm_roll  0.0)
		 (r_wrist_flex  0.0)
		 (r_writ_roll  0.0)
		 (r_gripper  0.0)
		 (r_gripper_false  0.0)
		 (l_shoulder_pan  0.0)
		 (l_shoulder_lift  0.0)
		 (l_upper_arm_roll  0.0)
		 (l_elbow_flex  0.0)
		 (l_forearm_roll  0.0)
		 (l_wrist_flex  0.0)
		 (l_wrist_roll  0.0)
		 (l_gripper  0.0)
		 (l_gripper_false  0.0))
		))
	   
	   

	   (!(GenomInterface.handleRequest PR2SOFTMOTION PR2SOFTMOTION_GOTOQ (Softmotion.stop (VAL @id)) (Robot.isMoving HEAD TRUE) (Robot.isMoving HEAD FALSE) 300 (VAL @parameters) @report @result))
       (!(ReportManager.publish Softmotion.report (VAL @id) (VAL @report)))
	   (!(SEM-V Softmotion.sem))

	   )
   )

(defop |halt|
  :invocation (Softmotion.request halt @id)
  :documentation "Halts the execution, waiting for a resume"
  :body (

	  

	  
	  (!(GenomInterface.handleRequest PR2SOFTMOTION PR2SOFTMOTION_HALT (Softmotion.stop (VAL @id)) (FALSE) (FALSE) 300  NIL @report @result))
      (!(ReportManager.publish Softmotion.report (VAL @id) (VAL @report)))


	  )
  )
  

(defop |resume|
  :invocation (Softmotion.request resume @id)
  :documentation "Halts the execution, waiting for a resume"
  :body (

	  
	  
	  
	  (!(GenomInterface.handleRequest PR2SOFTMOTION PR2SOFTMOTION_RESUME (Softmotion.stop (VAL @id)) (FALSE) (FALSE) 300  NIL @report @result))
      (!(ReportManager.publish Softmotion.report (VAL @id) (VAL @report)))


	  )
  )

 (defop |stop|
   :invocation (Softmotion.request stop @id)
   :documentation "Stops the robot. This is not really safe i guess. The user should cancel all ongoing softmotion requestes or prepare for some failure reports"
   :body (



	  
	  
	  (!(GenomInterface.handleRequest PR2SOFTMOTION PR2SOFTMOTION_STOP (Softmotion.stop (VAL @id)) (FALSE) (FALSE) 300  NIL @report @result))
	  (=> (Robot.isMoving HEAD FALSE))
	  (=> (Robot.isMoving RIGHT_ARM FALSE))
	  (=> (Robot.isMoving LEFT_ARM FALSE))
      (!(ReportManager.publish Softmotion.report (VAL @id) (VAL @report)))

	  


	  )
   )


 
 (defop |useGripper|
   :invocation (Softmotion.request useGripper @state @id)
   :documentation "opens or closes the gripper of the robot"
   :body (
	 
	  
	  
	  (IF(?(||(EQUAL @state ROPEN) (EQUAL @state RCLOSE) (EQUAL @state RCANCEL) (EQUAL @state RGRAB) (EQUAL @state RRELEASE)))
	     (!(SEM-P Softmotion.sem))
	     
	     ELSE
	     (!(SEM-P Softmotion.sem))
	     )
	  
	  (!(= @irAddFact (FALSE)))
	  (IF(?(EQUAL @state ROPEN))
	     (!(= @stopFact (Robot.gripperStatus RIGHT OPEN)))
	     
	     ELSEIF(?(EQUAL @state RRELEASE))
	     (!(= @stopFact (Robot.gripperStatus RIGHT OPEN_AFTER_PRESSION)))
	     (!(= @irAddFact (Robot.gripperStatus RIGHT WAITING_PRESSION)))

	     ELSEIF(?(EQUAL @state RCLOSE))
	     (!(= @stopFact (Robot.gripperStatus RIGHT CLOSE)))
	     
	     ELSEIF(?(EQUAL @state RCANCEL))
	     (IF(?(Robot.gripperStatus RIGHT WAITING_PRESSION))
		(!(= @stopFact (Robot.gripperStatus RIGHT CLOSE)))
		
		ELSEIF(?(Robot.gripperStatus RIGHT WAITING_CONTACT))
		(!(= @stopFact (Robot.gripperStatus RIGHT OPEN)))
		
		ELSE
		(!(= @stopFact (FALSE))) 
		)
	     
	     ELSEIF(?(EQUAL @state RGRAB))
	     (!(= @stopFact (Robot.gripperStatus RIGHT CLOSE_AFTER_CONTACT)))
	     (!(= @irAddFact (Robot.gripperStatus RIGHT WAITING_CONTACT)))
	     
	     
	     ELSEIF(?(EQUAL @state LOPEN))
	     (!(= @stopFact (Robot.gripperStatus LEFT OPEN)))
	     
	     ELSEIF(?(EQUAL @state LRELEASE))
	     (!(= @stopFact (Robot.gripperStatus LEFT OPEN_AFTER_PRESSION)))
	     (!(= @irAddFact (Robot.gripperStatus LEFT WAITING_PRESSION)))

	     ELSEIF(?(EQUAL @state LCLOSE))
	     (!(= @stopFact (Robot.gripperStatus LEFT CLOSE)))
	     
	     ELSEIF(?(EQUAL @state LCANCEL))
	     (IF(?(Robot.gripperStatus LEFT WAITING_PRESSION))
		(!(= @stopFact (Robot.gripperStatus LEFT CLOSE)))
		
		ELSEIF(?(Robot.gripperStatus LEFT WAITING_CONTACT))
		(!(= @stopFact (Robot.gripperStatus LEFT OPEN)))
		ELSE
		(!(= @stopFact (FALSE))) 
		)
	    
	     ELSEIF(?(EQUAL @state LGRAB))
	     (!(= @stopFact (Robot.gripperStatus LEFT CLOSE_AFTER_CONTACT)))
	     (!(= @irAddFact (Robot.gripperStatus LEFT WAITING_CONTACT)))
	     
	     )


	  (IF(?(|| (EQUAL @state RRELEASE) (EQUAL @state LRELEASE)))
	     (!(= @waitTime (FALSE)))

	     ELSE
	  (!(= @waitTime 300))
	  )
      
	  
      (IF (?(Softmotion.isActive TRUE)) ;;the gripper doesn't seem to work in simulation
	      (!(= @parameters (PR2SM_gripperGrabRelease (VAL @state))))	     

          (!(GenomInterface.handleRequest PR2SOFTMOTION PR2SOFTMOTION_GRIPPERGRABRELEASE (Softmotion.stop (VAL @id)) (VAL @irAddFact) (VAL @stopFact) @waitTime @parameters @report @result))
          (!(ReportManager.publish Softmotion.report (VAL @id) (VAL @report)))
	      
	      ELSEIF(?(EQUAL @state RRELEASE))
	      (^(Softmotion.stop (VAL @id)))
	      (~>(Softmotion.stop (VAL @id)))
          (!(ReportManager.publish Softmotion.report (VAL @id) "OK"))
	      
	      ELSE
	      (=>(VAL @stopFact))
          (!(ReportManager.publish Softmotion.report (VAL @id) "OK"))
	      )

	  (IF(?(||(EQUAL @state ROPEN) (EQUAL @state RGRAB) (EQUAL @state RCLOSE) (EQUAL @state RCANCEL) (EQUAL @state RRELEASE)))
	     (!(SEM-V Softmotion.sem))
	     
	     ELSE
	     (!(SEM-V Softmotion.sem))
	     )

	  )
   )
 

 (defop |getPanTiltFromXYZ|
   :invocation(Softmotion.request getPanTiltFromXYZ @x @y @z @id)
   :documentation "get the pan and tilt to move the head to look at a point x y z"
   :body (
	  (!(SEM-P Softmotion.sem)) 
	  
	  
	  (!(= @parameters (PR2SM_xyzHead 
           (x  (VAL @x))
           (y  (VAL @y))
           (z  (VAL @z))
           (frame  "/map"))
	       ))
	  
	  (!(GenomInterface.handleRequest PR2SOFTMOTION PR2SOFTMOTION_GETPANTILTFROMXYZ (Softmotion.stop (VAL @id)) (FALSE) (FALSE) 300 @parameters @report @result))
      (!(ReportManager.publish Softmotion.report (VAL @id) (VAL @report)))

      (IF(?(Softmotion.isActive TRUE))
	     (!(== (VAL @result) (PR2SM_PanTilt 
				  (pan  @pan)
				  (tilt  @tilt))
		   ))
	     
	     ELSE
	     (!(= @pan 0))
	     (!(= @tilt 0))
	  )
	  (=>(Softmotion.result (VAL @id) (VAL @pan) (VAL @tilt)))

	  (!(SEM-V Softmotion.sem)) 
	  )

 
   )

(defop |detectPression|
  :invocation(Softmotion.request detectPression @state @id)
  :documentation "Request for detect pression. It accepts as @state every possibile state of the gripper, but for some of these states I don't know what the procedure will actually do. Release and Grab are tested and fine."
  :body (
	  (IF(?(||(EQUAL @state ROPEN) (EQUAL @state RCLOSE) (EQUAL @state RCANCEL) (EQUAL @state RGRAB) (EQUAL @state RRELEASE)))

	     (!(= @stopFact (Robot.gripperStatus RIGHT DETECTED_PRESSION)))
	     (!(= @irAddFact (Robot.gripperStatus RIGHT DETECTING_PRESSION)))	     
	     ELSE
	     (!(= @stopFact (Robot.gripperStatus LEFT DETECTED_PRESSION)))
	     (!(= @irAddFact (Robot.gripperStatus LEFT DETECTING_PRESSION)))	     
	     )
	  
	  (!(= @parameters (PR2SM_gripperGrabRelease (VAL @state))))	     
	  (!(GenomInterface.handleRequest PR2SOFTMOTION PR2SOFTMOTION_DETECTPRESSION (Softmotion.stop (VAL @id)) @irAddFact (FALSE) (FALSE) @parameters @report @result)) 
      (!(ReportManager.publish Softmotion.report (VAL @id) (VAL @report)))
	  (IF(?(EQUAL @report "OK"))
	     (=> (VAL @stopFact))
	     
	    )
	 

	  
	 )

  )


)
