;; -*-Lisp-*-
;;author: Michelangelo Fiore
;;this module contains utilities procedures for MHP. 
;;The module supports multiple trajectories in memory, so that the robot can calculate motion plans in advance and react quickly to requestes. For now we don't support composed trajectories (for example the robot
;;plans three different movement in advance and executes them together)

(
 

 (defop |init|
   :invocation(!(Mhp.init))
   :documentation "inits the parameters of the module"
   :body (
	  (!(SEM-CREATE Mhp.sem 1 SEM-FIFO))
	  (=>(Mhp.freeId 0))
      (=>(Mhp.previousTask -2 -2))
	  )
   )
 

 (defop |Mhp.getFreeId|
   :invocation(!(Mhp.getFreeId $id))
   :documentation "gets a new id for requestes"
   :body (
	  (!(SEM-P Mhp.sem))
	  (?(Mhp.freeId $id))

	  (=>(Mhp.freeId (+ $id 1)))
	  (!(SEM-V Mhp.sem))
	  )
   )
 (defop |makeArmStartParameter|
   :invocation (!(Mhp.makeArmStartParameter @q1 @q2 @q3 @q4 @q5 @q6 @q7 $armStart))
   :documentation "utility function to create the ArmStart parameter"
   :body 
   (
            (!(= $armStart (armStart 
              (q1  (VAL @q1))
              (q2  (VAL @q2))
              (q3  (VAL @q3))
              (q4  (VAL @q4))
              (q5  (VAL @q5))
              (q6  (VAL @q6))
              (q7  (VAL @q7)))))
    
	    )
   )
 (defop |makeArmGotoParameter|
   :invocation (!(Mhp.makeArmGotoParameter @q1 @q2 @q3 @q4 @q5 @q6 @q7 $armGoto))
   :documentation "utility function to create the ArmStart parameter"
   :body 
   (
    (!(= $armGoto (armGoto 
		   (q1  (VAL @q1))
		   (q2  (VAL @q2))
		   (q3  (VAL @q3))
		   (q4  (VAL @q4))
		   (q5  (VAL @q5))
		   (q6  (VAL @q6))
		   (q7  (VAL @q7)))))
    
    )
   )
 
 (defop |setTrajectories|
   :invocation(Mhp.request setTrajectories @trajList) 
   :documentation "Starts calculating the trajectories in @trajList. @trajList is a LispList (. @traj1 @traj2 @trajn .) where each @traji follows the following format:
    (. @task @armId @armGoto @object @support @placement @cartesian  @useObjGoto @objGoto .) . This procedure is interrupted if there is a cleanTrajectories
    there is no return from this procedure. The idea is that it just runs in background and does what it can"
   :body (
					;the start is always the same
	  (!(= @armStart (armStart 
			  (q1  0)   
			  (q2  0)
			  (q3  0)
			  (q4  0)
			  (q5  0)
			  (q6  0)
			  (q7  0))))
	  (!(= @objStart (objStart 0.0 0.0 0.0 0.0 0.0 0.0))) 
	  (!(= @useObjStart 0))
	  (~>(Mhp.stopSetTrajectories))

	  (WHILE(?(& (~(Mhp.stopSetTrajectories)) (~(NULL @trajList)) ))
		

		(!(= @traj (CAR @trajList)))
		(!(= @trajList (CDR @trajList)))
		
		(!(== (VAL @traj) (. @task @armId @armGoto @object @support @placement @cartesian @useObjGoto @objGoto .)))

		(!(Mhp.getFreeId @mhpTrajId))

        (!(ReportManager.sub Mhp.report @mhpTrajId))
		(=>(Mhp.request setTrajectory GEN_TRUE @task @armId @armStart @armGoto @object @support @placement @cartesian @useObjStart @objStart @useObjGoto @objGoto @mhpTrajId))

		(^(Mhp.report (VAL @mhpTrajId) @report)) ;we don't actually do error report here. We leave that part to the execution manager when he actually tries to get the trajectory

        (!(ReportManager.unsub Mhp.report @mhpTrajId))
        )
	
      )
   )

	  


   ( defop |setTrajectory|
   :invocation(Mhp.request setTrajectory @startIsCurrent @task @armId @armStart @armGoto @object @support @placement @cartesian @useObjStart @objStart @useObjGoto @objGoto @mhpId)
   :documentation "If there is an already calculated trajectory for a given task it sets it if not it calculates it"
   :body(
	 
	 ;;we don't call mutexes here since we're going to call other  mhp requestes inside.
	 
	 (!(Mhp.chooseTargetForTrajectory @task @object @placement @armGoto @useObjGoto @objGoto @target))

	 (!(Mhp.getFreeId @mhpId2))  ;;this procedure must call one or two mhp requestes so we get other ids.
	 (IF(?(Mhp.hasTrajectory @trajId (VAL @armId) (VAL @task) (VAL @target))) ;if there is already a trajectory we just switch the poster to that one.

        (!(ReportManager.sub Mhp.report @mhpId2))
	    (=>(Mhp.request armSelectTraj @trajId @mhpId2))
	    (^(Mhp.report (VAL @mhpId2) @report))
        (!(ReportManager.unsub Mhp.report @mhpId2))
        (!(ReportManager.publish Mhp.report @mhpId @report))     ;the final report is equal to the report of the switch trajectory request.

	    ELSE ;we don't have a trajectory so we're going to calculate it and switch to it.
	    
        (=> (Mhp.request armPlanTask @startIsCurrent @task @armId @armStart @armGoto @object @support @placement @cartesian @useObjStart @objStart @useObjGoto @objGoto @mhpId2))
        (!(ReportManager.sub Mhp.report @mhpId2))
	    (^(Mhp.report (VAL @mhpId2) @report1))       
        (!(ReportManager.unsub Mhp.report @mhpId2))
	    (IF(?(EQUAL @report1 "OK")) ;if the trajectory is calculated successfully we switch to it
	       (IF(?(Mhp.hasTrajectory @trajId (VAL @armId) (VAL @task) (VAL @target)))
		  ;;if we don't enter this loop it means the the trajectories were canceled after a move action. This means that basically we fail to calculate this trajectory. It should only happen if this procedure was called from the "SetTrajectories" function.
		  
		  (!(Mhp.getFreeId @mhpId3))
          (!(ReportManager.sub Mhp.report @mhpId3))
          (=>(Mhp.request armSelectTraj @trajId @mhpId3))

		  (^(Mhp.report (VAL @mhpId3) @report2))
          (!(ReportManager.unsub Mhp.report @mhpId3))
		  
		  ELSE
		  ;in this case we don't switch to the new function and edit the @report1 variable to a canceled state
		  (!(= @report@1 CANCELED))
		  
		  )
           )
        (!(ReportManager.publish Mhp.report @mhpId @report1))  ;in this case we take for final report the report of mhp.armplantask since the other will not fail (is this correct?)

	    )
	 

	 )
   )

(defop |armSelectTraj|
  :invocation(Mhp.request armSelectTraj @trajId @id)
  :documentation "Select a trajectory for execution"
  :body (

     (!(SEM-P Mhp.sem))
     (!(= @parameters
         (INTEGER (VAL @trajId))
         ));  $RQST-ID))
     (IF(?(Mhp.isActive TRUE))
     (!(GenomInterface.handleRequest MHP MHP_ARMSELECTTRAJ (Mhp.stop (VAL @id)) (FALSE) (FALSE) 300 (VAL @parameters) @report @result))

     ELSE
     (!(= @report "OK"))
     )
     (!(ReportManager.publish Mhp.report (VAL @id) (VAL @report)))

     (!(SEM-V Mhp.sem))

     )
  )

(defop |chooseTargetForTrajectory|
  :invocation(!(Mhp.chooseTargetForTrajectory  @task @object @placement @armGoto @useObjGoto @objGoto $target))
  :documentation "utility function. Does some controls to choose which the target to put\retrieve from the database depending on the task e target point of the trajectory"
  :body (
     (IF(?(EQUAL @useObjGoto 0))
        (IF(?(EQUAL @task MHP_ARM_PICK_GOTO))
           (!(= $target (VAL @object)))  ;if planning a pick our target is the object

           ELSEIF(?(|| (EQUAL @task MHP_ARM_PICK_TAKE_TO_PLACE) (EQUAL @task MHP_PLACE_FROM_FREE)))
           (!(= $target (VAL @placement)))     ;if planning a place we save the name of the placement

           ELSE
           (!(= $target (VAL @armGoto)))   ;target is the q configuration.
           )
	    ELSE  
	    (!(= $target (VAL @objGoto)))  ;if we are planning a trajectory to a point we save that point
	    )
	 )
  )

 (defop |armPlanTask|
   :invocation (Mhp.request armPlanTask @startIsCurrent @task @armId @armStart @armGoto @object @support @placement @cartesian @useObjStart @objStart @useObjGoto @objGoto @id)
   :documentation "calculates a new trajectory for the given parameters"
   :body (
	  
	  
	  (!(SEM-P Mhp.sem))
	 	  
 	  (!(Mhp.chooseTargetForTrajectory  @task @object @placement @armGoto @useObjGoto @objGoto $target))
	  (IF(?(~(Mhp.hasTrajectory @trajId (VAL @armId) (VAL @task) (VAL $target)))) ;if we don't have already a trajectory for this task.
	     (!(Mhp.getTrajId @trajId)) ;find a free trajectory id
	     (!(= @parameters
		  (STRUCT_MHP_ARM_PLAN_PARAMS 
		   (trajId  (VAL @trajId))
		   (startIsCurrent  (VAL @startIsCurrent))
		   (taskType  (VAL @task))
		   (armId  (VAL @armId))
		   (VAL @armStart)
		   (VAL @armGoto)
		   (objectName 
		    (name  (TERM-STRING-CAT @object)))
		   (supportName 
		    (name  (TERM-STRING-CAT @support)))
		   (placementName 
		    (name  (TERM-STRING-CAT @placement)))
		   (cartesian  (VAL @cartesian))
		   (useObjStart  (VAL @useObjStart))
		   (VAL @objStart)
		   (unused2  0)
		   (useObjGoto (VAL @useObjGoto))
		   (VAL @objGoto)
		   )
		  )
           )

         (IF(?(Mhp.isActive TRUE))
	     (!(GenomInterface.handleRequest MHP MHP_ARMPLANTASK (Mhp.stop (VAL @id)) (FALSE) (FALSE) 300 (VAL @parameters) @report @result))

         ELSE
         (!(= @report "OK"))
         )
         (!(ReportManager.publish Mhp.report (VAL @id) (VAL @report)))


	     (IF(?(EQUAL @report "OK"))

		(=>(Mhp.hasTrajectory (VAL @trajId) (VAL @armId) (VAL @task) (VAL $target))) ;save the new trajectory info.
		)
	       
	  ELSE
      (!(ReportManager.publish Mhp.report (VAL @id) "OK"))

	  )
	  (!(SEM-V Mhp.sem))
	  )
   )

 (defop |SelectTrajId|
   :invocation(!(Mhp.getTrajId $trajId))
   :documentation "returns the first free trajectory or cancels the one with the lowest id"
   :body   (
	    (!(= @i 0))
	    (!(= @isFound FALSE))
	    (WHILE(?(&(EQUAL @isFound FALSE) (< @i 10)))
		  (IF(?(Mhp.hasTrajectory (VAL @i) @armId @task @target))
		     (!(= @i (+ @i 1)))
		     
		     ELSE
		     (!(= @isFound TRUE))
		     )
		  )
	    (IF(?(EQUAL @isFound TRUE))
	       (!(= $trajId (VAL @i)))

	       ELSE
	       (!(= $trajId 0))
	       (~>(Mhp.hasTrajectory 0 @armId @task @target))
	       )
	    )
   )
 (defop |CleanTrajectories|
   :invocation (!(Mhp.cleanTrajectories))
   :documentation "Deletes every trajectory in memory"
   :body (
	  (=>(Mhp.stopSetTrajectories))  ;if we're calculating trajectories stop.

	  (!(= @toDo TRUE))
	  (WHILE(?(EQUAL @toDo TRUE))
		(IF(?(Mhp.hasTrajectory @id @armId @task @target))
		   (~>(Mhp.hasTrajectory (VAL @id) (VAL @armId) (VAL @task) (VAL @target) ))
		   
		   ELSE
		   (!(= @toDo FALSE))
		   )
		)
	  )
   )

(defop |initGtp|
  :invocation(Mhp.request initGtp @id)
  :documentation "inits the geometrical task planner module"
  :body (

         (IF(?(Mhp.isActive TRUE))
            (!(GenomInterface.handleRequest MHP MHP_INITGTP (Mhp.stop (VAL @id)) (FALSE) (FALSE) 300 nil @report @result))
            ELSE
            (!(= @report "OK"))
            )
         (!(ReportManager.publish Mhp.report (VAL @id) (VAL @report)))
	 
	 )
  )

(defop |fetchEnvironment|
  :invocation(Mhp.request fetchEnvironment @id)
  :documentation ""
  :body (
         (IF(?(Mhp.isActive TRUE))
         (!(GenomInterface.handleRequest MHP MHP_FETCHENVIRONMENT (Mhp.stop (VAL @id)) (FALSE) (FALSE) 300 nil @report @result))
         ELSE
         (!(= @report "OK"))
         )
     (!(ReportManager.publish Mhp.report (VAL @id) (VAL @report)))
	 )
  )
(defop |planGtpTask|
  :invocation(Mhp.request planGtpTask @task @id)
  :documentation ""
  :body (

	 (?(Mhp.previousTask @previousTaskId @previousTaskAlternativeId))
 
	 (!(= @params 
	      (STRUCT_TASK_INPUT 
	       (type 
		(name  (TERM-STRING-CAT @task)))
	       
	       (previousTaskId  @previousTaskId)
	       (previousTaskAlternativeId  @previousTaskAlternativeId)
	       (computeMotionPlan  GEN_TRUE)
	       (dummy  GEN_TRUE))	      
          ))


     (IF(?(Mhp.isActive TRUE))
        (!(GenomInterface.handleRequest MHP MHP_PLANGTPTASK (Mhp.stop (VAL @id)) (FALSE) (FALSE) 300 @params @report @result))
        ELSE
        (!(= @report "OK"))
        )
     (!(ReportManager.publish Mhp.report (VAL @id) (VAL @report)))
	 (IF(?(EQUAL @report "OK"))
        (IF(?(Mhp.isActive TRUE))
	       (!(== (VAL @result) (STRUCT_TASK_OUTPUT 
                                (taskId  @newTaskId)
                                (taskAlternativeId  @newTaskAId)
                                (cost @cost)
                                (return_report (name @reportName))

                                )))
	       
	       ELSE
	       (!(= @newTaskId 0))
	       (!(= @newTaskAId 0))
	       (!(= @cost 0))
           )
	    (~>(Mhp.previousTask @a @b))
	    (=>(Mhp.previousTask @newTaskId @newTaskAId))
	    )

	 )
  )
(defop |smoothGtpTraj|
  :invocation(Mhp.request smoothGtpTraj @taskId @alternativeId @id)
  :documentation ""
  :body (
	 
	 (!(= @params         (STRUCT_TASK_ID_ONLY 
			       (taskId  @taskId)
			       (alternativeId  @alternativeId))
	      )
       )
     (IF(?(Mhp.isActive TRUE))
     (!(GenomInterface.handleRequest MHP MHP_SMOOTHGTPTRAJ (Mhp.stop (VAL @id)) (FALSE) (FALSE) 300 @params @report @result))
     ELSE
     (!(= @report "OK"))
     )
     (!(ReportManager.publish Mhp.report @id @report))
	 )
  )
(defop |getGtpTaskDetails|
  :invocation(Mhp.request getGtpTaskDetails @taskId @alternativeId @id)
  :documentation ""
  :body (
	 
	 (!(= @params         (STRUCT_TASK_ID_ONLY 
			       (taskId  @taskId)
			       (alternativeId  @alternativeId))
	      )
       )
     (IF(?(Mhp.isActive TRUE))
     (!(GenomInterface.handleRequest MHP MHP_GETGTPTASKDETAILS (Mhp.stop (VAL @id)) (FALSE) (FALSE) 300 @params @report @result))
     ELSE
     (!(= @report "OK"))
     )
     (!(ReportManager.publish Mhp.report @id @report))
	 (IF(?(EQUAL @report "OK"))
        (IF(?(Mhp.isActive TRUE))
	       (!(== (VAL @result)   
		     (STRUCT_TASK_DETAILS 
		      (taskType 
		       (name  @name))

		      (nbOfAlternatives  @nbOfAlternatives)
		      (nbSubTrajs  @nSubTrajs)
		      (subTrajs 
		       (subTrajId  @subTrajId1)
		       (armId  @dummy1)
		       (subTrajName 
			(name  @subTrajName1))

		       (robot 
			(name  @robot1))

		       (subTrajId  @subTrajId2)
		       (armId  @dummy2)
		       (subTrajName 
			(name  @subTrajName2))

		       (robot 
			(name  @robot2))

		       (subTrajId  @subTrajId3)
		       (armId  @dummy3)
		       (subTrajName 
			(name  @subTrajName3))

		       (robot 
			(name  @robot3))

		       (subTrajId  @subTrajId4)
		       (armId  @dummy4)
		       (subTrajName 
			(name  @subTrajName4))

		       (robot 
			(name  @robot4))

		       (subTrajId  @subTrajId5)
		       (armId  @dummy5)
		       (subTrajName 
			(name  @subTrajName5))

		       (robot 
			(name  @robot5))

		       (subTrajId  @subTrajId6)
		       (armId  @dummy6)
		       (subTrajName 
			(name  @subTrajName6))

		       (robot 
			(name  @robot6))

		       (subTrajId  @subTrajId7)
		       (armId  @dummy7)
		       (subTrajName 
			(name  @subTrajName7))

		       (robot 
			(name  @robot7))

		       (subTrajId  @subTrajId8)
		       (armId  @dummy8)
		       (subTrajName 
			(name  @subTrajName8))

		       (robot 
			(name  @robot8))
		       
		       (subTrajId  @subTrajId9)
		       (armId  @dummy9)
		       (subTrajName 
			(name  @subTrajName9))

		       (robot 
			(name  @robot9))

		       (subTrajId  @subTrajId10)
		       (armId  @dummy10)
		       (subTrajName 
			(name  @subTrajName10))

		       (robot 
			(name  @robot10))
		       )
		      )
		     )
		 )
	       (!(= @i 0))
	       (!(= @trajList (. (. @subTrajId1 @dummy1 @subTrajName1 @robot1 .)  
				 (. @subTrajId2 @dummy2 @subTrajName2 @robot2 .)
				 (. @subTrajId3 @dummy3 @subTrajName3 @robot3 .)
				 (. @subTrajId4 @dummy4 @subTrajName4 @robot4 .)
				 (. @subTrajId5 @dummy5 @subTrajName5 @robot5 .)
				 (. @subTrajId6 @dummy6 @subTrajName6 @robot6 .)
				 (. @subTrajId7 @dummy7 @subTrajName7 @robot7 .)
				 (. @subTrajId8 @dummy8 @subTrajName8 @robot8 .)
				 (. @subTrajId9 @dummy9 @subTrajName9 @robot9 .)
				 (. @subTrajId10 @dummy10 @subTrajName10 @robot10 .)
				 .) ))
	       (?(Robot.name @robotName))
	       (!(= @resultList (. .)))
	       (WHILE(?(< @i @nSubTrajs))
		     (!(= @i (+ @i 1)))
		     (!(= @traj (CAR @trajList)))
		     (!(= @trajList (CDR @trajList)))
		     (!(= @subTrajId (CAR @traj)))
		     (!(= @dummy (CAR(CDR @traj))))
		     (!(= @subTrajName (CAR(CDR(CDR @traj)))))
		     (!(= @robot (CAR(CDR(CDR(CDR @traj))))))
					;		  (!(== (VAL @traj) (. @subTrajId @dummy @subTrajName @robot .)))
		     (IF(?(EQUAL @robot (TERM-STRING-CAT @robotName)))
			(!(= @resultList (CONS-TAIL (VAL @traj) @resultList)))
			)
		     )
	       (=>(Mhp.result @id @resultList))

	       ELSE
	       (=>(Mhp.result @id (. action .)))
	       )
	    )
	 )
  )

(defop |addGtpAgent|
  :invocation(Mhp.request addGtpAgent @type @name @id)
  :documentation ""
  :body (
	 
	 (!(= @params (STRUCT_TASK_INPUT_STR 
           (key 
              (name  (TERM-STRING-CAT @type)))

           (value 
              (name  (TERM-STRING-CAT @name))))))

     (IF(?(Mhp.isActive TRUE))
     (!(GenomInterface.handleRequest MHP MHP_ADDGTPAGENT (Mhp.stop (VAL @id)) (FALSE) (FALSE) 300 @params @report @result))
     ELSE
     (!(= @report "OK"))
     )
     (!(ReportManager.publish Mhp.report (VAL @id) (VAL @report)))
	 
	 )
  )


(defop |addGtpObject|
  :invocation(Mhp.request addGtpObject @type @name @id)
  :documentation ""
  :body (
	 
	 (!(= @params (STRUCT_TASK_INPUT_STR 
           (key 
              (name  (TERM-STRING-CAT @type)))

           (value 
              (name  (TERM-STRING-CAT @name))))))

     (IF(?(Mhp.isActive TRUE))
     (!(GenomInterface.handleRequest MHP MHP_ADDGTPOBJECT (Mhp.stop (VAL @id)) (FALSE) (FALSE) 300 @params @report @result))
     ELSE
     (!(= @report "OK"))
     )
     (!(ReportManager.publish Mhp.report (VAL @id) (VAL @report)))
	 
	 )
  )

(defop |addGtpData|
  :invocation(Mhp.request addGtpData @type @name @id)
  :documentation ""
  :body (
	 
	 (!(= @params (STRUCT_TASK_INPUT_STR 
           (key 
              (name  (TERM-STRING-CAT @type)))

           (value 
              (name  (TERM-STRING-CAT @name))))))

     (IF(?(Mhp.isActive TRUE))
     (!(GenomInterface.handleRequest MHP MHP_ADDGTPDATA (Mhp.stop (VAL @id)) (FALSE) (FALSE) 300 @params @report @result))
     ELSE
     (!(= @report "OK"))
     )
     (!(ReportManager.publish Mhp.report (VAL @id) (VAL @report)))
	 
	 )
  )

(defop |addGtpPoint|
  :invocation(Mhp.request addGtpPoint @type @x @y @z @id)
  :documentation ""
  :body (
	 
	 (!(= @params (STRUCT_TASK_INPUT_POINT
           (key 
              (name  (TERM-STRING-CAT @type)))

	   (value 
	    (x  @x)
	    (y  @y)
	    (z  @z))
	   )))

     (IF(?(Mhp.isActive TRUE))
     (!(GenomInterface.handleRequest MHP MHP_ADDGTPPOINT (Mhp.stop (VAL @id)) (FALSE) (FALSE) 300 @params @report @result))
     ELSE
     (!(= @report "OK"))
     )
     (!(ReportManager.publish Mhp.report (VAL @id) (VAL @report)))
	 
	 )
  )


(defop |addGtpConstraintFact| 
  :invocation(Mhp.request addGtpConstraintFact @type @subtype @main @target @value @valueType @specific)
  :body (
	 (!(= @params (STRUCT_GTP_FACT_MHP 
           (factType 
              (name  (TERM-STRING-CAT @type)))

           (factSubType 
              (name  (TERM-STRING-CAT @subtype)))

           (mainEntity 
              (name  (TERM-STRING-CAT @main)))

           (targetEntity 
              (name  (TERM-STRING-CAT @target)))

           (isComputed  GEN_TRUE)
           (boolValue  @value)
           (valueType  @valueType)
           (dummy  0)
           (specificValue  @specific))))
     (IF(?(Mhp.isActive TRUE))
     (!(GenomInterface.handleRequest MHP MHP_ADDGTPCONSTRAINTFACT (Mhp.stop (VAL @id)) (FALSE) (FALSE) 300 @params @report @result))
     ELSE
     (!(= @report "OK"))
     )
     (!(ReportManager.publish Mhp.report (VAL @id) (VAL @report)))
	 
	 )
  )
(defop |addGtpConstraintResource|
  :invocation(Mhp.request addGtpConstraintResource @type @name @id)
  :documentation ""
  :body (
	 
	 (!(= @params (STRUCT_TASK_INPUT_STR 
           (key 
              (name  (TERM-STRING-CAT @type)))

           (value 
              (name  (TERM-STRING-CAT @name))))))

     (IF(?(Mhp.isActive TRUE))
     (!(GenomInterface.handleRequest MHP MHP_ADDGTPCONSTRAINTRESSOURCE (Mhp.stop (VAL @id)) (FALSE) (FALSE) 300 @params @report @result))
     ELSE
     (!(= @report "OK"))
     )
     (!(ReportManager.publish Mhp.report (VAL @id) (VAL @report)))
	 
	 )
  )

(defop |clearGtpInputs|
  :invocation(Mhp.request clearGtpInputs @id)
  :body (
         (IF(?(Mhp.isActive TRUE))
         (!(GenomInterface.handleRequest MHP MHP_CLEARGTPINPUTS (Mhp.stop (VAL @id)) (FALSE) (FALSE) 300 nil @report @result))
         ELSE
         (!(= @report "OK"))
         )
     (!(ReportManager.publish Mhp.report (VAL @id) (VAL @report)))

	 )
  )

(defop |addGTPConstraintRegion| 
  :invocation(Mhp.request addGtpConstraintRegion @key @value @ax @ay @az @bx @by @bz @cx @cy @cz @dx @dy @dz @id)
  :body (
	 (!(= @params 
	      (STRUCT_TASK_CONST_POINTS 
	       (IdConst 
		(key 
		 (name  (TERM-STRING-CAT @key)))

		(value 
		 (name  (TERM-STRING-CAT @value)))
		)		 	

	       (A 
		(x  @ax)
		(y  @ay)
		(z  @az))

	       (B 
		(x  @bx)
		(y  @by)
		(z  @bz))

	       (C 
		(x  @cx)
		(y  @cy)
		(z  @cz))

	       (D 
		(x  @dx)
		(y  @dy)
		(z  @dz))
           )))
     (IF(?(Mhp.isActive TRUE))
     (!(GenomInterface.handleRequest MHP MHP_ADDGTPCONSTRAINTREGION (Mhp.stop (VAL @id)) (FALSE) (FALSE) 300 @params @report @result))
     ELSE
     (!(= @report "OK"))
     )
     (!(ReportManager.publish Mhp.report (VAL @id) (VAL @report)))
	 )
  )

(defop |loadGtpTaskTraj|
  :invocation(Mhp.request loadGtpTaskTraj @taskId @alternativeId @subTrajId @follow @id)
  :documentation ""
  :body (
	 (!(= @params        (STRUCT_TRAJ_ID 
			      (taskId  @taskId)
			      (alternativeId  @alternativeId)
			      (subTrajId  @subTrajId)
			      (follow  @follow))
          ))
     (IF(?(Mhp.isActive TRUE))
     (!(GenomInterface.handleRequest MHP MHP_LOADGTPTASKTRAJ (Mhp.stop (VAL @id)) (FALSE) (FALSE) 300 @params @report @result))
     ELSE
     (!(= @report "OK"))
     )
     (!(ReportManager.publish Mhp.report (VAL @id) (VAL @report)))
	 )
  )
(defop |loadGtpTaskTrajForNav|
  :invocation(Mhp.request loadGtpTaskTrajForNav @taskId @alternativeId @subTrajId @follow @id)
  :documentation ""
  :body (
	 (!(= @params        (STRUCT_TRAJ_ID 
			      (taskId  @taskId)
			      (alternativeId  @alternativeId)
			      (subTrajId  @subTrajId)
			      (follow  @follow))
          ))
     (IF(?(Mhp.isActive TRUE))
     (!(GenomInterface.handleRequest MHP MHP_LOADGTPTASKTRAJFORNAV (Mhp.stop (VAL @id)) (FALSE) (FALSE) 300 @params @report @result))
     ELSE
     (!(= @report "OK"))
     )
     (!(ReportManager.publish Mhp.report (VAL @id) (VAL @report)))
	 (IF(?(EQUAL @report "OK"))
        (IF(?(Mhp.isActive TRUE))
	       (!(== (VAL @result) (STRUCT_TRAJ_NAV_GTP 
				    (nbPoints  @nbPoints)
				    (dummy  @dummy)
				    (points 
				     (x  @x1)
				     (y  @y1)
				     (z  @z1)
				     (x  @x2)
				     (y  @y2)
				     (z  @z2)
				     (x  @x3)
				     (y  @y3)
				     (z  @z3)
				     (x  @x4)
				     (y  @y4)
				     (z  @z4)
				     (x  @x5)
				     (y  @y5)
				     (z  @z5)
				     (x  @x6)
				     (y  @y6)
				     (z  @z6)
				     (x  @x7)
				     (y  @y7)
				     (z  @z7)
				     (x  @x8)
				     (y  @y8)
				     (z  @z8)
				     (x  @x9)
				     (y  @y9)
				     (z  @z9)
				     (x  @x10)
				     (y  @y10)
				     (z  @z10)
				     (x  @x11)
				     (y  @y11)
				     (z  @z11)
				     (x  @x12)
				     (y  @y12)
				     (z  @z12)
				     (x  @x13)
				     (y  @y13)
				     (z  @z13)
				     (x  @x14)
				     (y  @y14)
				     (z  @z14)
				     (x  @x15)
				     (y  @y15)
				     (z  @z15)
				     (x  @x16)
				     (y  @y16)
				     (z  @z16)
				     (x  @x17)
				     (y  @y17)
				     (z  @z17)
				     (x  @x18)
				     (y  @y18)
				     (z  @z18)
				     (x  @x19)
				     (y  @y19)
				     (z  @z19)
				     (x  @x20)
				     (y  @y20)
				     (z  @z20)))))
	       (!(= @pointList (.   
				  (. @x2 @y2 @z2 .)  
				  (. @x3 @y3 @z3 .)  
				  (. @x4 @y4 @z4 .)  
				  (. @x5 @y5 @z5 .)  
				  (. @x6 @y6 @z6 .)  
				  (. @x7 @y7 @z7 .)  
				  (. @x8 @y8 @z8 .)  
				  (. @x9 @y9 @z9 .)  
				  (. @x10 @y10 @z10 .)  
				  (. @x11 @y11 @z11 .)  
				  (. @x12 @y12 @z12 .)  
				  (. @x13 @y13 @z13 .)  
				  (. @x14 @y14 @z14 .)  
				  (. @x15 @y15 @z15 .)  
				  (. @x16 @y16 @z16 .)  
				  (. @x17 @y17 @z17 .)  
				  (. @x18 @y18 @z18 .)  
				  (. @x19 @y19 @z19 .)  
				  (. @x20 @y20 @z20 .)  
				  .)))
	       (!(= @i 1))
	       (!(= @resultList (. .)))
	       (WHILE(?(< @i @nbPoints))
		     (!(= @w (CAR @pointList)))
		     (!(= @resultList (CONS-TAIL @w @resultList)))

		     (!(= @pointList (CDR @pointList)))
		     (!(= @i (+ @i 1)))
		     )
	       (=>(Mhp.result @id @resultList))
	       
	       ELSE
	       (=>(Mhp.result 0 (. .)))
	       )
	    )
	 )
  )
(defop |RemoveGtpAttachments|
  :invocation(Mhp.request removeGtpAttachments @id)
  :body (

         (IF(?(Mhp.isActive TRUE))
         (!(GenomInterface.handleRequest MHP MHP_REMOVEGTPATTACHEMENTS (FALSE) (FALSE) (FALSE) 300 nil @report @result))
         ELSE
         (!(= @report "OK"))
         )
     (!(ReportManager.publish Mhp.report (VAL @id) (VAL @report)))
	 )
  )
(defop |benPlanif|
  :invocation(Mhp.request benPlanif @x @y @theta @mhpId)
  :body (
         (!(= @armId MHP_BASE))
         (!(= @cartesian GEN_FALSE))
         (!(= @torso 0))
         (!(= @arm 0))
         (!(= @trajId 0))

         (!(= @params  (STRUCT_MHP_BEN_PLANIF_PARAMS
                        (trajId  0)
                        (armId  0)
                        (base
                         (x  @x)
                         (y  @y)
                         (th  @theta))

                        (torso  0)
                        (arm_right
                         (q1  0)
                         (q2  0)
                         (q3  0)
                         (q4  0)
                         (q5  0)
                         (q6  0)
                         (q7  0))

                        (arm_left
                         (q1  0)
                         (q2  0)
                         (q3  0)
                         (q4  0)
                         (q5  0)
                         (q6  0)
                         (q7  0))

                        (cartesian  GEN_FALSE)
                        (objGoto   0 0 0 0 0 0))))
         (IF(?(Mhp.isActive TRUE))
            (!(GenomInterface.handleRequest MHP MHP_BENPLANIF (Mhp.stop (VAL @id)) (FALSE) (FALSE) 300 @params @report @result))
            ELSE
            (!(= @report "OK"))
            )
         (!(ReportManager.publish Mhp.report (VAL @id) (VAL @report)))
         )
  )
(defop |AddGtpAttachement|
  :invocation(Mhp.request addGtpAttachmentFromTask @taskId @alternativeId @id)
  :body (
         (!(= @params  (STRUCT_TASK_ID_ONLY
                        (taskId  (VAL @taskId))
                        (alternativeId (VAL @alternativeId)))))
         (IF(?(Mhp.isActive TRUE))
            (!(GenomInterface.handleRequest MHP MHP_ADDGTPATTACHEMENTFROMTASK (FALSE) (FALSE) (FALSE) 300 @params @report @result))
            ELSE
            (!(= @report "OK"))
            )
         (!(ReportManager.publish Mhp.report (VAL @id) (VAL @report)))

         )
  )

(defop |clearGtpAttachmentSaved|
  :invocation(Mhp.request clearGtpAttachmentSaved @id)
  :body (
         (IF(?(Mhp.isActive TRUE))
            (!(GenomInterface.handleRequest MHP MHP_CLEARGTPATTACHEMENTSAVED (Mhp.stop (VAL @id)) (FALSE) (FALSE) 300 nil @report @result))
            ELSE
            (!(= @report "OK"))
            )
         (!(ReportManager.publish Mhp.report (VAL @id) (VAL @report)))

         )
  )

)
