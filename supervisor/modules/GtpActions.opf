;; -*-Lisp-*-
;;author: Michelangelo Fiore
;;This file contains procedures to handle GTP actions. Probably
;;there's no need for a whole file for this but i don't know where to
;;put them XD.

(
 (defop |init|
   :invocation(!(GtpActions.init))
   :documentation "init the module"
   :body (
	  (=>(GtpActions.freeId 0))
      (!(Mhp.getFreeId @id))
      (=>(Mhp.request fetchEnvironment @id))
      (!(GtpActions.handleReport Mhp @id 0))
	  ) 
   )
 (defop |getFreeId|
   :invocation(!(GtpActions.getFreeId $id))
   :body (
	  (?(GtpActions.freeId $id))
	  (=>(GtpActions.freeId (+ $id 1)))
	  )
   )

 (defop |openGripper|
   :invocation(!(GtpActions.request openGriper @gripper @gtpId))
   :body (
          (!(ArmActions.getFreeId @actionId))
          (!(ReportManager.sub ArmActions.report @actionId))
          (=>(ArmActions.action openGripper @gripper @actionId))
          (^(ArmActions.report (VAL @actionId) @report))
          (!(ReportManager.unsub ArmActions.report @actionId))
          (!(ReportManager.publish GtpActions.report @gtpId @report))
          )
   )

 (defop |closeGripper|
   :invocation (!(GtpActions.request closeGripper))
   :body (
          (!(ArmActions.getFreeId @actionId))
          (!(ReportManager.sub ArmActions.report @actionId))
          (=>(ArmActions.action closeGripper @gripper @actionId))
          (^(ArmActions.report (VAL @actionId) @report))
          (!(ReportManager.unsub ArmActions.report @actionId))
          (!(ReportManager.publish GtpActions.report @gtpId @report))
          )
   )
 (defop |pick|
   :invocation(GtpActions.request pick @object @arm @gtpId)
   :body (
	  (?(Robot.name @robotName))

      (IF(?(EQUAL @arm RIGHT))
	     (!(= @hand "right"))
	     
	     ELSE
	     (!(= @hand "left"))
         )

      (~>(Mhp.previousTask @oldId @oldAltId))
      (=>(Mhp.previousTask -2 -2))

      (!(Mhp.getFreeId @id))
      (=>(Mhp.request removeGtpAttachments @id))
      (!(GtpActions.handleReport Mhp @id @gtpId))

	  (!(Mhp.getFreeId @id))
	  (=>(Mhp.request addGtpAgent mainAgent @robotName @id))
	  (!(GtpActions.handleReport Mhp @id @gtpId))

	  (!(Mhp.getFreeId @id))
	  (=>(Mhp.request addGtpObject mainObject @object @id))
	  (!(GtpActions.handleReport Mhp @id @gtpId))

	  (!(Mhp.getFreeId @id))
	  (=>(Mhp.request addGtpData hand @hand @id))
      (!(GtpActions.handleReport Mhp @id @gtpId))

      (!(GtpActions.executeTask "pick" @arm @object NO_NAME @gtpId))
      )
   )

(defop |place|
  :invocation(GtpActions.request place @mainObject @supportObject @gtpId)
  :body (
         (?(Robot.name @robotName))
         (!(DatabaseInterface.findList (AGENT-STATEMENT (VAL @robotName) (VAL @robotName) @a (VAL @mainObject)) (. @a .) @result))
	 (!(= @found FALSE))
	 (WHILE(?(EQUAL @found FALSE))
	       (!(= @item (CAR(CAR @result))))
	       (IF(?(||(EQUAL @item RIGHT) (EQUAL @item LEFT)))
		  (!(= @found TRUE))
		  (!(= @arm @item))
	
		  ELSE
		  (!(= @result (CDR @result)))
		  )		     
	       )
;         (!(= @arm (CAR(CAR @result))))
         (IF(?(EQUAL @arm RIGHT))
            (!(= @hand "right"))

            ELSE
            (!(= @hand "left"))
            )

         (~>(Mhp.previousTask @oldId @oldAltId))
         (=>(Mhp.previousTask -2 -2))

         (!(Mhp.getFreeId @id))
         (=>(Mhp.request addGtpAgent mainAgent @robotName @id))
         (!(GtpActions.handleReport Mhp @id @gtpId))

         (!(Mhp.getFreeId @id))
         (=>(Mhp.request addGtpObject mainObject @mainObject @id))
         (!(GtpActions.handleReport Mhp @id @gtpId))

         (!(Mhp.getFreeId @id))
         (=>(Mhp.request addGtpObject supportObject @supportObject @id))
         (!(GtpActions.handleReport Mhp @id @gtpId))

         ;; (IF(?(~(NULL @target)))
         ;;    (!(= (VAL @target) (. @x @y @theta .)))
      ;;    (!(Mhp.getFreeId @id))
      ;;    (=>(Mhp.request addGtpPoint target @x @y @theta))
      ;;    (!(GtpActions.handleReport Mhp @id @gtpId))
      ;;    )

	  (!(Mhp.getFreeId @id))
 	  (=>(Mhp.request addGtpData hand @hand @id))
	  (!(GtpActions.handleReport Mhp @id @gtpId))

      ;; (IF(?(~(EQUAL @placement NO_NAME )))
      ;;  (!(Spark.getFreeId @sparkId))
      ;;  (=>(Spark.request getJointAbsPose @placement NO_NAME @sparkId))
      ;;   (!(GtpActions.handleReport Spark @sparkId @gtpId))
      ;;    (?(Spark.result (VAL @sparkId) @x @y @z @yaw @pitch @roll))
      ;;    (~>(Spark.result (VAL @sparkId) (VAL @x) (VAL @y) (VAL @z) (VAL @yaw) (VAL @pitch) (VAL @roll)))

      ;;    (!(= @ax (- @x 0.2)))
      ;;    (!(= @ay (+ @y 0.2)))
      ;;    (!(= @az @z))
      ;;    (!(= @bx (+ @x 0.2)))
      ;;    (!(= @by (+ @y 0.2)))
      ;;    (!(= @bz @z))
      ;;    (!(= @cx (- @x 0.2)))
      ;;    (!(= @cy (- @y 0.2)))
      ;;    (!(= @cz @z))
      ;;    (!(= @dx (+ @x 0.2)))
      ;;    (!(= @dy (- @y 0.2)))
      ;;    (!(= @dz @z))
	  	     	   
      ;;    (!(Mhp.getFreeId @id))
      ;;    (=>(Mhp.request addGtpConstraintRegion "force_place" "Rectangle" @ax @ay @az @bx @by @bz @cx @cy @cz @dx @dy @dz @id))
      ;;    (!(GtpActions.handleReport Mhp @id @gtpId))
	  
      ;;    )
      (?(GtpActions.objectAttachment @id))
      (!(Mhp.getFreeId @mhpId))
      (=>(Mhp.request addGtpAttachmentFromTask @id 0 @mhpId))
      (!(GtpActions.handleReport Mhp @mhpId @gtpId))

      (!(GtpActions.executeTask "place" @arm @mainObject @supportObject @gtpId))
	 )
  )

(defop |placeReachable|
  :invocation(GtpActions.request placeReachable @targetAgent @mainObject @supportObject @hand)
  :body (
	  (?(Robot.name @robotName))

      (=>(Mhp.previousTask -2 -2))

	  (!(Mhp.getFreeId @id))
	  (=>(Mhp.request addGtpAgent mainAgent @robotName @id))
	  (!(GtpActions.handleReport Mhp @id @gtpId))

	  (!(Mhp.getFreeId @id))
	  (=>(Mhp.request addGtpAgent targetAgent @targetAgent @id))
	  (!(GtpActions.handleReport Mhp @id @gtpId))

	  (!(Mhp.getFreeId @id))
	  (=>(Mhp.request addGtpObject mainObject @mainObject @id))
	  (!(GtpActions.handleReport Mhp @id @gtpId))

	  (!(Mhp.getFreeId @id))
	  (=>(Mhp.request addGtpObject supportObject @supportObject @id))
	  (!(GtpActions.handleReport Mhp @id @gtpId))

	  (!(Mhp.getFreeId @id))
	  (=>(Mhp.request addGtpData hand @hand @id))
	  (!(GtpActions.handleReport Mhp @id @gtpId))

	  (!(GtpActions.executeTask "placeReachable" @gtpId))

	 )
  )

(defop |travelTo|
  :invocation (GtpActions.request travelTo @object @point @gtpId)
  :documentation "@points (. @x  @y @z .) "
  :body (
	  (?(Robot.name @robotName))
	  
      (=>(Mhp.previousTask -2 -2))


	  (!(Mhp.getFreeId @id))
	  (=>(Mhp.request addGtpAgent mainAgent @robotName @id))
	  (!(GtpActions.handleReport Mhp @id @gtpId))



	  (IF(?(~(EQUAL @object NO_NAME)))
	       (!(Mhp.getFreeId @id))
	       (=>(Mhp.request addGtpObject target @object @id))
	       (!(GtpActions.handleReport Mhp @id @gtpId))
	      
	       ELSEIF(?(~(EQUAL @point NO_NAME)))
	       (!(== (VAL @point) (. @x @y @z .)))
	       (!(Mhp.getFreeId @id))
	       (=>(Mhp.request addGtpPoint target @x @y @z @id))
	       (!(GtpActions.handleReport Mhp @id @gtpId))

           ELSE
           (!(ReportManager.publish GtpActions.report @gtpId FAILURE))
           (!(Mhp.getFreeId @id))
           (!(ReportManager.sub Mhp.report @id))
           (=>(Mhp.request clearGtpInputs @id))
           (^(Mhp.report (VAL @id) @report))
           (!(ReportManager.unsub Mhp.report @id))

	       (!(FAILED))
	     )
	  
      (!(GtpActions.executeTask "goto" NO_NAME NO_NAME NO_NAME @gtpId))

	 
	 )
  )

(defop |moveTo|
  :invocation(GtpActions.request moveToPose @configurationName @gtpId)
  :body (
	  (?(Robot.name @robotName))

	  (IF(?(EQUAL @configurationName MANIPULATION_RIGHT))
	     (!(= @configurationName manipulationPoseRight))
	     )

      (!(Mhp.getFreeId @id))
	  (=>(Mhp.request addGtpAgent mainAgent @robotName @id))
	  (!(GtpActions.handleReport Mhp @id @gtpId))

      (!(Mhp.getFreeId @id))
	  (=>(Mhp.request addGtpData confName @configurationName @id))
	  (!(GtpActions.handleReport Mhp @id @gtpId))


      (IF(?(GtpActions.objectAttachment @id))
         (!(Mhp.getFreeId @mhpId))
         (=>(Mhp.request addGtpAttachmentFromTask @id 0 @mhpId))
         (!(GtpActions.handleReport Mhp @mhpId @gtpId))

      )

      (!(GtpActions.executeTask "moveto" RIGHT NO_NAME NO_NAME @gtpId))
	 
	  )
  )


 (defop |executeTask|
   :invocation(!(GtpActions.executeTask @task @arm @object @support @gtpId))
   :body (

          (?(Robot.name @robotName))

          (!(= @task (MAKE-ATOM @task)))

          (!(Mhp.getFreeId @id))
          (=>(Mhp.request fetchEnvironment @id))
          (!(GtpActions.handleReport Mhp @id @gtpId))
	  
          (!(Mhp.getFreeId @id))
          (=>(Mhp.request planGtpTask @task @id))
          (!(GtpActions.handleReport Mhp @id @gtpId))

          (?(Mhp.previousTask @taskId @alternativeId))

          (!(Mhp.getFreeId @id))
          (=>(Mhp.request smoothGtpTraj @taskId @alternativeId @id))
          (!(GtpActions.handleReport Mhp @id @gtpId))

          (!(Mhp.getFreeId @id))
          (=>(Mhp.request getGtpTaskDetails @taskId @alternativeId @id))
          (!(ReportManager.sub Mhp.report @id))
          (^(Mhp.report (VAL @id) @report))
          (!(ReportManager.unsub Mhp.report @id))
	  
          (!(= @follow 0))
          (IF(?(EQUAL @report "OK"))
             (^(Mhp.result (VAL @id) @trajList))
             (~>(Mhp.result (VAL @id) (VAL @trajList)))
             (WHILE(?(~(NULL @trajList)))
                   (!(= @traj (CAR @trajList)))
                   (!(= @trajList (CDR @trajList)))
		   
                                        ;		   (!(== (VAL @traj) (. @subTrajId @dummy @subTrajName @robot .)))
                   ;;unification doesn't seem to work here =\ maybe because it was already unified somewhere?

                   (!(= @subTrajId (CAR @traj)))
                   (!(= @dummy (CAR(CDR @traj))))
                   (!(= @subTrajName (CAR(CDR(CDR @traj)))))
                   (!(= @robot (CAR(CDR(CDR(CDR @traj))))))


                   (IF(?(EQUAL @subTrajName "grasp"))
                      (!(ArmActions.getFreeId @id))
                      (=>(ArmActions.action closeGripper (VAL @arm) @id))
                      (!(GtpActions.handleReport ArmActions @id @gtpId))
		      
                      (IF(?(EQUAL @task pick))
                         (!(= @postParams (. (VAL @robotName) (VAL @object) (VAL @arm) .)))
			 (!(Actions.setPostconditions take (VAL @postParams)))
                         

                         (=>(GtpActions.objectAttachment @taskId))
                         )
		      
                      ELSEIF(?(EQUAL @subTrajName "release"))
                      (IF(?(EQUAL @task place))
                         (!(Spark.getFreeId @sparkId))
                         (?(Spark.robotFinger (VAL @arm) @sparkHand))
                         (=>(Spark.request getJointAbsPose (VAL @robotName) @sparkHand @sparkId))
                         (!(GtpActions.handleReport Spark @sparkId @gtpId))
                         (^(Spark.result (VAL @sparkId) @rx @ry @rz @rtx @rty @rtz))
                         (~>(Spark.result (VAL @sparkId) (VAL @rx) (VAL @ry) (VAL @rz) (VAL @rtx) (VAL @rty) (VAL @rtz)))

                         (!(= @postParams (. @robotName @object @support (. @rx @ry @rz .) .)  ))


			 (!(Actions.setPostconditions place (VAL @postParams)))


                         )
                      (!(ArmActions.getFreeId @id))
                      (=>(ArmActions.action openGripper RIGHT @id))
                      (!(GtpActions.handleReport ArmActions @id @gtpId))

                      (!(Spark.getFreeId @sparkId))
                      (=>(Spark.request placeObject @object @rx @ry 0.85 0 0 0 @sparkId))
                      (!(GtpActions.handleReport Spark @sparkId @gtpId))

                      (IF(?(GtpActions.objectAttachment @oldTaskId))
                         (~>(GtpActions.objectAttachment (VAL @oldTaskId)))
                         )

                      (!(Mhp.getFreeId @mhpId))
                      (=>(Mhp.request clearGtpAttachmentSaved @mhpId))
                      (!(GtpActions.handleReport Mhp @mhpId @gtpId))

                      ELSEIF(?(EQUAL @subTrajName "navigate"))
                      (!(Mhp.getFreeId @id))
                      (=>(Mhp.request loadGtpTaskTrajForNav @taskId @alternativeId @subTrajId @follow @id))
                      (!(GtpActions.handleReport Mhp @id @gtpId))
                      (^(Mhp.result (VAL @id) @waypoints))
                      (?(Mhp.result (VAL @id) @waypoints))
                      (~>(Mhp.result (VAL @id) @waypoints))

                      (!(BaseActions.getFreeId @id))
                      (=>(BaseActions.action move @waypoints @id))
                      (!(GtpActions.handleReport BaseActions @id @gtpId))
		      
                      ELSEIF(?(EQUAL @subTrajName "extract"))
                      (!(= @a 3))
                      ELSE
                      (!(Mhp.getFreeId @id))
                      (=>(Mhp.request fetchEnvironment @id))
                      (!(GtpActions.handleReport Mhp @id @gtpId))

                      (!(Mhp.getFreeId @id))
                      (=>(Mhp.request loadGtpTaskTraj @taskId @alternativeId @subTrajId @follow @id))
                      (!(GtpActions.handleReport Mhp @id @gtpId))

                      (?(Softmotion.arm (VAL @arm) @smArm))
                      (!(Softmotion.getFreeId @id))
                      (=>(Softmotion.request moveArm @smArm @id))
                      (!(GtpActions.handleReport Softmotion @id @gtpId))

                      (!(DatabaseInterface.set (AGENT-STATEMENT (VAL @robotName) (VAL @robotName) pose OTHER) @result))

                      (IF(?(EQUAL @subTrajId 0))
                         (^(ELAPSED-MTIME (MTIME) 500))
                         )
                      )


                   (!(= @follow 0))
                   )
             )
          (!(Mhp.getFreeId @id))
          (=>(Mhp.request clearGtpInputs @id))
          (!(GtpActions.handleReport Mhp @id @gtpId))

          (!(ReportManager.publish GtpActions.report @gtpId "OK"))


          )
   )

(defop |handleReport|
  :invocation(!(GtpActions.handleReport @module @id @actionId))
  :documentation "Utility function to avoid some code duplication when waiting for the response of a genom module. This can't be used when we don't want to fail if the genom request fails"
  :body (
         (!(= @reportName (TERM-STRING-CAT (VAL @module) ".report")))
         (!(= @reportName (MAKE-ATOM @reportName)))

         (!(ReportManager.sub @reportName @id))
                                        ;wait for a report or until we are paused or until we are stopped
         (^(|| (@reportName (VAL @id) @report) (GtpActions.halt (VAL @actionId)) (GtpActions.stop (VAL @actionId))))

                                        ;if we are paused we give a halt request if we were doing a softmotion request or simply wait for a resume
         (IF(?(GtpActions.halt (VAL @actionId)))
            (~>(GtpActions.halt (VAL @actionId)))
            (IF(?(EQUAL @module Softmotion))
               (!(Softmotion.getFreeId @smId))
               (!(ReportManager.sub Softmotion.report @smId))
               (=>(Softmotion.request halt (VAL @smId)))
               (^(Softmotion.report (VAL @smId) @smReport))
               (!(ReportManager.unsub Softmotion.report @smId))
               (^(@reportName (VAL @id) @report))
               (!(ReportManager.unsub @reportName @id))


               ELSEIF(?(EQUAL @module ArmActions))
               (=>(ArmActions.halt (VAL @id)))
               )
                                        ;we wait for a stop or for a resume
            (^(|| (GtpActions.stop (VAL @actionId)) (GtpActions.resume (VAL @actionId))))
            (IF(?(GtpActions.resume (VAL @actionId)))   ;we ask to resume and recall this function to wait for the report
               (~>(GtpActions.resume (VAL @actionId)))
               (IF(?(EQUAL @module Softmotion))
                  (!(Softmotion.getFreeId @smId))
                  (!(ReportManager.sub Softmotion.report @smId))
                  (=>(Softmotion.request resume @smId))
                  (^(Softmotion.report (VAL @smId) @smReport))
                  (!(ReportManager.unsub Softmotion.report @smId))
                  (^(ELAPSED-TIME (TIME) 3))

                  ELSEIF(?(EQUAL @module ArmActions))
                  (=>(ArmActions.resume (VAL @id)))
                  )
               ELSEIF(?(GtpActions.stop (VAL @actionId)))
               (~>(GtpActions.stop (VAL @actionId)))

               (IF(?(EQUAL @module Softmotion))
                  (=>(Softmotion.stop (VAL @id)))
                  (!(Softmotion.getFreeId @smId))
                  (=>(Softmotion.request stop (VAL @smId)))
                  (!(ReportManager.sub Softmotion.report @smId))
                  (^(Softmotion.report (VAL @smId) @smReport))
                  (!(ReportManager.unsub Softmotion.report @smId))

                  (^(|| (@reportName (VAL @id) @report)))
                  (!(ReportManager.unsub @reportName @id))



                  ELSEIF(?(EQUAL @module ArmActions))
                  (=>(ArmActions.stop @id))

                  ELSEIF(?(EQUAL @module Mhp))
                  (=>(Mhp.stop (VAL @id)))
                  )
               (!(ReportManager.publish GtpActions.report @actionId STOPPED))
               (!(Mhp.getFreeId @id))
               (!(ReportManager.sub Mhp.report @id))
               (=>(Mhp.request clearGtpInputs @id))
               (^(Mhp.report (VAL @id) @report))
               (!(ReportManager.unsub Mhp.report @id))
               (!(FAILED))
               )


            ELSEIF(?(GtpActions.stop (VAL @actionId)))
            (~>(GtpActions.stop (VAL @actionId)))

            (IF(?(EQUAL @module Softmotion))
               (=>(Softmotion.stop (VAL @id)))
               (!(Softmotion.getFreeId @smId))
               (=>(Softmotion.request stop (VAL @smId)))
               (!(ReportManager.sub Softmotion.report @smId))
               (^(Softmotion.report (VAL @smId) @smReport))
               (!(ReportManager.unsub Softmotion.report @smId))
               (^(|| (@reportName (VAL @id) @report)))
               (!(ReportManager.sub @reportName @id))

               ELSEIF(?(EQUAL @module ArmActions))
               (=>(ArmActions.stop @id))

               ELSEIF(?(EQUAL @module Mhp))
               (=>(Mhp.stop (VAL @id)))
               )
            (=>(GtpActions.report @actionId STOPPED))
            (!(Mhp.getFreeId @id))
            (!(ReportManager.sub Mhp.report @id))
            (=>(Mhp.request clearGtpInputs @id))
            (^(Mhp.report (VAL @id) @report))
            (!(ReportManager.unsub Mhp.report @id))
            (!(FAILED))


            ELSE	 ;we got a report. If it's a good report we continue if not we report a fail and exit.
            (!(ReportManager.unsub @reportName @id))

            (IF(?(~(EQUAL @report "OK")))
               (!(PRINT @report))
               (!(ReportManager.publish GtpActions.report @actionId @report))
               (!(Mhp.getFreeId @id))
               (!(ReportManager.sub Mhp.report @id))
               (=>(Mhp.request clearGtpInputs @id))
               (^(Mhp.report (VAL @id) @report))
               (!(ReportManager.unsub Mhp.report @id))
               (!(FAILED))
               )
            )
         )
  )



)
