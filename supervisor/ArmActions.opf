; -*-Lisp-*-
;;author: Michelangelo Fiore
;;this module contains common actions for arm movements, using both mhp and softmotion. 
;;Testing notes:
;;place object has not been tested
;;not every possible scenario of the other functions has been tested (mainly the movements from a grip position have not been tested)


(

 (defop |init|
   :invocation(!(ArmActions.init))
   :documentation " "
   :body (
	  (=>(ArmActions.freeId 0))
	  )
   )

(defop |getFreeId|
  :invocation(!(ArmActions.getFreeId $id))
  :documentation "gets a new id for requestes"
  :body (

	  (?(ArmActions.freeId $id))
	  (=>(ArmActions.freeId (+ $id 1)))

	  )
   )

 (defop |moveTo|
   :invocation  (ArmActions.action moveTo @arm @task @armGoto @object @support @placement @useObjGoto @objGoto @actionId)
   :documentation "generic procedure to move arm (note that arm start and objstart are not supported)"
   :body (


	  (=>(ArmActions.freeId (+ @actionId 1)))

	  (?(Mhp.arm (VAL @arm) @mhpArm))
	  (?(Softmotion.arm (VAL @arm) @smArm))

	  (!(Mhp.makeArmStartParameter 0 0 0 0 0 0 0 @armStart))
	  (!(= @objStart (objStart 0.0 0.0 0.0 0.0 0.0 0.0)))
	  (!(Mhp.getFreeId @mhpId))
	  
	  (=>(Mhp.request setTrajectory GEN_TRUE (VAL @task) (VAL @mhpArm) (VAL @armStart) (VAL @armGoto) (VAL @object) (VAL @support) (VAL @placement) GEN_FALSE 0 (VAL @objStart) (VAL @useObjGoto) (VAL @objGoto) (VAL @mhpId)))
	  (!(ArmActions.handleReport Mhp.report @mhpId @actionId))

	  (!(Softmotion.getFreeId @smId))
	  (=>(Softmotion.request moveArm @smArm @smId))
	  (!(ArmActions.handleReport Softmotion.report @smId @actionId))
	  (=>(ArmActions.report (VAL @actionId) "OK"))
	  (IF(?(EQUAL @task MHP_ARM_PICK_GOTO))
	     (=>(Robot.armPosition (VAL @arm) TABLE_4)) ;HACK. To substitute with actual support, taken
	     ;from the database
	     
	     ELSE 
	     (=>(Robot.armPosition (VAL @arm) FREE))

	     )
	  
	  )
   )

 (defop |escapeObject|
   :invocation(ArmActions.action escapeObject @arm @object @actionId)
   :documentation "Moves the arm away from a placed object"
   :body (
	  (!(Mhp.makeArmGotoParameter 0 0 0 0 0 0 0 @armGoto))
	  (!(= @objGoto (objGoto 0.0 0.0 0.0 0.0 0.0 0.0)))
	  
	  (=>(ArmActions.action moveTo @arm MHP_ARM_ESCAPE_OBJECT @armGoto @object NO_NAME NO_NAME 0 @objGoto @actionId))
	  )
   )
 (defop |moveToX|
   :invocation(ArmActions.action moveToX @arm  @x @y @z @actionId)
   :documentation "Moves the arm to the point specified"
   :body (
	  (IF(?(Robot.hasObject (VAL @arm) @object))
	     (?(Robot.hasObject (VAL @arm) @object))

	     ELSE
	     (!(= @object NO_NAME))
	     )
	  (?(Robot.armPosition (VAL @arm) @position))
	  (IF(?(&(EQUAL @position FREE) (EQUAL @object NO_NAME)))
	     (!(= @task MHP_ARM_FREE))
	     (!(= @support NO_NAME))
	     
	     ELSE
	     (!(= @task MHP_ARM_TAKE_TO_FREE))
	     (!(= @support @position))
	     )

	  
	  (!(Mhp.makeArmGotoParameter 0 0 0 0 0 0 0 @armGoto))
	  (!(= @objGoto (objGoto (VAL @x) (VAL @y) (VAL @z) 0.0 0.0 0.0)))

	  (=>(ArmActions.action moveTo @arm @task @armGoto @object @support NO_NAME 15 @objGoto @actionId))
	  
	  )
   )


 (defop |moveToQ|
   :invocation(ArmActions.action moveToQ @arm  @q0 @q1 @q2 @q3 @q4 @q5 @q6 @actionId)
   :documentation "Moves the arm to the q configuration"
   :body (
	  (IF(?(Robot.hasObject (VAL @arm) @object))
	     (?(Robot.hasObject (VAL @arm) @object))
	     
	     ELSE
	     (!(= @object NO_NAME))
	     )
	  (?(Robot.armPosition (VAL @arm) @position))
	  (IF(?(&(EQUAL @position FREE) (EQUAL @object NO_NAME)))
	     (!(= @task MHP_ARM_FREE))
	     (!(= @support NO_NAME))
	     ELSE
	     (!(= @task MHP_ARM_TAKE_TO_FREE))
	     (!(= @support @position))
	     )
	  
	  (!(Mhp.makeArmGotoParameter @q0 @q1 @q2 @q3 @q4 @q5 @q6 @armGoto))
	  (!(= @objGoto (objGoto 0.0 0.0 0.0 0.0 0.0 0.0)))

	  (=>(ArmActions.action moveTo @arm @task @armGoto @object @support NO_NAME 0 @objGoto @actionId))
	  
	  )
   )


					;ARM_PICK_UP_GOTO FUNCTIONS
 (defop |moveToObject|
   :invocation(ArmActions.action moveToObject @arm @object @actionId)
   :documentation "Moves the arm in a pick position to a specified object"
   :body (
	  
	  
	  (!(= @objStart (objStart 0.0 0.0 0.0 0.0 0.0 0.0)))
	  (!(= @objGoto (objGoto 0.0 0.0 0.0 0.0 0.0 0.0)))
	  (!(Mhp.makeArmGotoParameter 0 0 0 0 0 0 0 @armGoto))
	
	  (=>(ArmActions.action moveTo @arm MHP_ARM_PICK_GOTO @armGoto @object NO_NAME NO_NAME 0 @objGoto @actionId))

	  (^(ArmActions.report (VAL @actionId) @report))
	  
	  
	  )
   )


 (defop |moveToPlaceObject|
   :invocation(ArmActions.action moveToPlaceObject @arm @placement @actionId)
   :documentation "moves to the placement position with the object"
   :body (
	  (?(Robot.armPosition (VAL @arm) @position))
	  (IF(?(EQUAL @position FREE))
	     (!(= @task MHP_ARM_PLACE_FROM_FREE))
	     (!(= @support NO_NAME))
	     ELSE
	     (!(= @task MHP_ARM_TAKE_TO_PLACE))
	     (!(= @support @position))
	     )
	  (!(Mhp.makeArmGotoParameter 0 0 0 0 0 0 0 @armGoto))
	  
	  (!(Spark.getFreeId @sparkId))
	  (=>(Spark.request getJointAbsPose @placement NO_NAME @sparkId))
	  (!(ArmActions.handleReport Spark.report @sparkId @actionId))
	  (^(Spark.result (VAL @sparkId) @xp @yp @zp @yawp @pitchp @rollp))
	  (~>(Spark.result (VAL @sparkId) (VAL @xp) (VAL @yp) (VAL @zp) (VAL @yawp) (VAL @pitchp) (VAL @rollp))) 
	  (!(= @objGoto (objGoto @xp @yp @zp 0.0 0.0 0.0)))

	  (=>(ArmActions.action moveTo @arm @task @armGoto @object @support @placement 9 @objGoto @actionId))
	  )
   )

 ;;ROBOT POSES

(defop |moveToRestPosition|
   :invocation(ArmActions.action moveToRestPosition @arm @actionId)
   :documentation "Goes to a rest pose with the arm nearby the body"
   :body (
	  (!(PRINT "going to rest position"))
	  (=>(ArmActions.action moveToQ (VAL @arm)  0.6 0.4 -1.2 -1.0 0.0 -0.4 0.0 (VAL @actionId))) 
	  )
   )

 (defop |moveToExtendedPosition|
   :invocation(ArmActions.action moveToExtendedPosition @arm @q0 @actionId)
   :documentation "Utility function to extend the arm"
   :body (
	  (!(PRINT "going to extended position"))

	  (=>(ArmActions.action moveToQ (VAL @arm) @q0 0 0 0 0 0 0 (VAL @actionId)))
	  )
   )

 (defop |moveToReadyPosition|
   :invocation (ArmActions.action moveToReadyPosition @arm @q0 @actionId)
   :documentation "For now just utility function but should become an actual request. Goes to a rest pose with the arm nearby the body"
   :body (
	  (!(PRINT "going to ready position"))
	  (=>(ArmActions.action moveToQ @arm @q0 0.5 -0.4 -1.3 0.0 -0.5 0.0 (VAL @actionId)))
	  )
   )



 ;;GRIPPER FUNCTIONS


 (defop |closeGripper|
   :invocation(ArmActions.action closeGripper @gripper @actionId)
   :documentation "closes the gripper"
   :body (
	  (?(Softmotion.gripperClose (VAL @gripper) @state))
	  (=>(ArmActions.action useGripper  (VAL @state) (VAL @actionId)))
	  )
   )

 (defop |openGripper|
   :invocation(ArmActions.action openGripper @gripper @actionId)
   :documentation "opens the gripper"
   :body (
	  (?(Softmotion.gripperOpen (VAL @gripper) @state))
	  (=>(ArmActions.action useGripper  (VAL @state) (VAL @actionId)))
	  )
   )

 (defop |openGripperOnPressure|
   :invocation(ArmActions.action openGripperOnPressure @gripper @actionId)
   :documentation "opens the gripper"
   :body (
	  (?(Softmotion.gripperRelease (VAL @gripper) @state))
	  (=>(ArmActions.action useGripper (VAL @state) (VAL @actionId)))

	  )
   )
 (defop |useGripper|
   :invocation(ArmActions.action useGripper @state @actionId)
   :documentation "Moves the gripper to state @state"
   :body (
	  (=>(ArmActions.freeId (+ @actionId 1)))
	  
	  (!(Softmotion.getFreeId @smId))
	  	  
	  (=>(Softmotion.request useGripper (VAL @state) (VAL @smId)))
	  (IF(?(EQUAL @state RRELEASE))
	     (=>(ArmActions.isReleasingGripper RIGHT (VAL @smId) (VAL @actionId)))
	     ELSEIF(?(EQUAL @state LRELEASE))
	     (=>(ArmActions.isReleasingGripper LEFT (VAL @smId) (VAL @actionId)))
	     
	     ELSEIF(?(EQUAL @state RGRAB))
	     (=>(ArmActions.isGripperGrabbing RIGHT (VAL @smId) (VAL @actionId)))
	     
	     ELSEIF(?(EQUAL @state LGRAB))
	     (=>(ArmActions.isGripperGrabbing LEFT (VAL @smId) (VAL @actionId)))
	     )
	  (!(ArmActions.handleReport Softmotion.report @smId @actionId))
	  (=>(ArmActions.report @actionId "OK")) 
	  
	  )
   )
(defop |stopOpenGripperOnPressure|
  :invocation (ArmActions.action stopOpenGripperOnPressure  @gripper @actionId)
  :documentation "Utility function to stop a gribber grab release request"
  :body (
	 (IF(?(ArmActions.isReleasingGripper (VAL @gripper) @smId @gripperActionId))
	     (=>(Softmotion.stop (VAL @smId)))
	     (^(Softmotion.report (VAL @smId) @report))
	     (^(ArmActions.report (VAL @gripperActionId) @report))
	     (~>(ArmActions.report (VAL @smGripperActionId) @report))
	     (~>(ArmActions.isReleasingGripper (VAL @gripper) (VAL @smId) (VAL @smGripperActionId)))
	     )
	  
	  (?(Softmotion.gripperCancel (VAL @gripper) @state))
	  (=>(ArmActions.action useGripper  @state (VAL @actionId)))
	  
	  )
   )

(defop |stopGripperGrab|
  :invocation(ArmActions.action stopGripperGrab @gripper @actionId)
  :documentation "Stops a gripper grab action"
  :body (
 	 (IF(?(ArmActions.isGripperGrabbing (VAL @gripper) @smId @gripperActionId))
	    (IF(?(Robot.gripper (VAL @gripper) WAITING_CONTACT))
	       (=>(Softmotion.stop (VAL @smId)))
	       (^(Softmotion.report (VAL @smId) @report))
	       (^(ArmActions.report (VAL @gripperActionId) @report))
	       (~>(ArmActions.report (VAL @smGripperActionId) @report))
	       )
 	    (~>(ArmActions.isGripperGrabbing (VAL @gripper) (VAL @smId) (VAL @smGripperActionId)))
 	     )
	 (IF(?(Robot.gripper (VAL @gripper) WAITING_CONTACT)))
	    (?(Softmotion.gripperCancel (VAL @gripper) @state))
	    (=>(ArmActions.action useGripper  @state (VAL @actionId)))
	    (=>(ArmActions.report @actionId "OK"))
	    )
  )

(defop |gripperGrab|
  :invocation(ArmActions.action gripperGrab @gripper @actionId)
  :documentation "Closes the gripper when pressure sensor detect something"
  :body (
	 (?(Softmotion.gripperGrab (VAL @gripper) @state))
	 (=>(ArmActions.action useGripper (VAL @state) (VAL @actionId)))
	 
	 )
  
  )

(defop |detectPression|
  :invocation(ArmActions.action detectPression @gripper @mode @actionId)
  :documentation "Detects when there is a pressure in the gripper. Mode can be GRAB or RELEASE. I don't
actually know if this really changes something... pressure is pressur."
  :body (
	 (IF(?(EQUAL @mode GRAB))
	    (?(Softmotion.gripperGrab (VAL @gripper) @state))
	    ELSE 
	    (?(Softmotion.gripperRelease (VAL @gripper) @state))
	 )
	  (!(Softmotion.getFreeId @smId))
	 (=>(Softmotion.request detectPression @state @smId))
	 (=>(ArmActions.detectPression (VAL @gripper) (VAL @mode) (VAL @smId))) ;remember the request for stopdetectPressionRequestes
	 (!(ArmActions.handleReport Softmotion.report @smId @actionId))
	 (=>(ArmActions.report @actionId "OK")) 
	 (~>(ArmActions.detectPression (VAL @gripper) (VAL @mode) (VAL @smId)))

	 
	 )

  )

(defop |stopDetectPression|
  :invocation(ArmActions.action stopDetectPression @gripper @mode @actionId)
  :documentation "Stops a detect pression request"
  :body (
	 (IF(?(ArmActions.detectPression (VAL @gripper) (VAL @mode) @detectPressionId))
	    (~>(ArmActions.detectPression (VAL @gripper) (VAL @mode) @detectPressionId))
	    (=>(Softmotion.stop @detectPressionId))
	    )
	 (=>(ArmActions.report @actionId "OK"))
	 )
  )

  (defop |handleReport|
     :invocation(!(ArmActions.handleReport @reportName @id @actionId))
     :documentation "Utility function to avoid some code duplication when waiting for the response of a genom module. This can't be used when we don't want to fail if the genom request fails"
     :body (
	    (^(|| ( @reportName (VAL @id) @report)  (ArmActions.stop (VAL @actionId))))
	    (!(PRINT @reportName))
	    (IF(?(ArmActions.stop (VAL @actionId)))
	       (~>(ArmActions.stop (VAL @actionId)))
	       (=>(ArmActions.report (VAL @actionId) STOPPED))
	       
	       ELSE	 
	       
	       (~>( @reportName (VAL @id) (VAL @report)))
	       (!(PRINT @report))
	       (IF(?(~(EQUAL @report "OK")))
		  (=> (ArmActions.report (VAL @actionId) (VAL @report)))
		  (!(FAILED))
		  )
	       )
	    )
     
     )
   )


