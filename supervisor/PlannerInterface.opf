;; -*-Lisp-*-
;;author: Michelangelo Fiore
;;this module contains an interface to different planners in order to give plans to the PlanManager in a standard format.

(
 (defop |init|
   :invocation(!(PlannerInterface.init))
   :documentation "Initializes the module"
   :body (
	  (=>(PlannerInterface.freeId hatp 0))
	  )
   )
 
 (defop |getPlan|
   :invocation(PlannerInterface.getPlan @goal @parameters)
   :documentation "Calculates a plan for the goal goal"
   :body (
	  (IF(?(PlannerInterface.usePlanner HATP))
	     (!(PlannerInterface.getHatpPlan @goal @parameters))
	     )
	  )
   )

 (defop |getHatpPlan|
   :invocation(!(PlannerInterface.getHatpPlan @goal @parameters))
   :documentation "calls HATP to obtain a plan"
   :body (
	  (?(PlannerInterface.freeId hatp @id))       
	  (=>(PlannerInterface.freeId hatp (+ @id 1)))
	  (?(PlannerInterface.bridgeName hatp @hatp)) 
	  
	  ;;send the request and wait for an answer
	  (!(= @message (HATP-REQ
			 (REQ-TYPE plan)
			 (REQ-ID (VAL @id))
			 (TASK-NAME (VAL @goal))
			 (PARAMETERS (VAL @parameters))
			 )))
	  (!(SEND-MESSAGE @hatp @message))
	  (^(HATP-REP 
	     (REQ-ID (VAL @id))
	     (REPORT @report)
	     (ACTION-LIST @actionList)
	     (LINK-LIST @linkList)))

	  
	  (=>(PlannerInterface.report @report))  ;send the report
	  (IF(?(EQUAL @report OK))  ;if everything is okay we get the plan
	     ;;for now we plan just for an human and a robot but we could generalize it in the future
	     (!(= @robotActions (. .)))  
	     (!(= @humanActions (. .)))
	     
	     (WHILE(?(~(NULL @actionList)))

		   (!(= @currentAction (CAR @actionList))) ;get the current action
		   (!(= @actionList (CDR @actionList)))
		   (!(== (VAL @currentAction) (ACTION 
					       (ACTION-ID @actionId)
					       (ACTION-NAME @hatpActionName)
					       (ACTOR @actor)
					       (START-TIME @startTime)
					       (END-TIME @endTime)
					       (PARAMETERS @parameters)
					       )))
		   
		   (?(PlannerInterface.action hatp (VAL @hatpActionName) @actionName))    ;convert the action name from the domain name of hatp to the supervisor domain
		   (IF(?(Action.type (VAL @actionName) MANIPULATION))               ;depending on the action we convert the parameters from the hatp domain to the supervisor odmain
		      (!(= @object NO_NAME))
		      (WHILE(?(~(NULL @parameters)))
			    (!(= @currentParameter (CAR @parameters)))
			    (!(= @parameters (CDR @parameters)))
			    (IF(?(Action.parameter (VAL @currentParameter) @type))    ;;depending on the type of the parameter in the supervisor domain we update the correct variable
			       (IF(?(EQUAL @type OBJECT))
				  (!(= @object (VAL @currentParameter)))  
				  )
			       )
			    )
		      (!(= @actionParameters (. (VAL @object)  .)))
		      ELSEIF(?(Action.type (VAL @actionName) PLACEMENT))
		      (!(= @object NO_NAME))
		      (!(= @placement NO_NAME))


		      (WHILE(?(~(NULL @parameters)))
			    (!(= @currentParameter (CAR @parameters)))
			    (!(= @parameters (CDR @parameters)))
			    (IF(?(Action.parameter (VAL @currentParameter) @type))    ;;depending on the type of the parameter in the supervisor domain we update the correct variable
			       (IF(?(EQUAL @type OBJECT))
				  (!(= @object (VAL @currentParameter)))  
				  
				  ELSEIF(?(EQUAL @type PLACEMENT))
				  (!(= @placement (VAL @currentParameter)))
			       )
			    )
			    )
		      (!(= @actionParameters (. (VAL @object) (VAL @placement)  .)))
		      ELSEIF(?(Action.type (VAL @actionName) HANDOVER))

		      (!(= @object NO_NAME))
		      (!(= @agent1 NO_NAME))
		      (!(= @agent2 NO_NAME))
		      (!(= @i 0))
		      (WHILE(?(~(NULL @parameters)))
			    (!(= @currentParameter (CAR @parameters)))
			    (!(= @parameters (CDR @parameters)))

			    (IF(?(Action.parameter (VAL @currentParameter) @type))    ;;depending on the type of the parameter in the supervisor domain we update the correct variable
			       (IF(?(EQUAL @type OBJECT))
				  (!(= @object (VAL @currentParameter)))  
				  
			       
				  ELSEIF(?(EQUAL @type AGENT))
				  (IF(?(EQUAL @i 0))
				     (!(= @agent1 (VAL @currentParameter)))
				     (!(= @i (+ @i 1)))
				     
				     ELSE
				     (!(= @agent2 (VAL @currentParameter)))
				     )
				  )
			       )
			    )
		      (!(= @actionParameters (. (VAL @object) (VAL @agent1) (VAL @agent2) .)))   
		      )
		   
		     
		      ;;now we need to scan the LINK-LIST. Since HATP provides a single link list for all the domain while we want that each actions has a list of preconditions we need to scan this list for every action
		      ;;so we create a backup to update.
		      (!(= @tempLinkList (VAL @linkList)))                    
		      (!(= @actionLinks (. .)))
		      (WHILE(?(~(NULL @tempLinkList)))
			    (!(= @currentLink (CAR @tempLinkList)))
			    (!(= @tempLinkList (CDR @tempLinkList)))
			    (!(== (VAL @currentLink) (LINK @id1 @id2)))  ;the format in HATP is @id2 follows @id1
			    (IF(?(EQUAL @id2 @actionId))   ;if @id2 is the current action
			       (!(= @actionLinks (CONS-TAIL (VAL @id1) @actionLinks))) ;we add @id1 to the list of preconditions for the aaction
			       )
			    )
		      
		   
		      (!(= @action (. (VAL @actionName) (VAL @actionParameters) .)))  
		      (!(= @completeAction (. (VAL @action) (VAL @actionId) (VAL @actionLinks) .)))
		      ;;if the actor is the robot we add the action to its actions, else we add it to the human action list
		   ;   (!(= @mainActor OTHER))
		    ;  (WHILE(?(~(NULL @actor)))
		;	    (!(= @currentActor (CAR @actor)))
		;	    (IF(?(EQUAL @actor PR2_ROBOT))
		;	       (!(= @mainActor PR2_ROBOT))
		;	       )
					;	    )
		      (IF(?(|| (EQUAL @actor PR2_ROBOT) (EQUAL @actionName handover)))
			   (!(= @robotActions (CONS-TAIL (VAL @completeAction) @robotActions)))
			 
			   ELSE
			   (!(= @humanActions (CONS-TAIL (VAL @completeAction) @humanActions)))
			   )
			 
			 )
		   
		      )
	     (=>(PlannerInterface.result (. (VAL @robotActions) (VAL @humanActions) .)))  ;we have a result
	     )
	  )
   )
	       

 )