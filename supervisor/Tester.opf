; -*-Lisp-*-
;;author: Michelangelo Fiore

;;This file contains procedures to test the single modules of the
;system.
(

(defop |testScan|
  :invocation(!(Tester.testScan))
  :body (
	 (!(Controller.initAll))
	 (=>(ExecutionManager.execute scan (. TABLE_4 LOTR_TAPE .) 0))
	 
	 )
)


(defop |gtpid|
   :invocation(!(Tester.testGtpId))
  :body (
	 (!(Mhp.init))
	 (!(GtpActions.init))
	 (?(Manipulation.moduleName @moduleName))
         (!(= @idCommand (TERM-STRING-CAT  @moduleName ".getFreeId")))
         (!(= @idCommand (MAKE-ATOM @idCommand)))
         (!(= @requestCommand (TERM-STRING-CAT @moduleName ".request")))
         (!(= @requestCommand (MAKE-ATOM @requestCommand)))

         (!(@idCommand @actionId))

	 (!(PRINT @actionId))
      )
  )


(defop |testInformationScreen|
  :invocation(!(Tester.testInformationScreen))
  :body (
    (!(BaseActions.init))
    (!(= @g1 (. 10.1 3.8 -2.9 .)))
    (!(= @g2 (. 11.4 2.9 -0.4 .)))
    (=>(BaseActions.action move (. @g1 @g2 .) @goId))

  )

)

(defop |testWaypoints|
  :invocation(!(Tester.testWaypoints))
  :body (
                  (!(= @base1 (. 15.5 5.5 -1.6 .)))
                  (!(= @base2 (. 13.5 5.5 -1.6 .)))
                  (!(= @base3 (. 14.5 3.5 -1.6 .)))

                  (!(BaseActions.init))
                  (!(BaseActions.getFreeId @goId))
                  (!(ReportManager.sub BaseActions.report @goId))
                  (=>(BaseActions.action move (. @base1 @base2 @base3 .) @goId))
    )

  ) 

(defop |TestSpencerIcsr|
  :invocation(!(Tester.TestSpencerIcsr))
  :body (
    (!(DatabaseInterface.init))
    (!(BaseActions.init))
    (=>(ExecutionManager.execute icsrGuide 0))
    )
  )

(defop |TestPlanSaphariIcsr|
  :invocation(!(Tester.testPlanSaphariIcsr))
  :body (
    ;(!(Controller.initAll))
     ;(!(AgentActionMonitor.cleanMonitorSpheres))
     ;(!(AgentActionMonitor.calculateInferencesForAgents (. HERAKLES_HUMAN1 .)))
     ;(!(AgentActionMonitor.startMonitoringAgent HERAKLES_HUMAN1 ))
;     (=>(PlanManager.manageRobotActionsSeed  (. (. (. go (. PR2_ROBOT WORK_LOCATION_1 .) .) 1 (. .)  .)  (. (. place (. PR2_ROBOT BRACKET_1 WORK_LOCATION_1 .) .) 2 (. 1 .) .)  .)  ))

     (=>(PlanManager.manageRobotActionsSeed  (. (. (. go (. PR2_ROBOT STOCK_TABLE .) .) 1 (. .)  .)  (. (. take (. PR2_ROBOT BRACKET_1 .) .) 2 (. 1 .) .)  .)  ))


     ;(=>(PlanManager.goal HandleSurface (. ASSEMBLY_SURFACE_1 .)))
 ;    (=>(PlanManager.newGoal TRUE))
  ;   (=>(PlanManager.managePlans))  



    )

  )

(defop |testPlanMardi|
  :invocation(!(Tester.testPlanMardi))
  :body (
    (!(Controller.initAll))
    (=>(PlannerInterface.getPlan BuildStack (. StackArea .)))   ;;we ask for a plan

    ; (!(AgentActionMonitor.cleanMonitorSpheres))
    ; (!(AgentActionMonitor.calculateInferencesForAgents (. HERAKLES_HUMAN1 .)))
    ;  (!(AgentActionMonitor.startMonitoringAgent HERAKLES_HUMAN1 ))
    ;  (=>(PlanManager.goal BuildStack (. StackArea .)))
    ;  (=>(PlanManager.newGoal TRUE))
    ;  (=>(PlanManager.managePlans))  

    )

  )



(defop |testPlanGregIcsr|
  :invocation(!(Tester.testPlanGregIcsr))
  :body (
    (!(Controller.initAll))
    (=>(PlannerInterface.getPlan BuildStack (. StackArea .)))   ;;we ask for a plan

    ; (!(AgentActionMonitor.cleanMonitorSpheres))
    ; (!(AgentActionMonitor.calculateInferencesForAgents (. HERAKLES_HUMAN1 .)))
    ;  (!(AgentActionMonitor.startMonitoringAgent HERAKLES_HUMAN1 ))
    ;  (=>(PlanManager.goal BuildStack (. StackArea .)))
    ;  (=>(PlanManager.newGoal TRUE))
    ;  (=>(PlanManager.managePlans))  

    )

  )
(defop |testMonitorPlan|
  :invocation(!(Tester.testMonitorPlan))
  :body (
    (!(DatabaseInterface.init))
    (!(= @action (. (. applyFirstOperations 1 (. HERAKLES_HUMAN1 Green_Cube .) .)  .)))
    (!(PlanManager.monitorPlan HERAKLES_HUMAN1 @action))
    )
  )

 (defop |testTreeAnalysis|
	:invocation(!(Tester.testTreeAnalysis))  
	:body (
		(!(PRINT "b"))
    (!(DatabaseInterface.init))
        (!(= @plan (HATP-REP (REQ-ID 26)(REPORT OK)
                             (STREAMS
                              (ACTION-LIST (.
                                            (ACTION (ACTION-ID 1125)(ACTION-NAME Pick)(ACTOR PR2_PR2_ROBOT)(START-TIME 0)(END-TIME 6)(PARAMETERS (. PR2_PR2_ROBOT Blue_Cube  .)))
                                            (ACTION (ACTION-ID 1136)(ACTION-NAME Pick)(ACTOR HERAKLES_HUMAN1)(START-TIME 0)(END-TIME 6)(PARAMETERS (. HERAKLES_HUMAN1 Green_Cube  .)))
                                            (ACTION (ACTION-ID 1128)(ACTION-NAME Place)(ACTOR PR2_ROBOT)(START-TIME 6)(END-TIME 12)(PARAMETERS (. PR2_ROBOT Blue_Cube GluingArea  .)))
                                            (ACTION (ACTION-ID 1142)(ACTION-NAME HandleOperation)(ACTOR HERAKLES_HUMAN1)(START-TIME 6)(END-TIME 12)
                                                    (PARAMETERS (. HERAKLES_HUMAN1 Green_Cube Smoothen SmoothingArea  .)))
                                            (ACTION (ACTION-ID 1129)(ACTION-NAME Apply)(ACTOR PR2_ROBOT)(START-TIME 12)(END-TIME 18)(PARAMETERS (. PR2_ROBOT Blue_Cube Glue  .)))
                                            (ACTION (ACTION-ID 1145)(ACTION-NAME HandleOperation)(ACTOR HERAKLES_HUMAN1)(START-TIME 12)(END-TIME 18)
                                                    (PARAMETERS (. HERAKLES_HUMAN1 Green_Cube Stickers StickersArea  .)))(ACTION (ACTION-ID 1130)
                                                                                                                         (ACTION-NAME Pick)(ACTOR PR2_ROBOT)(START-TIME 18)(END-TIME 24)(PARAMETERS (. PR2_ROBOT Blue_Cube  .)))
                                                    (ACTION (ACTION-ID 1124)(ACTION-NAME PlaceOnStack)(ACTOR PR2_ROBOT)(START-TIME 24)(END-TIME 30)(PARAMETERS (. PR2_ROBOT Blue_Cube StackArea  .)))
                                                    (ACTION (ACTION-ID 1135)(ACTION-NAME PlaceOnStack)(ACTOR HERAKLES_HUMAN1)(START-TIME 30)(END-TIME 36)(PARAMETERS (. HERAKLES_HUMAN1 Green_Cube StackArea  .)))
                                                    (ACTION (ACTION-ID 1151)(ACTION-NAME Pick)(ACTOR PR2_ROBOT)(START-TIME 30)(END-TIME 36)(PARAMETERS (. PR2_ROBOT Red_Cube  .)))
                                                    (ACTION (ACTION-ID 1154)(ACTION-NAME Place)(ACTOR PR2_ROBOT)(START-TIME 36)(END-TIME 42)(PARAMETERS (. PR2_ROBOT Red_Cube CleaningArea  .)))
                                                    (ACTION (ACTION-ID 1155)(ACTION-NAME Apply)(ACTOR PR2_ROBOT)(START-TIME 42)(END-TIME 48)(PARAMETERS (. PR2_ROBOT Red_Cube Clean  .)))
                                                    (ACTION (ACTION-ID 1156)(ACTION-NAME Pick)(ACTOR PR2_ROBOT)(START-TIME 48)(END-TIME 54)(PARAMETERS (. PR2_ROBOT Red_Cube  .)))
                                                    (ACTION (ACTION-ID 1159)(ACTION-NAME Place)(ACTOR PR2_ROBOT)(START-TIME 54)(END-TIME 60)(PARAMETERS (. PR2_ROBOT Red_Cube PolishingArea  .)))
                                                    (ACTION (ACTION-ID 1160)(ACTION-NAME Apply)(ACTOR PR2_ROBOT)(START-TIME 60)(END-TIME 66)(PARAMETERS (. PR2_ROBOT Red_Cube Polish  .)))
                                                    (ACTION (ACTION-ID 1161)(ACTION-NAME Pick)(ACTOR PR2_ROBOT)(START-TIME 66)(END-TIME 72)(PARAMETERS (. PR2_ROBOT Red_Cube  .)))
                                                    (ACTION (ACTION-ID 1150)(ACTION-NAME PlaceOnStack)(ACTOR PR2_ROBOT)(START-TIME 72)(END-TIME 78)(PARAMETERS (. PR2_ROBOT Red_Cube StackArea  .)))
                                                    .))
                              (LINK-LIST (.
                                          (LINK 1124 1135)(LINK 1124 1151)(LINK 1125 1128)(LINK 1128 1129)(LINK 1129 1130)(LINK 1130 1124)(LINK 1135 1150)
                                          (LINK 1136 1142)(LINK 1142 1145)(LINK 1145 1135)(LINK 1151 1154)(LINK 1154 1155)(LINK 1155 1156)(LINK 1156 1159)(LINK 1159 1160)
                                          (LINK 1160 1161)(LINK 1161 1150) .))
                              )
                             (TREE (TASK-LIST (.
                                               (TASK (TYPE METHOD)(TASK-ID 1119)(TASK-NAME BuildStack)(ACTORS (. PR2_ROBOT HERAKLES_HUMAN1 .))(PARAMETERS (. StackArea .))
                                                     (SUBNODES (.
                                                                (TASK (TYPE METHOD)(TASK-ID 1120)(TASK-NAME Handle)(ACTORS (. PR2_ROBOT .))(PARAMETERS (. PR2_ROBOT Blue_Cube StackArea .))
                                                                      (SUBNODES (. (TASK (TYPE METHOD)(TASK-ID 1122)(TASK-NAME ApplyFirstOperations)(ACTORS (. PR2_ROBOT .))(PARAMETERS (. PR2_ROBOT Blue_Cube .))(SUBNODES (. (TASK (TYPE ACTION)(TASK-ID 1125)(TASK-NAME Pick)(ACTORS (. PR2_ROBOT .))(PARAMETERS (. PR2_ROBOT Blue_Cube .))(SUBNODES (.  .)))(TASK (TYPE METHOD)(TASK-ID 1126)(TASK-NAME ApplyOperation)(ACTORS (. PR2_ROBOT .))(PARAMETERS (. PR2_ROBOT Blue_Cube Glue .))(SUBNODES (. (TASK (TYPE ACTION)(TASK-ID 1128)(TASK-NAME Place)(ACTORS (. PR2_ROBOT .))(PARAMETERS (. PR2_ROBOT Blue_Cube GluingArea .))(SUBNODES (.  .)))(TASK (TYPE ACTION)(TASK-ID 1129)(TASK-NAME Apply)(ACTORS (. PR2_ROBOT .))(PARAMETERS (. PR2_ROBOT Blue_Cube Glue .))(SUBNODES (.  .)))(TASK (TYPE ACTION)(TASK-ID 1130)(TASK-NAME Pick)(ACTORS (. PR2_ROBOT .))(PARAMETERS (. PR2_ROBOT Blue_Cube .))(SUBNODES (.  .))) .))) .)))(TASK (TYPE ACTION)(TASK-ID 1124)(TASK-NAME PlaceOnStack)(ACTORS (. PR2_ROBOT .))(PARAMETERS (. PR2_ROBOT Blue_Cube StackArea .))(SUBNODES (.  .))) .)))(TASK (TYPE METHOD)(TASK-ID 1121)(TASK-NAME BuildStack)(ACTORS (. HERAKLES_HUMAN1 PR2_ROBOT .))(PARAMETERS (. StackArea .))(SUBNODES (. (TASK (TYPE METHOD)(TASK-ID 1131)(TASK-NAME Handle)(ACTORS (. HERAKLES_HUMAN1 .))(PARAMETERS (. HERAKLES_HUMAN1 Green_Cube StackArea .))(SUBNODES (. (TASK (TYPE METHOD)(TASK-ID 1133)(TASK-NAME ApplyFirstOperations)(ACTORS (. HERAKLES_HUMAN1 .))(PARAMETERS (. HERAKLES_HUMAN1 Green_Cube .))(SUBNODES (. (TASK (TYPE ACTION)(TASK-ID 1136)(TASK-NAME Pick)(ACTORS (. HERAKLES_HUMAN1 .))(PARAMETERS (. HERAKLES_HUMAN1 Green_Cube .))(SUBNODES (.  .)))(TASK (TYPE METHOD)(TASK-ID 1137)(TASK-NAME ApplyOperation)(ACTORS (. HERAKLES_HUMAN1 .))(PARAMETERS (. HERAKLES_HUMAN1 Green_Cube Smoothen .))(SUBNODES (. (TASK (TYPE ACTION)(TASK-ID 1142)(TASK-NAME HandleOperation)(ACTORS (. HERAKLES_HUMAN1 .))(PARAMETERS (. HERAKLES_HUMAN1 Green_Cube Smoothen SmoothingArea .))(SUBNODES (.  .))) .)))(TASK (TYPE METHOD)(TASK-ID 1138)(TASK-NAME ApplyFirstOperations)(ACTORS (. HERAKLES_HUMAN1 .))(PARAMETERS (. HERAKLES_HUMAN1 Green_Cube .))(SUBNODES (. (TASK (TYPE METHOD)(TASK-ID 1143)(TASK-NAME ApplyOperation)(ACTORS (. HERAKLES_HUMAN1 .))(PARAMETERS (. HERAKLES_HUMAN1 Green_Cube Stickers .))(SUBNODES (. (TASK (TYPE ACTION)(TASK-ID 1145)(TASK-NAME HandleOperation)(ACTORS (. HERAKLES_HUMAN1 .))(PARAMETERS (. HERAKLES_HUMAN1 Green_Cube Stickers StickersArea .))(SUBNODES (.  .))) .))) .))) .)))(TASK (TYPE ACTION)(TASK-ID 1135)(TASK-NAME PlaceOnStack)(ACTORS (. HERAKLES_HUMAN1 .))(PARAMETERS (. HERAKLES_HUMAN1 Green_Cube StackArea .))(SUBNODES (.  .))) .)))(TASK (TYPE METHOD)(TASK-ID 1132)(TASK-NAME BuildStack)(ACTORS (. PR2_ROBOT .))(PARAMETERS (. StackArea .))(SUBNODES (. (TASK (TYPE METHOD)(TASK-ID 1146)(TASK-NAME Handle)(ACTORS (. PR2_ROBOT .))(PARAMETERS (. PR2_ROBOT Red_Cube StackArea .))(SUBNODES (. (TASK (TYPE METHOD)(TASK-ID 1148)(TASK-NAME ApplyFirstOperations)(ACTORS (. PR2_ROBOT .))(PARAMETERS (. PR2_ROBOT Red_Cube .))(SUBNODES (. (TASK (TYPE ACTION)(TASK-ID 1151)(TASK-NAME Pick)(ACTORS (. PR2_ROBOT .))(PARAMETERS (. PR2_ROBOT Red_Cube .))(SUBNODES (.  .)))(TASK (TYPE METHOD)(TASK-ID 1152)(TASK-NAME ApplyOperation)(ACTORS (. PR2_ROBOT .))(PARAMETERS (. PR2_ROBOT Red_Cube Clean .))(SUBNODES (. (TASK (TYPE ACTION)(TASK-ID 1154)(TASK-NAME Place)(ACTORS (. PR2_ROBOT .))(PARAMETERS (. PR2_ROBOT Red_Cube CleaningArea .))(SUBNODES (.  .)))(TASK (TYPE ACTION)(TASK-ID 1155)(TASK-NAME Apply)(ACTORS (. PR2_ROBOT .))(PARAMETERS (. PR2_ROBOT Red_Cube Clean .))(SUBNODES (.  .)))(TASK (TYPE ACTION)(TASK-ID 1156)(TASK-NAME Pick)(ACTORS (. PR2_ROBOT .))(PARAMETERS (. PR2_ROBOT Red_Cube .))(SUBNODES (. .))) .))) .)))(TASK (TYPE METHOD)(TASK-ID 1149)(TASK-NAME ApplySecondOperations)(ACTORS (. PR2_ROBOT .))(PARAMETERS (. PR2_ROBOT Red_Cube .))(SUBNODES (. (TASK (TYPE METHOD)(TASK-ID 1157)(TASK-NAME ApplyOperation)(ACTORS (. PR2_ROBOT .))(PARAMETERS (. PR2_ROBOT Red_Cube Polish .))(SUBNODES (. (TASK (TYPE ACTION)(TASK-ID 1159)(TASK-NAME Place)(ACTORS (. PR2_ROBOT .))(PARAMETERS (. PR2_ROBOT Red_Cube PolishingArea .))(SUBNODES (.  .)))(TASK (TYPE ACTION)(TASK-ID 1160)(TASK-NAME Apply)(ACTORS (. PR2_ROBOT .))(PARAMETERS (. PR2_ROBOT Red_Cube Polish .))(SUBNODES (.  .)))(TASK (TYPE ACTION)(TASK-ID 1161)(TASK-NAME Pick)(ACTORS (. PR2_ROBOT .))(PARAMETERS (. PR2_ROBOT Red_Cube .))(SUBNODES (. .))) .))) .)))(TASK (TYPE ACTION)(TASK-ID 1150)(TASK-NAME PlaceOnStack)(ACTORS (. PR2_ROBOT .))(PARAMETERS (. PR2_ROBOT Red_Cube StackArea .))(SUBNODES (.  .)))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                .))) .))) .))) .))).)
                                              )

                                   (LINK-LIST (. (LINK 1120 1121)(LINK 1122 1124)(LINK 1125 1126)(LINK 1128 1129)(LINK 1129 1130)(LINK 1131 1132)(LINK 1133 1135)(LINK 1136 1137)(LINK 1137 1138)(LINK 1148 1149)(LINK 1149 1150)(LINK 1151 1152)(LINK 1154 1155)(LINK 1155 1156)(LINK 1159 1160)(LINK 1160 1161) .))))))


(!(= @treePlan 
 (TREE (TASK-LIST (.
                                               (TASK (TYPE METHOD)(TASK-ID 1119)(TASK-NAME BuildStack)(ACTORS (. PR2_ROBOT HERAKLES_HUMAN1 .))(PARAMETERS (. StackArea .))
                                                     (SUBNODES (.
                                                                (TASK (TYPE METHOD)(TASK-ID 1120)(TASK-NAME Handle)(ACTORS (. PR2_ROBOT .))(PARAMETERS (. PR2_ROBOT Blue_Cube StackArea .))
                                                                      (SUBNODES (. (TASK (TYPE METHOD)(TASK-ID 1122)(TASK-NAME ApplyFirstOperations)(ACTORS (. PR2_ROBOT .))(PARAMETERS (. PR2_ROBOT Blue_Cube .))(SUBNODES (. (TASK (TYPE ACTION)(TASK-ID 1125)(TASK-NAME Pick)(ACTORS (. PR2_ROBOT .))(PARAMETERS (. PR2_ROBOT Blue_Cube .))(SUBNODES (.  .)))(TASK (TYPE METHOD)(TASK-ID 1126)(TASK-NAME ApplyOperation)(ACTORS (. PR2_ROBOT .))(PARAMETERS (. PR2_ROBOT Blue_Cube Glue .))(SUBNODES (. (TASK (TYPE ACTION)(TASK-ID 1128)(TASK-NAME Place)(ACTORS (. PR2_ROBOT .))(PARAMETERS (. PR2_ROBOT Blue_Cube GluingArea .))(SUBNODES (.  .)))(TASK (TYPE ACTION)(TASK-ID 1129)(TASK-NAME Apply)(ACTORS (. PR2_ROBOT .))(PARAMETERS (. PR2_ROBOT Blue_Cube Glue .))(SUBNODES (.  .)))(TASK (TYPE ACTION)(TASK-ID 1130)(TASK-NAME Pick)(ACTORS (. PR2_ROBOT .))(PARAMETERS (. PR2_ROBOT Blue_Cube .))(SUBNODES (.  .))) .))) .)))(TASK (TYPE ACTION)(TASK-ID 1124)(TASK-NAME PlaceOnStack)(ACTORS (. PR2_ROBOT .))(PARAMETERS (. PR2_ROBOT Blue_Cube StackArea .))(SUBNODES (.  .))) .)))(TASK (TYPE METHOD)(TASK-ID 1121)(TASK-NAME BuildStack)(ACTORS (. HERAKLES_HUMAN1 PR2_ROBOT .))(PARAMETERS (. StackArea .))(SUBNODES (. (TASK (TYPE METHOD)(TASK-ID 1131)(TASK-NAME Handle)(ACTORS (. HERAKLES_HUMAN1 .))(PARAMETERS (. HERAKLES_HUMAN1 Green_Cube StackArea .))(SUBNODES (. (TASK (TYPE METHOD)(TASK-ID 1133)(TASK-NAME ApplyFirstOperations)(ACTORS (. HERAKLES_HUMAN1 .))(PARAMETERS (. HERAKLES_HUMAN1 Green_Cube .))(SUBNODES (. (TASK (TYPE ACTION)(TASK-ID 1136)(TASK-NAME Pick)(ACTORS (. HERAKLES_HUMAN1 .))(PARAMETERS (. HERAKLES_HUMAN1 Green_Cube .))(SUBNODES (.  .)))(TASK (TYPE METHOD)(TASK-ID 1137)(TASK-NAME ApplyOperation)(ACTORS (. HERAKLES_HUMAN1 .))(PARAMETERS (. HERAKLES_HUMAN1 Green_Cube Smoothen .))(SUBNODES (. (TASK (TYPE ACTION)(TASK-ID 1142)(TASK-NAME HandleOperation)(ACTORS (. HERAKLES_HUMAN1 .))(PARAMETERS (. HERAKLES_HUMAN1 Green_Cube Smoothen SmoothingArea .))(SUBNODES (.  .))) .)))(TASK (TYPE METHOD)(TASK-ID 1138)(TASK-NAME ApplyFirstOperations)(ACTORS (. HERAKLES_HUMAN1 .))(PARAMETERS (. HERAKLES_HUMAN1 Green_Cube .))(SUBNODES (. (TASK (TYPE METHOD)(TASK-ID 1143)(TASK-NAME ApplyOperation)(ACTORS (. HERAKLES_HUMAN1 .))(PARAMETERS (. HERAKLES_HUMAN1 Green_Cube Stickers .))(SUBNODES (. (TASK (TYPE ACTION)(TASK-ID 1145)(TASK-NAME HandleOperation)(ACTORS (. HERAKLES_HUMAN1 .))(PARAMETERS (. HERAKLES_HUMAN1 Green_Cube Stickers StickersArea .))(SUBNODES (.  .))) .))) .))) .)))(TASK (TYPE ACTION)(TASK-ID 1135)(TASK-NAME PlaceOnStack)(ACTORS (. HERAKLES_HUMAN1 .))(PARAMETERS (. HERAKLES_HUMAN1 Green_Cube StackArea .))(SUBNODES (.  .))) .)))(TASK (TYPE METHOD)(TASK-ID 1132)(TASK-NAME BuildStack)(ACTORS (. PR2_ROBOT .))(PARAMETERS (. StackArea .))(SUBNODES (. (TASK (TYPE METHOD)(TASK-ID 1146)(TASK-NAME Handle)(ACTORS (. PR2_ROBOT .))(PARAMETERS (. PR2_ROBOT Red_Cube StackArea .))(SUBNODES (. (TASK (TYPE METHOD)(TASK-ID 1148)(TASK-NAME ApplyFirstOperations)(ACTORS (. PR2_ROBOT .))(PARAMETERS (. PR2_ROBOT Red_Cube .))(SUBNODES (. (TASK (TYPE ACTION)(TASK-ID 1151)(TASK-NAME Pick)(ACTORS (. PR2_ROBOT .))(PARAMETERS (. PR2_ROBOT Red_Cube .))(SUBNODES (.  .)))(TASK (TYPE METHOD)(TASK-ID 1152)(TASK-NAME ApplyOperation)(ACTORS (. PR2_ROBOT .))(PARAMETERS (. PR2_ROBOT Red_Cube Clean .))(SUBNODES (. (TASK (TYPE ACTION)(TASK-ID 1154)(TASK-NAME Place)(ACTORS (. PR2_ROBOT .))(PARAMETERS (. PR2_ROBOT Red_Cube CleaningArea .))(SUBNODES (.  .)))(TASK (TYPE ACTION)(TASK-ID 1155)(TASK-NAME Apply)(ACTORS (. PR2_ROBOT .))(PARAMETERS (. PR2_ROBOT Red_Cube Clean .))(SUBNODES (.  .)))(TASK (TYPE ACTION)(TASK-ID 1156)(TASK-NAME Pick)(ACTORS (. PR2_ROBOT .))(PARAMETERS (. PR2_ROBOT Red_Cube .))(SUBNODES (. .))) .))) .)))(TASK (TYPE METHOD)(TASK-ID 1149)(TASK-NAME ApplySecondOperations)(ACTORS (. PR2_ROBOT .))(PARAMETERS (. PR2_ROBOT Red_Cube .))(SUBNODES (. (TASK (TYPE METHOD)(TASK-ID 1157)(TASK-NAME ApplyOperation)(ACTORS (. PR2_ROBOT .))(PARAMETERS (. PR2_ROBOT Red_Cube Polish .))(SUBNODES (. (TASK (TYPE ACTION)(TASK-ID 1159)(TASK-NAME Place)(ACTORS (. PR2_ROBOT .))(PARAMETERS (. PR2_ROBOT Red_Cube PolishingArea .))(SUBNODES (.  .)))(TASK (TYPE ACTION)(TASK-ID 1160)(TASK-NAME Apply)(ACTORS (. PR2_ROBOT .))(PARAMETERS (. PR2_ROBOT Red_Cube Polish .))(SUBNODES (.  .)))(TASK (TYPE ACTION)(TASK-ID 1161)(TASK-NAME Pick)(ACTORS (. PR2_ROBOT .))(PARAMETERS (. PR2_ROBOT Red_Cube .))(SUBNODES (. .))) .))) .)))(TASK (TYPE ACTION)(TASK-ID 1150)(TASK-NAME PlaceOnStack)(ACTORS (. PR2_ROBOT .))(PARAMETERS (. PR2_ROBOT Red_Cube StackArea .))(SUBNODES (.  .)))

                  )


                                   (LINK-LIST (. (LINK 1120 1121)(LINK 1122 1124)(LINK 1125 1126)(LINK 1128 1129)(LINK 1129 1130)(LINK 1131 1132)(LINK 1133 1135)(LINK 1136 1137)(LINK 1137 1138)(LINK 1148 1149)(LINK 1149 1150)(LINK 1151 1152)(LINK 1154 1155)(LINK 1155 1156)(LINK 1159 1160)(LINK 1160 1161) .)))))




(!(== (VAL @treePlan)

(TREE (TASK-LIST @taskList) (LINK-LIST @linkList))
    ))

(!(= @root (CAR @taskList)))
(!(PlannerInterface.parseHatpTree @root @parsedTree))
(!(= @actionsToMonitor (. .)))
(!(PlanManager.analyzePlanTree @parsedTree @actionsToMonitor))
(!(PlanManager.monitorPlan HERAKLES_HUMAN1 @actionsToMonitor))
; (!(== (VAL @plan) 
; 	(HATP-REP 
;     (REQ-ID @id)
;     (REPORT @report)
;  	  (STREAMS 
; 			(ACTION-LIST @actionList)
; 			(LINK-LIST @linkList)
; 		)
;  	(TREE
; 		(TASK-LIST @taskList)
; 		(LINK-LIST @linkList)
; 		)
;  	)
; 	))

)
)

(defop |testPlanMonitoring|
	:invocation(!(Tester.testPlanMonitoring))
	:body (
		(!(PRINT "asd"))
		)
	)



 (defop |testRecursion|
	 :invocation(!(Tester.testRecursion @i))
	 :body (
					(!(PRINT @i))
					(IF(?(< @i 5))
						 (!(Tester.testRecursion (+ @i 1)))
						 )
					)

	 )

 (defop |testPlanAttention|
	 :invocation(!(Tester.testPlanAttentional))
	 :body (
					(!(PlannerInterface.init))
					(=>(PlannerInterface.getPlan HandleSurface  (. ASSEMBLY_SURFACE_1 .) ))  ;;we ask for a plan
					(^(PlannerInterface.report @report))
					(~>(PlannerInterface.report (VAL @report)))
					(IF(?(EQUAL @report OK))
						 (^(PlannerInterface.result @plan))
						 (~>(PlannerInterface.result (VAL @plan)))
						 (!(= @PR2_ROBOT (CAR @plan)))
						 (!(= @plan (CDR @plan)))
						 (!(= @human (CAR @plan)))


						 (!(SEND-MESSAGE seed_plan_listener (PlanManager.planResult @PR2_ROBOT)))
						 )
					)

	 )


 (defop |testMapSwitch|
	 :invocation (!(Tester.testMapSwitch))
	 :body (
					(!(= @plan (. 0 1 2 3 .)))

					(!(= @currentNode (CAR @plan)))
					(!(= @plan (CDR @plan)))
					(WHILE(?(~(NULL @plan)))
								(!(= @nextNode (CAR @plan)))
								(!(= @plan (CDR @plan)))
								(!(SEND-MESSAGE spencer_map_server (spencer_map_server.request switchMap @currentNode @nextNode)))
								(^(spencer_map_server.switchMap.report @report))
								(!(SEND-MESSAGE spencer_map_server (spencer_map_server.request getCenter @nextNode)))
								(^(spencer_map_server.getCenter.report @report))
								(^(spencer_map_server.getCenter.result @x @y))

								(!(BaseActions.getFreeId @moveId))
								(!(ReportManager.sub BaseActions.report @moveId))
								(=>(BaseActions.action move (. (. @x @y 0 .) .)))
								(!(DatabaseInterface.addMonitor (AGENT-STATEMENT SPENCER_PR2_ROBOT pr2_PR2_ROBOT isAt @nextNode) (Monitor.atNextLocation)))
								(^(Monitor.atNextLocation))
								(=>(BaseActions.stop @moveId))
								(^(BaseActions.report (VAL @moveId) @report))
								(~>(BaseActions.report (VAL @moveId) (VAL @report)))
								(~>(Monitor.atNextLocation))
								)

					)
	 )

 (defop |testEstimateIntentions|
	 :invocation(!(Tester.testEstimate))
	 :body (
					(!(Controller.initAll))
					(!(FakeExecution.lmp))
					(!(Softmotion.getFreeId @smId))
					(=>(Softmotion.request moveHead -0.2 0.1 @smId))
					(^(Softmotion.report (VAL @smId) @report))

					(!(SEND-MESSAGE EstimateIntentions (EstimateIntentions.start (. EatCookies DrinkWater FillCookies .) (. human_take_waterBottle human_take_glass human_open_cookieBox human_move_fridge .) (. BOTTLE GLASS COOKIE_BOX FRIDGE .) (. HotDay SnackTime .) )))
																				;         (!(SEND-MESSAGE EstimateIntentions (EstimateIntentions.start (. ReadBook PrepareDinner ListenToMusic UseTelephone .) (. human_move_table human_move_nightstand human_move_library human_move_sofa .) (. TABLE NIGHSTAND LIBRARY SOFA .) (. AfterWork DinnerTime .) )))

					(^(EstimateIntentions.rosResult @intention @iprob @action @aprob @q))
					(!(FakeExecution.giveDrink))
					)

	 )

(defop |testSpencer|
	:invocation(!(Tester.testSpencer))
	:body (
				 (!(Controller.initAll))
				 (=>(ExecutionManager.execute guideGroup 0 goal 0))
				 )
	)

(defop |testRegisterChanges|
	:invocation(!(Tester.testRegisterChanges))
	:body (
				 (!(Controller.initAll))
				 (!(AgentActionMonitor.startMonitoringAgent HERAKLES_HUMAN1))
				 )
	)

(defop |testInference|
	:invocation(!(Tester.testInference))
	:body (
				 (!(Controller.initAll))
				 (!(AgentActionMonitor.calculateInferencesForAgents (. HERAKLES_HUMAN1 .)))
				 )

	)

(defop |testInferenceOnPickPlace|
	:invocation(!(Tester.testInferenceOnPickPlace))
	:body (
				 (!(Controller.initAll))

				 (!(AgentActionMonitor.calculateInferencesForAgents (. HERAKLES_HUMAN1 .)))
				 (=>(ExecutionManager.execute take GLUE_BOTTLE RIGHT 0))
				 (^(ExecutionManager.report 0 @report))
				 (=>(ExecutionManager.execute handover GIVE GLUE_BOTTLE HERAKLES_HUMAN1 1))
				 (^(ExecutionManager.report 1 @report))

				 )
	)

(defop |testPickGive|
	:invocation(!(Tester.testPickGive))
	:body (
				 (!(Controller.initAll))
				 (=>(ExecutionManager.execute take LOTR_TAPE RIGHT 0))
					(^(ExecutionManager.report 0 @report))

					(=>(ExecutionManager.execute simpleHandover GIVE LOTR_TAPE HERAKLES_HUMAN1 1))
					(^(ExecutionManager.report 1 @report))
					)
)

 (defop |testSendMessage|
	 :invocation(!(Tester.testSendMessage))
	 :body (
					(!(= @report "OK"))
					(!(SEND-MESSAGE asd (AttentionalInterface.report @report)))
					)
	 )


 (defop |testReportManager|
	 :invocation(!(Tester.testReportManager))
	 :body (
					(!(ReportManager.sub ExecutionManager.report 0))
					;; (!(ReportManager.sub ExecutionManager.report 0))
					;; (!(ReportManager.unsub ExecutionManager.report 0))
					;; (!(ReportManager.unsub ExecutionManager.report 0))

					(!(ReportManager.publish ExecutionManager.report 0 OK))

					)
	 )
 (defop |testGuide| 
	 :invocation (!(Tester.testGuide @agent))
	 :body (
		(!(Controller.initAll))
		(!(ExecutionManager.getFreeId @approachId))
		(=>(ExecutionManager.execute approachPerson @agent @approachId))
		(^(ExecutionManager.report (VAL @approachId) @report))
		(~>(ExecutionManager.report (VAL @approachId) @report))

		(^(ELAPSED-TIME (TIME) 6))
		(!(ExecutionManager.getFreeId @guideId))
		(=>(ExecutionManager.execute startGuide @guideId))
		(^(ExecutionManager.report (VAL @guideId) @report))
		)
	 )

 (defop |testGoBase|
	 :invocation(!(Tester.testGoBase))
	 :body (
		(!(Controller.initAll))
		(=>(BaseActions.action move (. (. 0 0 0 .) .) 0))
		(^(BaseActions.report 0 @report))
		)
	 )

 (defop |testSpencerGo|
	 :invocation(!(Tester.testSpencerGo))
	 :body (
		(!(Controller.initAll))
		(=>(BaseActions.action move (. (. 2 0 -90 .) .) 0))
		(^(BaseActions.report 0 @report))
		(~>(BaseActions.report 0 @report))
					(^(ELAPSED-TIME (TIME) 5))
		(=>(BaseActions.action move (. (. -2 0 90 .) .) 1))
;          (=>(BaseActions.action move (. (. -4.8 8 -90 .) .) 1))
					(^(BaseActions.report 1 @report))
					(~>(BaseActions.report 1 @report))
		)
	 )
 (defop |testGtpGoto|
	 :invocation (!(Tester.testGtpGoto))
	 :body (
		(!(Controller.initAll))
		(=>(GtpActions.action travelTo NO_NAME (. 2.5 2 0 .) 0))
		)
	 )

(defop |testRosMoveHead| 
	 :invocation(!(TestRosMoveHead))
	 :body (
		(!(SEND-MESSAGE HeadBridge (moveHead pan 1)))
		(^(HeadBridge.response @response))
			 
		)
	 )

 (defop |testGtpPlan|
	 :invocation(!(Tester.testGtpPlan))
	 :body (
		(!(Controller.initAll))
		
		(=>(Mhp.request initGtp 0))
		(^(Mhp.report 0 @any))
		(=>(Mhp.request fetchEnvironment 1))

		(^(Mhp.report 1 @any))
		(=>(Mhp.request addGtpAgent mainAgent PR2_PR2_ROBOT 2))
		(^(Mhp.report 2 @any))
		(=>(Mhp.request addGtpObject mainObject WALLE_TAPE 3))
		(^(Mhp.report 3 @any))
		(=>(Mhp.request addGtpData hand right 4))
		(^(Mhp.report 4 @any))
		(=>(Mhp.request planGtpTask pick 5))
		(^(Mhp.report 5 @any))
		)
	 )


 (defop |testGtpTake|
	 :invocation(!(Tester.testGtpTake))
	 :body (
		(!(Controller.initAll))
		(=>(GtpActions.action pick BLUE_CUBE RIGHT 0))
		(^(GtpActions.report 0 @report))
		(~>(GtpActions.report @id @report))
		
		(=>(GtpActions.action place BLUE_CUBE TABLE_4 PLACEMAT_BLUE (. .) RIGHT 1))
		(^(GtpActions.report 1 @report))
		(~>(GtpActions.report @id @report))
		)
	 )
 
 (defop |testGtpPlace|
	 :invocation(!(Tester.testGtpPlace))
	 :body (
		(=>(GtpActions.action place BLUE_CUBE TABLE_4 PLACEMAT_BLUE (. .) RIGHT 1))
		(^(GtpActions.report 1 @report))
		(~>(GtpActions.report @id @report))
		)
	 )
(defop |testPlanTake|
	:invocation(!(Tester.testPlanTake))
	:body (
	 (!(Controller.initAll))
	 (!(Connector.setPlanManager))
	 (=>(PlanManager.goal TakeObject (. PR2_PR2_ROBOT GREY_TAPE .)))
	 (=>(PlanManager.newGoal TRUE))

	 )
	)

(defop |testBaseActions|
	:invocation(!(Tester.testBaseActions))
	:body (
	 (!(BaseActions.init))
	 (!(BaseActions.getFreeId @id))
	 (=>(BaseActions.action move (. (. 1.5 2 0 .) .) @id ))
	 )
	)

 (defop |testSpeak|
	 :invocation(!(Tester.testSpeak))
	 :body (
		(!(Acapela.init))

		(!(Acapela.say "Hello."))
		(^(ELAPSED-TIME (TIME) 1))
(!(Acapela.say "I think you want to clean the table. Let's see if I can help."))
		(^(ELAPSED-TIME (TIME) 1))
(!(Acapela.say "Let me think of a plan."))
		(^(ELAPSED-TIME (TIME) 1))
(!(Acapela.say "Okay, this is the plan"))
		(^(ELAPSED-TIME (TIME) 1))
(!(Acapela.say "You want to do it in a different way? Let's see If I can help."))
		(^(ELAPSED-TIME (TIME) 1))
(!(Acapela.say "Okay. I wait for further instructions"))
		(^(ELAPSED-TIME (TIME) 1))
(!(Acapela.say "Let me think of another plan"))
		(^(ELAPSED-TIME (TIME) 1))
(!(Acapela.say "First, I take the lord of the rings tape and give it to you."))
		(^(ELAPSED-TIME (TIME) 1))
(!(Acapela.say "Then, you throw it in the pink trashbin."))
		(^(ELAPSED-TIME (TIME) 1))
(!(Acapela.say "After that, I take the walle tape and give it to you."))
		(^(ELAPSED-TIME (TIME) 1))
(!(Acapela.say "To conclude, you throw it in the pink trashbin."))
		(^(ELAPSED-TIME (TIME) 1))
(!(Acapela.say "First you take the lord of the rings tape and then you give it to me. To conclude i throw it in the pink trashbin."))
		(^(ELAPSED-TIME (TIME) 1))
(!(Acapela.say "I take the lord of the rings tape"))
		(^(ELAPSED-TIME (TIME) 1))
(!(Acapela.say "I take the walle tape"))
		(^(ELAPSED-TIME (TIME) 1))
(!(Acapela.say "I give it to you"))
		(^(ELAPSED-TIME (TIME) 1))
(!(Acapela.say "I give you the walle tape"))
		(^(ELAPSED-TIME (TIME) 1))
(!(Acapela.say "I give you the lord of the rings tape"))
		(^(ELAPSED-TIME (TIME) 1))
(!(Acapela.say "I throw it in the pink trash bin"))
		(^(ELAPSED-TIME (TIME) 1))
(!(Acapela.say "I throw the walle tape in the pink trash bin"))
		(^(ELAPSED-TIME (TIME) 1))
(!(Acapela.say "Take the walle tape"))
		(^(ELAPSED-TIME (TIME) 1))
(!(Acapela.say "Take the lord of the rings tape"))
		(^(ELAPSED-TIME (TIME) 1))
(!(Acapela.say "Give me the lord of the rings tape"))
		(^(ELAPSED-TIME (TIME) 1))
(!(Acapela.say "Give it to me"))
		(^(ELAPSED-TIME (TIME) 1))
(!(Acapela.say "Throw it in the pink trashbin"))
		(^(ELAPSED-TIME (TIME) 1))
(!(Acapela.say "Throw the walle tape in the pink trashbin"))
		(^(ELAPSED-TIME (TIME) 1))
(!(Acapela.say "Throw the lord of the rings tape in the pink trashbin"))
		(^(ELAPSED-TIME (TIME) 1))
(!(Acapela.say "I can't seem to reach it"))
		(^(ELAPSED-TIME (TIME) 1))
)
)

 (defop |testGetActionString|
	 :invocation(!(Tester.testGetActionString))
	 :body (
		(!(= @actionName handover))
		(!(= @actionParameters (. WALLE_TAPE HERAKLES_HUMAN1 PR2_PR2_ROBOT .)))
		(!(PlanManager.getActionString @actionName @actionParameters "I " 0 @oldObject @followsHandover @actionString))
		(!(PlanManager.getActionString @actionName @actionParameters "I " 0 @oldObject @followsHandover @actionString))
		(!(PlanManager.getActionString @actionName @actionParameters "I " 0 @oldObject @followsHandover @actionString))
		)
	 )
 (defop |testTellPlan|
	 :invocation(!(Tester.testTellPlan))
	 :body (
		(!(Controller.initAll))
		(=>(PlanManager.goal Clean (. TABLE_4 .)))
		(?(PlanManager.goal @goal @parameters))
		(=>(PlannerInterface.getPlan (VAL @goal) (VAL @parameters)))   ;;we ask for a plan
		(^(PlannerInterface.report @report))
		(~>(PlannerInterface.report (VAL @report)))
		(IF(?(EQUAL @report OK))
			 (^(PlannerInterface.result @plan))
			 (~>(PlannerInterface.result (VAL @plan)))
			 (!(PlanManager.tellPlan @plan))
						 
			 )
			 
		)
	 )

 (defop |testWeirdError|
	 :invocation(!(Tester.testWeirdError))
	 :body (
		(!(= @stoppable TRUE))
		(IF(?(&(ExecutionManager.stop 0) (EQUAL @stoppable TRUE)))
			 (!(PRINT "OK"))
			 )
		
		)
	 )
 

 (defop |testGenericAddDb|
	 :invocation(!(Tester.testGenericAddDb))
	 :body (
		;;doesn't work
		(!(= $fact (Softmotion.stop 3)))
		(=> ($fact))
		)
	 )
 (defop |testReturn|
	 :invocation(!(Tester.testReturn))
	 :body (
		(!(Controller.initAll))
		
		(!(= @id 3))
		(!(ArmActions.getFreeId @id))
		(!(PRINT @id))
		(!(ArmActions.getFreeId @id))
		(!(PRINT @id))
		(!(ArmActions.getFreeId @id))
		(!(PRINT @id))
		(!(ArmActions.getFreeId @id))
		(!(PRINT @id))
		(!(ArmActions.getFreeId @id))
		(!(PRINT @id))
		(!(ArmActions.getFreeId @id))
		(!(PRINT @id))
		)
	 )

 (defop |testConsTail|
	 :invocation(!(Tester.testConsTail))
	 :body (
		(!(= @queue (. .)))
		(!(= @element (. a .)))
		
		(!(= @newQueue (CONS-TAIL (VAL @element) @queue)))
		(!(PRINT @newQueue))
		
		)
	 )

 (defop |testTablet|
	 :invocation(!(Tester.testTablet))
	 :body (
		(!(Controller.initAll))
		(=>(TabletConnector.shouldRun TRUE))
		(!(TabletConnector.getCommand))
		)
	 )
 (defop |testStringCat|
	 :invocation(!(Tester.testStringCat))
	 :body (
		(!(= @a "take" ))
		(!(= @b "object"))
		(!(= @c (TERM-STRING-CAT @a ".asd")))
		(!(PRINT @c))
		)
	 )
 (defop |testDatabaseMonitor|
	 :invocation (!(Tester.testDbMonitor))
	 :body (
;	  (!(DatabaseInterface.addMonitor (Prova a @var) (event) @result))
;	  (!(DatabaseInterface.add (Prova a b) @result))


		)
	 )
 (defop |testMonitorSpheres|
	 :invocation (!(Tester.testMonitorSpheres))
	 :body (
		(!(Controller.initAll))

(!(AgentActionMonitor.calculateInferencesForAgents (. HERAKLES_HUMAN1 .)))
;(=>(AgentActionMonitor.startMonitorSphereLoop))
;	  (^(ELAPSED-TIME (TIME) 1))
;	  (!(AgentActionMonitor.cleanMonitorSphere 1))
;	  (^(ELAPSED-TIME (TIME) 1))
;	  (!(AgentActionMonitor.cleanAgentMonitorSpheres HERAKLES_HUMAN1))

		
		)
	 )

(defop |testPlan|
	:invocation(!(Tester.testPlan))
	:body (
				 (!(Controller.initAll))
				 (!(AgentActionMonitor.cleanMonitorSpheres))
				 (!(AgentActionMonitor.calculateInferencesForAgents (. HERAKLES_HUMAN1 .)))
				 (!(AgentActionMonitor.startMonitoringAgent HERAKLES_HUMAN1 ))
				 (=>(PlanManager.goal HandleSurface (. ASSEMBLY_SURFACE_1 .)))
		 ;;(=>(PlanManager.goal TravelTo (. HERAKLES_HUMAN1 STOCK_TABLE .)))
		 ;(=>(PlanManager.goal HandleSurface (. ASSEMBLY_SURFACE_1 .)))
																				 (=>(PlanManager.newGoal TRUE))

																				 (=>(PlanManager.managePlans))
	 )
	)
 
 ;; (defop |testPlan| 
 ;;   :invocation(!(Tester.testPlan))
 ;;   :body (
 ;; 	  (!(Controller.initAll))
 ;; 	  (=>(PlanManager.newGoal TRUE))
 ;; 	  (=>(PlanManager.goal provaGoal))
 ;; 	  (=>(PlannerInterface.report OK))
 ;; 	  (!(= @actionTake (. take (. GREY_TAPE NO_NAME NO_NAME 300 .) .)))
		
 ;; 	  (!(= @action1 (. (VAL @actionTake) 1 (. .) .)))
 ;; 	  (!(= @actionThrow (. throw (. GREY_TAPE TABLE_4 PINK_TRASHBIN 300 .) .)))
 ;; 	  (!(= @action2 (. (VAL @actionThrow) 2 (. 1 .) .)))
 ;; 	  (=>(PlannerInterface.result (. (. (VAL @action1) (VAL @action2) .) (. .) .)))
 ;; 	  (=>(PlanManager.managePlans))
 ;; 	  (^(PlanManager.actionReport 1 @report))
 ;; 	  (=>(PlannerInterface.report ACHIEVED))
 ;; 	  )
 ;;   )

 (defop |testPlace|
	 :invocation(!(Tester.testPlace))
	 :body (
;	  (!(Controller.initAll))
		(=>(ExecutionManager.execute place (. BRACKET_1 STOCK_TABLE .) 2))
		)
	 )

 (defop |testPlaceAfterTake|
	 :invocation(!(Tester.testPlaceAfterTake))
	 :body (
		(=>(ExecutionManager.execute placeSandra LOTR_TAPE TABLE_4 PLACEMAT_RED 3))
		)
	 )

 (defop |testArmActions|
	 :invocation(!(Tester.testArmActions))
	 :documentation "PLACE OBJECT HAS NOT BEEN TESTED "
	 :body (
		(!(ArmActions.init))
		(!(Controller.initAll))
		(=>(PR2_ROBOT.armInAir RIGHT TRUE))


;	  (!(PRINT "MovetoX"))
;	  (=>(ArmActions.action moveToX RIGHT 3.3 2.65 1.2 1))
;	  (^(ArmActions.report 1 @report))
;	  (~>(ArmActions.report 1 @report))
		(!(Tester.breakpoint))
		(!(PRINT "MoveToQ"))
		(=>(ArmActions.action moveToQ RIGHT NO_NAME NO_NAME 0 0 0 0 0 0 0 1))
		(^(ArmActions.report 1 @report))
			(~>(ArmActions.report 1 @report))
		
		(!(PRINT "MoveToObject"))
		(=>(ArmActions.action moveToObject RIGHT GREY_TAPE 1))
		(^(ArmActions.report 1 @report))
		(~>(ArmActions.report 1 @report))
	
		(!(PRINT "EscapeObject"))
		(=>(ArmActions.action escapeObject RIGHT GREY_TAPE 1))
		(^(ArmActions.report 1 @report))
		(~>(ArmActions.report 1 @report))

	 ; (=>(ArmActions.action gotoPlaceObject RIGHT GREY_TAPE TABLE_4 NO_NAME 1))
		;(^(ArmActions.report 1 @report))

		(!(PRINT "MoveToRest"))
		(=>(ArmActions.action moveToPose REST RIGHT 0 1))
		(^(ArmActions.report 1 @report))
		(~>(ArmActions.report 1 @report))

		(!(PRINT "MoveToReady"))
		(=>(ArmActions.action moveToPose READY RIGHT 0 1))
		(^(ArmActions.report 1 @report))
		(~>(ArmActions.report 1 @report))	  


		(!(PRINT "MoveToExtended"))
		(=>(ArmActions.action moveToPose EXTENDED RIGHT 0 1))
		(^(ArmActions.report 1 @report))
		(~>(ArmActions.report 1 @report))
		)
	 )

(defop |testGripperActions|
	:invocation(!(Tester.testGripperActions))
	:body (

		(=>(ArmActions.action closeGripper RIGHT 1))
		(^(ArmActions.report 1 @report))


		(=>(ArmActions.action openGripper RIGHT 1))
		(^(ArmActions.report 1 @report))

		(=>(ArmActions.action openGripperOnPressure RIGHT 1))
		(^(ArmActions.report 1 @report))

		(=>(ArmActions.action stopOpenGripperOnPressure RIGHT 1))
		(^(ArmActions.report 1 @report))
	 )
	)

(defop |testHeadActions|
	:invocation(!(Tester.testHeadActions))
	:body (
	 (!(HeadActions.init))
	 (!(Controller.initAll))
	(!(PRINT "INIT FAITES !!!!!!!!!!!!!!!!!!!!!"))
	(!(HeadActions.getFreeId @headId))
	(=>(HeadActions.action headExplore @headId))
	 (^(HeadActions.report (VAL @headId) @report))
	(~>(HeadActions.report (VAL @headId) @report))
	(IF(?(EQUAL @report FAILED))
		(!(PRINT "Explore failed"))
	 )
	
	(!(HeadActions.getFreeId @headId))
	 (=>(HeadActions.action lookAt LOTR_TAPE NO_NAME @headId))
	 (^(HeadActions.report (VAL @headId) @report))
	(~>(HeadActions.report (VAL @headId) @report))	
	(IF(?(EQUAL @report FAILED))
		(!(PRINT "LookAt failed"))
	 )

	(!(HeadActions.getFreeId @headId))
	 (=>(HeadActions.action isLookingAt LOTR_TAPE NO_NAME @headId))
	 (^(HeadActions.report (VAL @headId) @report))
	(~>(HeadActions.report (VAL @headId) @report))
	(IF(?(EQUAL @report "TRUE"))
		(!(PRINT "Object is looking"))
		ELSEIF(?(EQUAL @report "FALSE"))
			(!(PRINT "Object is not looking"))
			ELSE
				(!(PRINT "FAILED"))
		)
	 )
	)
 
 (defop |testString|
	 :invocation(!(Tester.testString))
	 :body (
		(!(= @a MonitorQueue.priorityQueue))
		(!(= @b (TERM-STRING-CAT @a "Sem")))
		(!(PRINT @b))
		(!(SEM-CREATE (VAL @b) 1 SEM-FIFO))
		(!(SEM-P (VAL @b)))
		(!(SEM-V (VAL @b)))
		)
	 )
 (defop |testGenomInterface|
	 :invocation(!(Tester.testGenomInterface))
	 :body (
		(=>(Softmotion.request useGripper RRELEASE 1))
		(^(Softmotion.report 1 @report))
		(!(PRINT @report))
		)
	 )
 (defop |testObservations|
	 :invocation(!(Tester.testObservations))
	 :documentation
	 :body (
		(?(Spark.PR2_ROBOTTorso @rTorso))
	 (?(Spark.PR2_ROBOTName @sparkPR2_ROBOTName))

		
	 (?(Spark.freeId @sparkId))
	 (=>(Spark.request getJointAbsPose (VAL @sparkPR2_ROBOTName) (VAL @rTorso) (VAL @sparkId)))
	 (!(ExecutionManager.handleReport Spark.report @sparkId @executionId))
	 (?(Spark.result (VAL @sparkId) @PR2_ROBOTTorsoX @PR2_ROBOTTorsoY @PR2_ROBOTTorsoZ @PR2_ROBOTTorsoYaw @PR2_ROBOTTorsoPitch @PR2_ROBOTTorsoRoll))
	 (~>(Spark.result (VAL @sparkId) (VAL @PR2_ROBOTTorsoX) (VAL @PR2_ROBOTTorsoY) (VAL @PR2_ROBOTTorsoZ) (VAL @PR2_ROBOTTorsoYaw) (VAL @PR2_ROBOTTorsoPitch) (VAL @PR2_ROBOTTorsoRoll)))
	 (=>(ExecutionManager.oldArmPosition unknown))
	 (=>(ExecutionManager.oldDistance outOfRange))
	 (=>(ExecutionManager.oldOrientation unknown))
	 (!(= @i 0))
	 (WHILE(?(~(EQUAL @i 10)))
					;Set the starting state variables. We need to get the first row of observations to set the state variable inRange
				 (!(ExecutionManager.getHumanObservations HERAKLES_HUMAN1 @PR2_ROBOTTorsoX @PR2_ROBOTTorsoY @PR2_ROBOTTorsoZ 1 @armPosition @distance @orientation))
				 (^(ELAPSED-TIME (TIME) 1))
				 (!(= @i (+ @i 1)))
				 )
	 )
	 )
 (defop |testMonitorHead|
	 :invocation(!(Tester.testMonitorHead))
	 :body (
		(?(Spark.humanHead @head))
		(!(MonitorManager.init))
		(!(MonitorManager.monitorTarget HERAKLES_HUMAN1 @head (. (. (fact) .) (. .) .) (. (. .) (. .) .) 1 1)) 
				
		)
	 )

 (defop |testGive|
	 :invocation(!(Tester.testGive))
	 :documentation " "
	 :body (
		(!(Controller.initAll))
		(=>(PR2_ROBOT.hasObject RIGHT WALLE_TAPE))
		(=>(ExecutionManager.execute handover GIVE WALLE_TAPE HERAKLES_HUMAN1 1))

			
		)
	 )

 (defop |testGrab|
	 :invocation(!(Tester.testGrab))
	 :documentation " "
	 :body (
		(!(Controller.initAll))
		;; (!(Spark.getFreeId @sparkId))
		;; (=>(Spark.request placeObjectForSimu (VAL @object) 0 0 0 0 0 0 1 @sparkId)) 
		;; (!(ExecutionManager.handleReport Spark.report @sparkId @executionId))

		(!(Spark.getFreeId @sparkId))
		(=>(Spark.request setObjectInHand HERAKLES_HUMAN1 LOTR_TAPE RIGHT TRUE (VAL @sparkId)))
		(!(ExecutionManager.handleReport Spark @sparkId @executionId TRUE NO_NAME))

		(=>(ExecutionManager.execute handover GRAB LOTR_TAPE HERAKLES_HUMAN1 1))

			
		)
	 )
 (defop |testFailed|
	 :invocation(!(Tester.testFailed))
	 :documentation " "
	 :body (
		(!(Tester.supportTestFailed))
		(^ (fact))
		)
	 )

 (defop |supportTestFailed|
	 :invocation(!(Tester.supportTestFailed))
	 :documentation " "
	 :body (
		(!(FAILED))
		)
	 )
 (defop |testGeneric|
	 :invocation (!(Tester.testGeneric))
	 :documentation " "
	 :body (
	 ;works if fact with no || or && and wait or if with variable and not VAL. 
		;weirder and weirder. If we have a composed term it works with VAL...
		(!(= @a (fact)))
		(IF(?(VAL @a))
			 (!(PRINT "ok"))
			 )
		;(!(Tester.testGeneric2 FALSE))
		)
	 )
 (defop |testGeneric2|
	 :invocation (!(Tester.testGeneric2 @a))
	 :documentation ""
	 :body (
		(^ (|| (fact) (VAL @a )))
			 (!(PRINT "ok"))
			 
			 )
	 )
 (defop |testWhile|
	 :invocation(!(Tester.testWhile))
	 :body (
		(!(= @a 0))
		(WHILE(?(~(fact (VAL @a))))
		(!(= @a (+ @a 1)))
		)
		)
	 )

 (defop |testTake|
	 :invocation (!(Tester.testTake))
	 :documentation ""
	 :body (
		(!(Controller.initAll))

			(=>(ExecutionManager.execute take (. BRACKET_1 RIGHT .) 0 ))

		)
	 )
(defop |testTakeThrow|
	:invocation(!(Tester.testTakeThrow))
	:documentation " "
	:body (
		(!(Controller.initAll))
		(?(Spark.freeId @sparkId))
		(=>(Spark.request setGraspedObject GREY_TAPE 0 0 (VAL @sparkId)))
		(!(ExecutionManager.handleReport Spark.report @sparkId @executionId))

		(?(Spark.freeId @sparkId))
		(=>(Spark.request setInferrenceForObject GREY_TAPE 0 PR2_PR2_ROBOT 0 SPARK_PRECISE_PR2_ROBOT_HAND 1.0 (VAL @sparkId)))  
		(!(ExecutionManager.handleReport Spark.report @sparkId @executionId))
		
		(=>(ExecutionManager.execute take GREY_TAPE RIGHT 1))
		
		(^(ExecutionManager.report (VAL @executionId) @report))
		
		(=>(ExecutionManager.throw GREY_TAPE PINK_TRASHBIN 2))
		)
	)

(defop |testThrow|
	:invocation(!(Tester.testThrow))
	:body (
	 (!(Controller.initAll))
	 ;; (?(Spark.freeId @sparkId))
	 ;; (=>(Spark.request placeObjectForSimu GREY_TAPE 0 0 0 0 0 0 1 (VAL @sparkId)))
	 ;; (!(ExecutionManager.handleReport Spark.report @sparkId 1))
		
	 ;;  (?(Spark.PR2_ROBOTHand RIGHT @sparkHand))
	 ;;  (?(Spark.freeId @sparkId))
	 ;;  (=>(Spark.request setGraspedObject GREY_TAPE 1 (VAL @sparkHand) (VAL @sparkId)))
	 ;;  (!(ExecutionManager.handleReport Spark.report @sparkId 1))
		
	 ;;  (?(Spark.freeId @sparkId))
	 ;;  (=>(Spark.request setInferrenceForObject GREY_TAPE 1 PR2_PR2_ROBOT (VAL @sparkHand) SPARK_PRECISE_PR2_ROBOT_HAND 1.0 (VAL @sparkId)))  
	 ;;  (!(ExecutionManager.handleReport Spark.report @sparkId 1))

		(=>(PR2_ROBOT.hasObject RIGHT LOTR_TAPE))

	 ;; (=>(PR2_ROBOT.armPosition RIGHT TABLE_4))
	 
	 (=>(ExecutionManager.execute throw LOTR_TAPE PINK_TRASHBIN 1))
	 )
	)

 (defop |testLispList|
	 :invocation (!(Tester.testLispList))
	 :documentation " "
	 :body (
		(!(= @a (. a b .)))
		(!(= @c (CAR @a)))
		(!(PRINT @c))
		(!(= @b (LAST @a)))
		(!(PRINT @b))
		)
	 )

 (defop |testUnification|
	 :invocation (!(Tester.testUnification))
	 :documentation ""
	 :body (
;	  (!(= @var (action a parameters b) ))
		;; (!(= @var2 (. a b c d .)))	
		;; (!(== (VAL @var2) (. @primo @secondo @terzo @quarto .)))
		;; (!(PRINT @primo))
		;; (!(PRINT @terzo))
;; 	  (! (== (VAL @var) (action @actionName parameters @parameters)))
;; 	     (! (== @action (ACTION-NAME @action-name) (ACTOR @action-actor) (START-TIME @start-time) (END-TIME @end-time) (PARAMETERS @actionParameters)))
;; ;	  (IF(! (== $ACTION (ACTION (ACTION-ID $ACTION-ID) (ACTION-NAME $ACTION-NAME) (ACTOR $ACTOR) (START-TIME $START-TIME) (END-TIME $END-TIME) (PARAMETERS $ActionParams))))
;; ;	    )
;; 	  (!(PRINT @var))
;; 	  (!(PRINT @actionName))
;; 	  (!(PRINT @parameters))


		(!(= @x 3))
		(!(= @y 3))
		(!(= @z 3))

	 (!(= @ax (- @x 0.2)))
	 (!(= @ay (+ @y 0.2)))
	 (!(= @bx (+ @x 0.2)))
	 (!(= @by (+ @y 0.2)))
	 (!(= @cx (- @x 0.2)))
	 (!(= @cy (- @y 0.2)))
	 (!(= @dx (+ @x 0.2)))
	 (!(= @dy (- @y 0.2)))

	 (!(= @list (. @ax @by @z @cx @cy @z @dx @dy @z .)))
		)
	 )

 (defop |breakpoint|
	 :invocation (!(Tester.breakpoint))
	 :documentation "hack to implement breakpoints. The system waits for 5 seconds when it reaches one so you have the time to press halt =) "
	 :body (
		(!(PRINT "breakpoint reached"))
		(^(ELAPSED-TIME(TIME) 5))
		)
	 )
 (defop |testQueue|
	 :invocation (!(Tester.testQueue))
	 :documentation "test the standard operations of the queue"
	 :body (
		(!(Queue.init Tester.queue))
		(!(Queue.push fact Tester.queue))
		(!(Queue.push otherFact Tester.queue))
		(!(Queue.head @head Tester.queue))
		(!(PRINT @head))
		(!(Queue.pop Tester.queue))
		(!(Queue.head @head Tester.queue))
		(!(PRINT @head))
		)
	 )

(defop |testPickPlace|
	:invocation (!(Tester.testPickPlace))
	:body (
	 (!(Controller.initAll))
	 (?(Spark.freeId @sparkId))
	 (=>(Spark.request setGraspedObject BLUE_CUBE2 0 0 (VAL @sparkId)))
;	 (!(ExecutionManager.handleReport Spark.report @sparkId @executionId))

	 (?(Spark.freeId @sparkId))
	 (=>(Spark.request setInferrenceForObject BLUE_CUBE2 0 PR2_PR2_ROBOT 0 SPARK_PRECISE_PR2_ROBOT_HAND 1.0 (VAL @sparkId)))  
;	 (!(ExecutionManager.handleReport Spark.report @sparkId @executionId))
	 
	 (=>(ExecutionManager.execute take BLUE_CUBE2 RIGHT 10))
	 (^(ExecutionManager.report 10 @report))
	 (IF(?(EQUAL @report OK))
		(=>(ExecutionManager.execute place BLUE_CUBE2 TABLE_4 PLACEMAT_GREEN 20))
		)
	 )
	)

 (defop |testPriorityQueue|
	 :invocation(!(Tester.testPriorityQueue))
	 :documentation "thest the standard operations of the priority queue"
	 :body (
		(!(PriorityQueue.init Tester.priorityQueue))
		(!(PriorityQueue.push (. fact 3 .) Tester.priorityQueue))   ;inserimento coda vuota
		(?(Tester.priorityQueue @queue))
		(!(PRINT @queue))
		(!(PriorityQueue.push (. secondFact 6 .) Tester.priorityQueue))  ;inserimento in coda
		(?(Tester.priorityQueue @queue))
		(!(PRINT @queue))
		(!(PriorityQueue.push (. thirdFact 1 .) Tester.priorityQueue))  ;inserimento in testa
		(?(Tester.priorityQueue @queue))
		(!(PRINT @queue))
	 ; (!(= @queue (. (. thirdFact 1 .) (. fact 3 .) (. secondFact 5 .) .)))
	 ; (=> (Tester.priorityQueue @queue))
		(!(PriorityQueue.push (. fourthFact 4 .) Tester.priorityQueue)) ;inserimento secondo posto
		(?(Tester.priorityQueue @queue))
		(!(PRINT @queue))
		(!(PriorityQueue.pop Tester.priorityQueue ))
		(!(PriorityQueue.pop Tester.priorityQueue))
		(!(PriorityQueue.head Tester.priorityQueue @head))
		(!(PRINT @head))
	 )
	 )

 (defop |testLists|
	 :invocation(!(Tester.testLists))
	 :documentation
	 :body (
		(!(= @lista (. factc facte facta .)))
		(!(= @listb (. factf factb factz .)))
		(!(= @uniona (LIST-UNION @lista @listb)))
		(!(= @unionb (LIST-UNION @listb @lista)))
		(!(PRINT @uniona))
		(!(PRINT @unionb))
		)
	 )

 (defop |testMonitorManager|
	 :invocation (!(Tester.testMonitorManager))
	 :documentation
	 :body (
		(!(Controller.initAll))
		(!(= @sparkPR2_ROBOTName PR2_PR2_ROBOT))
		(!(= @executionId 1))
		(!(= @object GREY_TAPE))
		
		(!(= @monitorSuccessConditions (. (. (ExecutionManager.report 1 OK) .) (. .) .)))
		(!(= @monitorFailureConditions  (. (.(ExecutionManager.report 1 FAILURE) .) (. .) .)))
		(!(= @monitorSuccessConditions2 (. (. (ExecutionManager.report 2 OK) .) (. .) .)))
					
					;start the monitoring
			(!(MonitorManager.monitorTarget WALLE_TAPE "NO_NAME" (VAL @monitorSuccessConditions) (VAL @monitorFailureConditions) MEDIUM 1))

		(!(MonitorManager.monitorTarget TABLE_4 "NO_NAME" (VAL @monitorSuccessConditions2) (VAL @monitorFailureConditions) HIGH 2))
		

		)
	 )

 (defop |testCondition|
	 :invocation (!(Tester.testCondition))
	 :documentation
	 :body (
		(!(= @fact (fact a)))
		(!(= @factb (fact b)))
		(!(= @conditions (. @fact @factb .)))
		(!(= @failed FALSE))
		(=> (fact a))
		(=> (fact b))

		)
	 )

 (defop |TestFindList|
	 :invocation(!(Tester.testFindList))
	 :documentation " "
	 :body (

		(!(DatabaseInterface.findList (fact @f) (. @f .) @result))
		(IF(?(~(NULL @result)))

			 (WHILE(?(~(NULL @result)))
			 (!(= @fact (CAR(CAR @result))))
			 (!(PRINT @fact))
			 (!(= @result (CDR @result)))
			 )
			 )

		)
	 )
 
)
