;; -*-Lisp-*-
;;author: Michelangelo Fiore
;;this module contains procedures to handle spark requestes.

(
 (defop |init|
   :invocation (!(Spark.init))
   :documentation "initializes spark"
   :body (
	  (!(SEM-CREATE Spark.sem 1 SEM-FIFO))
	  (=>(Spark.freeId 0))
	  (=>(Spark.freeSphereId 0))
	  (=>(Spark.freeSphereId 1))
	  (=>(Spark.freeSphereId 2))
	  (=>(Spark.freeSphereId 3))
	  (=>(Spark.freeSphereId 4))
	  (=>(Spark.freeSphereId 5))
	  (=>(Spark.freeSphereId 6))
	  (=>(Spark.freeSphereId 7))
	  (=>(Spark.freeSphereId 8))
	  (=>(Spark.freeSphereId 9))
	  )
   )
 
 (defop |getFreeSphereId|
   :invocation(!(Spark.getFreeSphereId $id))
   :body (
	  (!(SEM-P Spark.sem))
	  (?(Spark.freeSphereId $id))
	  (~>(Spark.freeSphereId (VAL $id)))
	  (!(SEM-V Spark.sem))
	  )
   )

(defop |Spark.getFreeId|
   :invocation(!(Spark.getFreeId $id))
   :documentation "gets a new id for requestes"
   :body (
	  (!(SEM-P Spark.sem))
	  (?(Spark.freeId $id))

	  (=>(Spark.freeId (+ $id 1)))
	  (!(SEM-V Spark.sem))
	  )
   )
 (defop |GetJointAbsPose|
   :invocation (Spark.request getJointAbsPose @name @joint @id) 
   :documentation "Returns the coordinates of an spark object joint (Note, if @name refers to an actual object and not to a robot or human @joint is ignored)"
   :body (
	  
	  (!(SEM-P Spark.sem))
	  (=>(Spark.freeId (+ @id 1))) 

	  (!(= @param (STRUCT_SPARK_JOINT_ABS_POS_PARAM 
		       (robotName 
			(name  (TERM-STRING-CAT @name)))
		       
		       (jointName 
			(name  (TERM-STRING-CAT @joint)))
	   )))
	 
	  (!(GenomInterface.handleRequest SPARK SPARK_GETJOINTABSPOSE (Spark.stop (VAL @id)) (FALSE) (FALSE) 300 (VAL @param) @report @result))
	  (=>(Spark.report (VAL @id) (VAL @report)))

	  (IF(?(EQUAL @report "OK"))
	     (!(== (VAL @result)  (POM_EULER 
			     (yaw  @yaw)
			     (pitch  @pitch)
			     (roll  @roll)
			     (x  @x)
			     (y  @y)
			     (z  @z))
		   ))
	     (=>(Spark.result (VAL @id) (VAL @x) (VAL @y) (VAL @z) (VAL @yaw) (VAL @pitch) (VAL @roll)))
	     )
	  (!(SEM-V Spark.sem))

	
	  
	  )
   )

(defop |setGraspedObject|
  :invocation (Spark.request setGraspedObject @objectName @isGrasped @armId @id)
  :documentation "Considers an object grasped by the robot. isGrasped 1,0 . armId=0 rightArm 1=leftArm"
  :body (
	  (!(SEM-P Spark.sem))

	 (=>(Spark.freeId (+ @id 1)))
	 (!(= @param (STRUCT_SPARK_SET_GRASPED_OBJECT_PARAMS 
		     (name 
		      (name  (TERM-STRING-CAT @objectName)))
		      
		      (is_grasping_object  (VAL @isGrasped))
		      (grasped_object_arm_id (VAL @armId) ))))
	 

	 (!(GenomInterface.handleRequest SPARK SPARK_SETGRASPEDOBJECT  (Spark.stop (VAL @id)) (FALSE) (FALSE) 300 (VAL @param) @report @result))
	 (=>(Spark.report (VAL @id) (VAL @report)))
	 (!(SEM-V Spark.sem))
 
	 )
  )



(defop |updateSphereMonitor|
  :invocation(Spark.request updateSphereMonitor @sphereId @activateSphere @objectName @hand @agent @x @y @z @type @id)
  :body (
	 (!(SEM-P Spark.sem))
	 (=>(Spark.freeId (+ @id 1)))
	 

	 (IF(?(EQUAL @activateSphere GEN_FALSE))
	    (=>(Spark.freeSphereId @id))
	    )
	 (!(= @radius 10))
	 
	 (!(= @param (STRUCT_SPARK_ACTION_MONITORING_SPHERE_INPUT_PARAMS 
		      (monitorIndex  @sphereId)
		      (activateSphere  @activateSphere)
		      (objectName 
		       (name  (TERM-STRING-CAT @objectName)))

		      (handIndexInput  @hand)
		      (agentName 
		       (name  (TERM-STRING-CAT @agent)))

		      (sphereCenter 
		       (x  @x)
		       (y  @y)
		       (z  @z))

           (sphereRadius  @radius)
           (sphereRadiusMultiply  1.5)
           (sphereCenterTranslationMultiply  1.0)
           (filteringTimeThreshold  0.0)
           (sphereType  @type))	 
	      ))
	 
	 (!(GenomInterface.handleRequest SPARK SPARK_UPDATESPHEREMONITOR  (Spark.stop (VAL @id)) (FALSE) (FALSE) 300 (VAL @param) @report @result))
	 (=>(Spark.report (VAL @id) (VAL @report)))

	 (!(SEM-V Spark.sem))
	 )
  )

(defop |setInferrenceForObject|
  :invocation (Spark.request setInferrenceForObject @objectName @hasInferrence @agent @agentPart @inferrenceType @multiply @id)
  :documentation "Not clear what it does. Values for inferrenceType :  SPARK_IS_IN SPARK_HUMAN_HAND SPARK_ROUGH_ROBOT_HAND SPARK_PRECISE_ROBOT_HAND SPARK_NO_INFERRENCE"
  :body (
	  (!(SEM-P Spark.sem))
	  
	 (=>(Spark.freeId (+ @id 1)))
	 
	 (!(= @param (STRUCT_SPARK_SET_INFERRENCE_FOR_OBJECT_PARAMS 
			   (objectName 
			    (name  (TERM-STRING-CAT @objectName)))
			    
			    (hasInferrence  (VAL @hasInferrence))
			    (agentOrObjectName 
			     (name  (TERM-STRING-CAT @agent)))

			    (agentPartNum  (VAL @agentPart))
			    (inferrenceType  (VAL @inferrenceType))
			    (perceptionInferrenceConflictThresholdMultiply  (VAL @multiply)))))
	 (!(GenomInterface.handleRequest SPARK SPARK_SETINFERRENCEFOROBJECT  (Spark.stop (VAL @id)) (FALSE) (FALSE) 300 (VAL @param) @report @result))
	 (=>(Spark.report (VAL @id) (VAL @report)))
	 (!(SEM-V Spark.sem))

	  
	 )
  )
(defop |PlaceObject|
  :invocation (Spark.request placeObject @object @x @y @z @yaw @pitch @roll @id)
  :body (
	 (!(SEM-P Spark.sem))
	 
	 (=>(Spark.freeId (+ @id 1)))

	 (!(= @param (STRUCT_SPARK_M3D_OBJECT 
		      (name 
		       (name  (TERM-STRING-CAT @object)))
		      
		      (coords 
		       (x  @x)
		       (y  @y)
		       (z  @z)
		       (yaw  @yaw)
		       (pitch  @pitch)
		       (roll @roll))
		      )))

	   (!(GenomInterface.handleRequest SPARK SPARK_PLACEOBJECT  (Spark.stop (VAL @id)) (FALSE) (FALSE) 300 (VAL @param) @report @result))
	   (=>(Spark.report (VAL @id) (VAL @report)))
	   (!(SEM-V Spark.sem))
	 )
  )

(defop |PlaceObjectForSimu|
  :invocation (Spark.request placeObjectForSimu @object @x @y @z @yaw @pitch @roll @hasDisappeared @id)
  :documentation "Moves an object. What does forSimu mean?"
  :body (
	 (!(SEM-P Spark.sem))
	 
	 (=>(Spark.freeId (+ @id 1)))
	 
	 (!(= @param (STRUCT_SPARK_M3D_OBJECT_SIMU_PARAMS 
		      (name 
		   (name  (TERM-STRING-CAT @object)))
		      
		  (coords 
		   (x  (VAL @x))
		   (y  (VAL @y))
		   (z  (VAL @z))
		   (yaw  (VAL @yaw))
		   (pitch  (VAL @pitch))
		   (roll  (VAL @roll)))
		  
		  (hasDisappeared  (VAL @hasDisappeared)))))

		 (!(GenomInterface.handleRequest SPARK SPARK_PLACEOBJECTFORSIMU  (Spark.stop (VAL @id)) (FALSE) (FALSE) 300 (VAL @param) @report @result))
		 (=>(Spark.report (VAL @id) (VAL @report)))
		 (!(SEM-V Spark.sem))

	 )
  )

(defop |setObjectFixed|
  :invocation(Spark.request setObjectFixed @object @value @id)
  :body (
	 (!(SEM-P Spark.sem))
	 (=>(Spark.freeId (+ @id 1)))
	 (IF(?(EQUAL @value TRUE))
	    (!(= @trueValue GEN_TRUE))
	    
	    ELSE
	    (!(= @trueValue GEN_FALSE))
	    )
	 
	 (!(= @param (STRUCT_SPARK_ENTITY_STATE 
	  (name 
	   (name  (TERM-STRING-CAT @object)))
	  (state  (VAL @trueValue))
	  )))

	 (!(GenomInterface.handleRequest SPARK SPARK_SETOBJECTFIXED  (Spark.stop (VAL @id)) (FALSE) (FALSE) 300 (VAL @param) @report @result))
	 (=>(Spark.report (VAL @id) (VAL @report)))
	 
	 (!(SEM-V Spark.sem))
	 )
  )
(defop |setObjectInHand|
  :invocation(Spark.request setObjectInHand @agent @object @arm @value @id)
  :body (
	 (IF(?(EQUAL @value TRUE))
	      (?(Spark.freeId @sparkId))
	      (=>(Spark.request placeObjectForSimu (VAL @object) 0 0 0 0 0 0 1 (VAL @sparkId)))
	      (!(ExecutionManager.handleReport Spark @sparkId @executionId FALSE NO_NAME))
	      (!(= @flag 1))
	      
	    ELSE 
	    (!(= @flag 0))
	    )
	 
	  (?(Spark.robotHand (VAL @arm) @sparkHand))
	  (?(Spark.robotName @sparkRobotName))

	  (IF(?(~(EQUAL @agent @sparkRobotName)))
	       (!(Spark.getFreeId @sparkId))
	       (=>(Spark.request setInferrenceForObject (VAL @object) (VAL @flag) (VAL @agent) (VAL @sparkHand) SPARK_HUMAN_HAND 1.0 (VAL @sparkId)))  
	       (^(Spark.report @sparkId @report))
	       (~>(Spark.report (VAL @sparkId) @report))	       

	       ELSE
	       (!(Spark.getFreeId @sparkId))
	       (=>(Spark.request setGraspedObject (VAL @object) (VAL @flag) (VAL @sparkHand) (VAL @sparkId)))
	       (^(Spark.report @sparkId @report))
	       (~>(Spark.report (VAL @sparkId) @report))
	       
	       (!(Spark.getFreeId @sparkId))
	       (=>(Spark.request setInferrenceForObject (VAL @object) (VAL @flag) (VAL @agent) (VAL @sparkHand) SPARK_PRECISE_ROBOT_HAND 1.0 (VAL @sparkId)))  
	       (^(Spark.report @sparkId @report))
	       (~>(Spark.report (VAL @sparkId) @report))
	  
	       )
	  
	  (=>(Spark.report @id "OK"))

	  
	 )
  )
)
