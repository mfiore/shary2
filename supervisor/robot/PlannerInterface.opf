;; -*-Lisp-*-
;;author: Michelangelo Fiore
;;this module contains an interface to different planners in order to give plans to the PlanManager in a standard format.

(
 (defop |init|
   :invocation(!(PlannerInterface.init))
   :documentation "Initializes the module"
   :body (
	  (=>(PlannerInterface.freeId hatp 0))
	  )
   )
 
 (defop |getPlan|
   :invocation(PlannerInterface.getPlan @goal @parameters)
   :documentation "Calculates a plan for the goal goal"
   :body (
	  (IF(?(PlannerInterface.usePlanner HATP))
	     (!(PlannerInterface.getHatpPlan @goal @parameters))
	     )
	  )
   )


 (defop |parseHatpTree|
 	:invocation(!(PlannerInterface.parseHatpTree @root @linkList $parsedTree))
 	:body(
 		(?(Robot.name @robotName))
 		;(!(Tester.breakpoint))
 		(!(== (VAL @root) (TASK
 			(TYPE @taskType)
 			(TASK-ID @taskId)
 			(TASK-NAME @hatpTaskName)
 			(ACTORS @actorList)
 			(PARAMETERS @parameters)
 			(SUBNODES @subNodes)
 			)
 		))
 		
 		(IF(?(PlannerInterface.action hatp (VAL @hatpTaskName) @taskName))   
 			(?(PlannerInterface.parameterLinks hatp (VAL @hatpTaskName) @parameterLinks))
 			(?(Actions.nParameters (VAL @taskName) @n))

 			(!(= @i 0))
 			(!(= @actionParameters (. .)))
 			(WHILE(?(< @i @n))
 				(!(= @aLink (CAR @parameterLinks)))
 				(!(= @parameterLinks (CDR @parameterLinks)))

 				(!(PlanManager.getParameter @parameters @aLink @aParameter))
 				(!(= @actionParameters (CONS-TAIL (VAL @aParameter) @actionParameters)))

 				(!(= @i (+ @i 1)))
 				)
 			)


 		(!(= @subNodesList (. .)))
 		(WHILE(?(~(NULL @subNodes)))
 			(!(= @node (CAR @subNodes)))
 			(!(= @subNodes (CDR @subNodes)))
 			(!(PlannerInterface.parseHatpTree @node @linkList @subTree))

 			(!(= @subNodesList (CONS-TAIL (VAL @subTree) @subNodesList)))
 			)

 		;;now we need to scan the LINK-LIST. Since HATP provides a single link list for all the domain while we want that each actions has a list of preconditions we need to scan this list for every action
		;;so we create a backup to update.
		(!(= @tempLinkList (VAL @linkList)))                    
		(!(= @actionLinks (. .)))
		(WHILE(?(~(NULL @tempLinkList)))
			(!(= @currentLink (CAR @tempLinkList)))
			(!(= @tempLinkList (CDR @tempLinkList)))
			    (!(== (VAL @currentLink) (LINK @id1 @id2)))  ;the format in HATP is @id2 follows @id1
			    (IF(?(EQUAL @id2 @taskId))   ;if @id2 is the current action
			       (!(= @actionLinks (CONS-TAIL (VAL @id1) @actionLinks))) ;we add @id1 to the list of preconditions for the aaction
			       )
			    )
		(!(= $parsedTree (TASK
 			 (TYPE (VAL @taskType))
 			 (TASK-ID (VAL @taskId))
 			 (TASK-NAME (VAL @taskName))
 			 (ACTORS (VAL @actorList))
 			 (PARAMETERS (VAL @parameters))
 			 (SUBNODES (VAL @subNodesList))
 			 (LINK-LIST @actionLinks)

 			)

 			))
 		)
	)
	
 	(defop |parseStreams|
 		:invocation(!(PlannerInterface.parseStreams @actionList @linkList $streamPlan))
 		:body (
 			(?(Robot.name @robotName))
 			(!(= @humanActions (. .)))
 			(!(= @robotActions (. .)))

 			(WHILE(?(~(NULL @actionList)))
 				(!(= @currentAction (CAR @actionList))) ;get the current action
 				(!(= @actionList (CDR @actionList)))
 				(!(== (VAL @currentAction) (ACTION 
 					(ACTION-ID @actionId)
 					(ACTION-NAME @hatpActionName)
 					(ACTOR @actor)
 					(START-TIME @startTime)
 					(END-TIME @endTime)
 					(PARAMETERS @parameters)
 					)))

           (IF(?(PlannerInterface.action hatp (VAL @hatpActionName) @actionName))    ;convert the action name from the domain name of hatp to the supervisor domain

           	(?(PlannerInterface.parameterLinks hatp (VAL @hatpActionName) @parameterLinks))

              ;;get the size of the parameters
              (?(Actions.nParameters (VAL @actionName) @n))

              (!(= @i 0))
              (!(= @actionParameters (. .)))
              ;;the parameters of the HATP actions can be in a different order (and also a different number) from the parameters used by supervision. The Db contains a mapping of the indexs.
              ;;We use this mapping now to create a list of parameters in the correct order
              

              (=>(PlanManager.actorAction (VAL @actor) (VAL @actionId)))
              	

              (WHILE(?(< @i @n))
              	(!(= @aLink (CAR @parameterLinks)))
 				(!(= @parameterLinks (CDR @parameterLinks)))

 				(!(PlanManager.getParameter @parameters @aLink @aParameter))
 				(!(= @actionParameters (CONS-TAIL (VAL @aParameter) @actionParameters)))
              	(!(= @i (+ @i 1)))
              	)

              ;;now we need to scan the LINK-LIST. Since HATP provides a single link list for all the domain while we want that each actions has a list of preconditions we need to scan this list for every action
		      ;;so we create a backup to update.
		      (!(= @tempLinkList (VAL @linkList)))                    
		      (!(= @actionLinks (. .)))
		      (WHILE(?(~(NULL @tempLinkList)))
		      	(!(= @currentLink (CAR @tempLinkList)))
		      	(!(= @tempLinkList (CDR @tempLinkList)))
			    (!(== (VAL @currentLink) (LINK @id1 @id2)))  ;the format in HATP is @id2 follows @id1
			    (IF(?(EQUAL @id2 @actionId))   ;if @id2 is the current action
			       (!(= @actionLinks (CONS-TAIL (VAL @id1) @actionLinks))) ;we add @id1 to the list of preconditions for the aaction
			       )
			    )
		      
		      
		      (!(= @action (. (VAL @actionName) (VAL @actionParameters) .)))  
		      (!(= @completeAction (. (VAL @action) (VAL @actionId) (VAL @actionLinks) .)))
		      
		      (IF(?(|| (EQUAL @actor (VAL @robotName)) (EQUAL @actionName handover)))
		      	(!(= @robotActions (CONS-TAIL (VAL @completeAction) @robotActions)))
		      	
		      	ELSE
		      	(!(= @humanActions (CONS-TAIL (VAL @completeAction) @humanActions)))
		      	)
		      
		      )
	)

	(!(= $streamPlan (. (. (VAL @robotName) ROBOT (VAL @robotActions) .) (. HERAKLES_HUMAN1 HUMAN (VAL @humanActions) .) .)))

	)
	)
  
 (defop |getHatpPlan|
   :invocation(!(PlannerInterface.getHatpPlan @goal @parameters))
   :documentation "calls HATP to obtain a plan"
   :body (
	  (?(PlannerInterface.freeId hatp @id))       
	  (=>(PlannerInterface.freeId hatp (+ @id 1)))
      (?(PlannerInterface.bridgeName hatp @hatp))
      (?(Robot.name @robotName))
	  
	  ;;send the request and wait for an answer
	  (!(= @message (HATP-REQ
			 (REQ-TYPE plan)
			 (REQ-ID (VAL @id))
			 (TASK-NAME (VAL @goal))
			 (PARAMETERS (VAL @parameters))
			 )))
	  (!(SEND-MESSAGE @hatp @message))
	  ;; (^(HATP-REP 
	  ;;    (REQ-ID (VAL @id))
	  ;;    (REPORT @report)
	  ;;    (STREAMS
	  ;;    (ACTION-LIST @actionList)
	  ;;    (LINK-LIST @linkList)
	  ;; 	  )
	  ;; 	  (TREE 
	  ;; 	  	(TASK-LIST @taskList)
	  ;; 	  	(LINK-LIST @treeLinkList)
	  ;; 	  )
	  ;; 	  ))
	  (^(HATP-REP 
	     (REQ-ID (VAL @id))
	     (REPORT @report)
	     
	     (ACTION-LIST @actionList)
	     (LINK-LIST @linkList)
	  	  )
	  	  )
	  	  
	  
	  (=>(PlannerInterface.report @report))  ;send the report
	  (IF(?(EQUAL @report OK))  ;if everything is okay we get the plan
	     ;;for now we plan just for an human and a robot but we could generalize it in the future
	     
;	     (!(= @taskList (CAR @taskList)))
	     (!(PlannerInterface.parseStreams @actionList @linkList @streamPlan))
		 
;		 (!(PlannerInterface.parseHatpTree @taskList @linkList @parsedTree)) ;
	 
		   
	     (=>(PlannerInterface.result @streamPlan @parsedTree))
	     ELSE
	     (=>(PlannerInterface.result (.  .)))  ;we have a result
	     )
	  )
   )
	       

 )
