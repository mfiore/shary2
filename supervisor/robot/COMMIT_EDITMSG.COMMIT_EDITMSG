first version of plan monitoring. Still need to test plans received from HATP and full scenarios

# --------------
# Please enter the commit message for your changes. Everything below
# this paragraph is ignored, and an empty message aborts the commit.
# Just close the window to accept your message.
diff --git a/database/Database.opf b/database/Database.opf
index 9f5a192..233b4f6 100644
--- a/database/Database.opf
+++ b/database/Database.opf
@@ -7,6 +7,24 @@
 
 (
 
+
+  (defop |getMonitorId|
+    :invocation (!(Database.getMonitorId $returnId))
+    :body (
+      (IF(?(Database.freeId @id))
+        (!(= $returnId @id ))
+        (=>(Database.freeId (+ @id 1)))
+
+        ELSE
+        (!(= $returnId 0))
+        (=>(Database.freeId 1))
+
+        )
+
+      )
+
+    )
+
  (defop |registerConnection|
    :invocation(Database.connect @name)
    :body (
@@ -215,9 +233,35 @@ $unboundVariables= lisp-list containing the variables for which we want to find
 
 
 
+ (defop |checkMonitoring|
+  :invocation(!(Database.checkMonitoring @receivedFact))
+  :body (
+   (?(Robot.name @robotName))
+   (?(Database.supervisorName @supName))
+
+   (IF(?(toMonitor (VAL @receivedFact) @monitorId))
+     (!(= @ok TRUE))
+     (?(monitorList @factList (VAL @monitorId) @event))
+     (WHILE(?(&(EQUAL @ok TRUE) (~(NULL @factList))))
+       (!(= @ok FALSE))
 
+       (!(= @fact (CAR @factList)))
+       (!(= @factList (CDR @factList)))
 
+       (!(== (VAL @fact) (AGENT-STATEMENT (VAL @robotName) @subject @predicate @value)))
+       (IF(?(AGENT-STATEMENT (VAL @robotName) (VAL @subject) (VAL @predicate) (VAL @value)))
+        (!(= @ok TRUE))
+        )
+       )
+     (IF(?(EQUAL @ok TRUE))
+      (!(SEND-MESSAGE (VAL @supName) (VAL @event)))
+      )
+
+     )
+
+   )
 
+  )
  
  (defop |addLocal|
    :invocation (!(Database.add @fact))
@@ -231,9 +275,8 @@ $unboundVariables= lisp-list containing the variables for which we want to find
 		   (!(= @newFact (CAR @newFactList)))
 		   (!(= @newFactList (CDR @newFactList)))
 		   (=>(VAL @newFact))
-		   (IF(? (toMonitor (VAL @newFact) @event))
-		      (! (SEND-MESSAGE @supName @event))
-              )
+           (!(Database.checkMonitoring @newFact))
+
            (!(== (VAL @newFact) (AGENT-STATEMENT @agent @subject @predicate @value)))
            (IF(?(Database.checkChanges (AGENT-STATEMENT (VAL @agent) (VAL @subject) (VAL @predicate)) @event @caller))
               (!(SEND-MESSAGE @caller (Database.valueChange @event @value)))
@@ -244,10 +287,9 @@ $unboundVariables= lisp-list containing the variables for which we want to find
          (IF(?(Database.checkChanges (AGENT-STATEMENT (VAL @agent) (VAL @subject) (VAL @predicate)) @event @caller))
             (!(SEND-MESSAGE @caller (Database.valueChange @event @value)))
             )
-	     
-	     (IF (? (toMonitor (VAL @fact) @event))
-		 (! (SEND-MESSAGE @supName @event))
-		 )
+
+         (!(Database.checkMonitoring @fact))
+
 
          (IF(?(Database.isConnected @name))
             (!(SEND-MESSAGE @name (Database.nfacts 1)))
@@ -303,15 +345,11 @@ $unboundVariables= lisp-list containing the variables for which we want to find
 	 (WHILE(?(~(NULL @newFactList)))
 	       (!(= @newFact (CAR @newFactList)))
 	       (!(= @newFactList (CDR @newFactList)))
-	       (IF(? (toMonitor (~(VAL @newFact)) @event))
-		  (! (SEND-MESSAGE @supName @event))
-		  )
+           ;(!(Database.checkMonitoring @newFact))
 ;	       (!(PRINT @newFact))
 	       (~>(VAL @newFact))
 	       )
-	 (IF(? (toMonitor (~(VAL @fact)) @event))
-	    (! (SEND-MESSAGE @supName @event))
-	    )
+     ;(!(Database.checkMonitoring @false))
 ;	 (!(PRINT @fact))
 	 (~> (VAL @fact))
      (IF(?(Database.isConnected @name))
@@ -350,28 +388,41 @@ $unboundVariables= lisp-list containing the variables for which we want to find
          )
   )
  (defop |monitorFact|
-   :invocation (Database.addMonitor @factToMonitor @event @caller)
+   :invocation (Database.addMonitor @factsToMonitor @event @caller)
    :documentation "this procedure sets up a monitor for a given fact. When this fact is first added to the Database it returns $eventName to the current kernel. $fact and $event are both composed terms"
    :body (
 	  
-	  (IF (?(toMonitor (VAL @factToMonitor) @anEvent))
+      (IF (?(monitorList (VAL @factsToMonitor) @anEvent))
 	      (!(SEND-MESSAGE @caller (Database.result (. ERROR .))))
 	      
-	      ELSE
-	      (=> (toMonitor (VAL @factToMonitor) (VAL @event)))
+          ELSE
+          (!(Database.getMonitorId @monitorId))
+          (=>(monitorList (VAL @factsToMonitor) (VAL @monitorId) (VAL @event)))
+          (WHILE(?(~(NULL @factsToMonitor)))
+                (!(= @aFact (CAR @factsToMonitor)))
+                (!(= @factsToMonitor (CDR @factsToMonitor)))
+                (=> (toMonitor (VAL @aFact) (VAL @monitorId)))
+                )
+
 	      (!(SEND-MESSAGE @caller (Database.result (. OK .))))
 	      
 	      )	  
 	  )
    )
  (defop |removeMonitorFact|
-   :invocation (Database.removeMonitor @factToMonitor @caller)
+   :invocation (Database.removeMonitor @factsToMonitor @caller)
    :documentation "this procedure removes a monitor for a given fact."
    :body (
-	  
-	  (~> (toMonitor (VAL @factToMonitor) @event))
-	  (!(SEND-MESSAGE @caller (Database.result (. OK .))))	  
-	  )
+
+          (?(monitorList (VAL @factsToMonitor) @monitorId @event))
+          (~>(monitorList (VAL @factsToMonitor) (VAL @monitorId) (VAL @event)))
+
+          (WHILE(?(toMonitor @fact (VAL @monitorId)))
+                (~>(toMonitor (VAL @fact) (VAL @monitorId)))
+                )
+
+          (!(SEND-MESSAGE @caller (Database.result (. OK .))))
+          )
    )
 
 
diff --git a/database/Database.sym b/database/Database.sym
index 5b22288..599d545 100644
--- a/database/Database.sym
+++ b/database/Database.sym
@@ -12,6 +12,7 @@ declare be Database.registerToChanges
 declare be Database.cancelRegisterToChanges
 declare be Database.set
 declare be Database.addSetRemoveFacts
+declare ff Database.freeId 1
 
 declare ff Database.lastAgent 0
 declare cwp AGENT-STATEMENT 
diff --git a/database/Db.inc b/database/Db.inc
index 92ce600..1706b99 100644
--- a/database/Db.inc
+++ b/database/Db.inc
@@ -11,4 +11,4 @@ load opf "database/Tester.opf"
 load db "supervisor/domains/Objects.db"
 load db "database/HatpRules.db"
 
-load db "database/domains/saphari-icsr.db"
+load db "database/domains/greg-icsr.db"
diff --git a/database/Tester.opf b/database/Tester.opf
index 4dfec5d..a6287a9 100644
--- a/database/Tester.opf
+++ b/database/Tester.opf
@@ -1,5 +1,7 @@
 (
 
+ 
+
 (defop |testResetDomain|
        :invocation(!(Tester.resetDomain))
        :body (
diff --git a/database/domains/greg-icsr.db b/database/domains/greg-icsr.db
index 178bb72..1b1368c 100644
--- a/database/domains/greg-icsr.db
+++ b/database/domains/greg-icsr.db
@@ -37,4 +37,16 @@
    (AGENT-STATEMENT PR2_ROBOT Glue_Green glue)
    (AGENT-STATEMENT PR2_ROBOT Polish polish)
    (AGENT-STATEMENT PR2_ROBOT Smoothen smoothen)
+
+   (AGENT-STATEMENT PR2_ROBOT HERAKLES_HUMAN1 knows take (. PICKABLE .) PRACTICAL)
+   (AGENT-STATEMENT PR2_ROBOT HERAKLES_HUMAN1 knows place (. PICKABLE PLACEMENT .) PRACTICAL)
+   (AGENT-STATEMENT PR2_ROBOT HERAKLES_HUMAN1 knows placeOnStack (. CUBE AREA .) PRACTICAL)
+   (AGENT-STATEMENT PR2_ROBOT HERAKLES_HUMAN1 knows applyOperation (. Green_Cube .) PRACTICAL)
+   (AGENT-STATEMENT PR2_ROBOT HERAKLES_HUMAN1 knows applyOperation (. Blue_Cube .) PRACTICAL)
+   (AGENT-STATEMENT PR2_ROBOT HERAKLES_HUMAN1 knows applyOperation (. Red_Cube .) PRACTICAL)
+   (AGENT-STATEMENT PR2_ROBOT HERAKLES_HUMAN1 knows handle (. Green_Cube STACK_PLACEMENT .) PRACTICAL)
+
+
+
+   
 )
\ No newline at end of file
diff --git a/planStreams.dat b/planStreams.dat
deleted file mode 100644
index 7e674ea..0000000
--- a/planStreams.dat
+++ /dev/null
@@ -1,181 +0,0 @@
-<?xml version="1.0" encoding="UTF-8" standalone="no"?>
-<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
- "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
-<!-- Generated by graphviz version 2.26.3 (20100126.1600)
- -->
-<!-- Title: graphForClustersContents Pages: 1 -->
-<svg width="4520pt" height="256pt"
- viewBox="0.00 0.00 4520.00 256.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
-<g id="graph1" class="graph" transform="scale(1 1) rotate(0) translate(4 252)">
-<title>graphForClustersContents</title>
-<polygon fill="white" stroke="white" points="-4,5 -4,-252 4517,-252 4517,5 -4,5"/>
-<!-- node76 -->
-<g id="node2" class="node"><title>node76</title>
-<ellipse fill="#ffffcc" stroke="black" cx="243" cy="-186" rx="239.002" ry="43.8406"/>
-<text text-anchor="middle" x="243" y="-200.4" font-family="Times Roman,serif" font-size="14.00">TakeObject</text>
-<text text-anchor="middle" x="243" y="-182.4" font-family="Times Roman,serif" font-size="14.00">(HERAKLES_HUMAN1 BLUE_CUBE2 TABLE_4 )</text>
-<text text-anchor="middle" x="243" y="-164.4" font-family="Times Roman,serif" font-size="14.00">[0, 1]</text>
-</g>
-<!-- node35 -->
-<g id="node5" class="node"><title>node35</title>
-<ellipse fill="#ffffcc" stroke="black" cx="811" cy="-186" rx="289.207" ry="43.8406"/>
-<text text-anchor="middle" x="811" y="-200.4" font-family="Times Roman,serif" font-size="14.00">PlaceObject</text>
-<text text-anchor="middle" x="811" y="-182.4" font-family="Times Roman,serif" font-size="14.00">(HERAKLES_HUMAN1 BLUE_CUBE2 PLACEMAT_GREEN )</text>
-<text text-anchor="middle" x="811" y="-164.4" font-family="Times Roman,serif" font-size="14.00">[1, 2]</text>
-</g>
-<!-- node76&#45;&gt;node35 -->
-<g id="edge17" class="edge"><title>node76&#45;&gt;node35</title>
-<path fill="none" stroke="#9a32cd" d="M482.237,-186C491.913,-186 501.66,-186 511.431,-186"/>
-<polygon fill="#9a32cd" stroke="#9a32cd" points="521.621,-186 511.621,-190.5 516.621,-186 511.621,-186 511.621,-186 511.621,-186 516.621,-186 511.621,-181.5 521.621,-186 521.621,-186"/>
-</g>
-<!-- node18 -->
-<g id="node3" class="node"><title>node18</title>
-<ellipse fill="#cce6ff" stroke="black" cx="243" cy="-44" rx="242.038" ry="43.8406"/>
-<text text-anchor="middle" x="243" y="-58.4" font-family="Times Roman,serif" font-size="14.00">TakeObject</text>
-<text text-anchor="middle" x="243" y="-40.4" font-family="Times Roman,serif" font-size="14.00">(PR2_ROBOT BLUE_CUBE PLACEMAT_GREEN )</text>
-<text text-anchor="middle" x="243" y="-22.4" font-family="Times Roman,serif" font-size="14.00">[0, 1]</text>
-</g>
-<!-- node6 -->
-<g id="node6" class="node"><title>node6</title>
-<ellipse fill="#cce6ff" stroke="black" cx="811" cy="-44" rx="230.017" ry="43.8406"/>
-<text text-anchor="middle" x="811" y="-58.4" font-family="Times Roman,serif" font-size="14.00">ThrowObject</text>
-<text text-anchor="middle" x="811" y="-40.4" font-family="Times Roman,serif" font-size="14.00">(PR2_ROBOT BLUE_CUBE BLUE_TRASHBIN )</text>
-<text text-anchor="middle" x="811" y="-22.4" font-family="Times Roman,serif" font-size="14.00">[1, 2]</text>
-</g>
-<!-- node18&#45;&gt;node6 -->
-<g id="edge10" class="edge"><title>node18&#45;&gt;node6</title>
-<path fill="none" stroke="#9a32cd" d="M485.531,-44C513.459,-44 541.935,-44 569.845,-44"/>
-<polygon fill="#9a32cd" stroke="#9a32cd" points="580.101,-44 570.101,-48.5001 575.101,-44 570.101,-44.0001 570.101,-44.0001 570.101,-44.0001 575.101,-44 570.101,-39.5001 580.101,-44 580.101,-44"/>
-</g>
-<!-- node89 -->
-<g id="node8" class="node"><title>node89</title>
-<ellipse fill="#ffffcc" stroke="black" cx="1394" cy="-150" rx="241.123" ry="43.8406"/>
-<text text-anchor="middle" x="1394" y="-164.4" font-family="Times Roman,serif" font-size="14.00">TakeObject</text>
-<text text-anchor="middle" x="1394" y="-146.4" font-family="Times Roman,serif" font-size="14.00">(HERAKLES_HUMAN1 GREEN_CUBE TABLE_4 )</text>
-<text text-anchor="middle" x="1394" y="-128.4" font-family="Times Roman,serif" font-size="14.00">[2, 3]</text>
-</g>
-<!-- node35&#45;&gt;node89 -->
-<g id="edge12" class="edge"><title>node35&#45;&gt;node89</title>
-<path fill="none" stroke="#9a32cd" d="M1079.04,-169.449C1104.52,-167.875 1130.24,-166.287 1155.41,-164.733"/>
-<polygon fill="#9a32cd" stroke="#9a32cd" points="1165.41,-164.115 1155.71,-169.223 1160.42,-164.424 1155.43,-164.732 1155.43,-164.732 1155.43,-164.732 1160.42,-164.424 1155.15,-160.24 1165.41,-164.115 1165.41,-164.115"/>
-</g>
-<!-- node36 -->
-<g id="node15" class="node"><title>node36</title>
-<ellipse fill="#cce6ff" stroke="black" cx="2551" cy="-204" rx="248.902" ry="43.8406"/>
-<text text-anchor="middle" x="2551" y="-218.4" font-family="Times Roman,serif" font-size="14.00">TakeObject</text>
-<text text-anchor="middle" x="2551" y="-200.4" font-family="Times Roman,serif" font-size="14.00">(PR2_ROBOT BLUE_CUBE2 PLACEMAT_GREEN )</text>
-<text text-anchor="middle" x="2551" y="-182.4" font-family="Times Roman,serif" font-size="14.00">[4, 5]</text>
-</g>
-<!-- node35&#45;&gt;node36 -->
-<g id="edge11" class="edge"><title>node35&#45;&gt;node36</title>
-<path fill="none" stroke="#9a32cd" d="M1082.28,-201.238C1100.46,-201.935 1118.49,-202.536 1136,-203 1539.94,-213.7 2008.96,-211.063 2292.67,-207.81"/>
-<polygon fill="#9a32cd" stroke="#9a32cd" points="2302.69,-207.694 2292.74,-212.31 2297.69,-207.752 2292.69,-207.81 2292.69,-207.81 2292.69,-207.81 2297.69,-207.752 2292.64,-203.31 2302.69,-207.694 2302.69,-207.694"/>
-</g>
-<!-- node73 -->
-<g id="node9" class="node"><title>node73</title>
-<ellipse fill="#cce6ff" stroke="black" cx="1394" cy="-44" rx="258.094" ry="43.8406"/>
-<text text-anchor="middle" x="1394" y="-58.4" font-family="Times Roman,serif" font-size="14.00">TakeObject</text>
-<text text-anchor="middle" x="1394" y="-40.4" font-family="Times Roman,serif" font-size="14.00">(PR2_ROBOT GREEN_CUBE2 PLACEMAT_GREEN )</text>
-<text text-anchor="middle" x="1394" y="-22.4" font-family="Times Roman,serif" font-size="14.00">[2, 3]</text>
-</g>
-<!-- node6&#45;&gt;node73 -->
-<g id="edge9" class="edge"><title>node6&#45;&gt;node73</title>
-<path fill="none" stroke="#9a32cd" d="M1041.84,-44C1069.32,-44 1097.55,-44 1125.5,-44"/>
-<polygon fill="#9a32cd" stroke="#9a32cd" points="1135.78,-44 1125.78,-48.5001 1130.78,-44 1125.78,-44.0001 1125.78,-44.0001 1125.78,-44.0001 1130.78,-44 1125.78,-39.5001 1135.78,-44 1135.78,-44"/>
-</g>
-<!-- node83 -->
-<g id="node11" class="node"><title>node83</title>
-<ellipse fill="#ffffcc" stroke="black" cx="1977" cy="-150" rx="289.207" ry="43.8406"/>
-<text text-anchor="middle" x="1977" y="-164.4" font-family="Times Roman,serif" font-size="14.00">ThrowObject</text>
-<text text-anchor="middle" x="1977" y="-146.4" font-family="Times Roman,serif" font-size="14.00">(HERAKLES_HUMAN1 GREEN_CUBE GREEN_TRASHBIN )</text>
-<text text-anchor="middle" x="1977" y="-128.4" font-family="Times Roman,serif" font-size="14.00">[3, 4]</text>
-</g>
-<!-- node89&#45;&gt;node83 -->
-<g id="edge19" class="edge"><title>node89&#45;&gt;node83</title>
-<path fill="none" stroke="#9a32cd" d="M1635.34,-150C1649.33,-150 1663.48,-150 1677.65,-150"/>
-<polygon fill="#9a32cd" stroke="#9a32cd" points="1687.97,-150 1677.97,-154.5 1682.97,-150 1677.97,-150 1677.97,-150 1677.97,-150 1682.97,-150 1677.97,-145.5 1687.97,-150 1687.97,-150"/>
-</g>
-<!-- node74 -->
-<g id="node12" class="node"><title>node74</title>
-<ellipse fill="#cce6ff" stroke="black" cx="1977" cy="-44" rx="207.182" ry="43.8406"/>
-<text text-anchor="middle" x="1977" y="-58.4" font-family="Times Roman,serif" font-size="14.00">PlaceObject</text>
-<text text-anchor="middle" x="1977" y="-40.4" font-family="Times Roman,serif" font-size="14.00">(PR2_ROBOT GREEN_CUBE2 TABLE_4 )</text>
-<text text-anchor="middle" x="1977" y="-22.4" font-family="Times Roman,serif" font-size="14.00">[3, 4]</text>
-</g>
-<!-- node73&#45;&gt;node74 -->
-<g id="edge14" class="edge"><title>node73&#45;&gt;node74</title>
-<path fill="none" stroke="#9a32cd" d="M1652.26,-44C1688.02,-44 1724.45,-44 1759.38,-44"/>
-<polygon fill="#9a32cd" stroke="#9a32cd" points="1769.67,-44 1759.67,-48.5001 1764.67,-44 1759.67,-44.0001 1759.67,-44.0001 1759.67,-44.0001 1764.67,-44 1759.67,-39.5001 1769.67,-44 1769.67,-44"/>
-</g>
-<!-- node99 -->
-<g id="node14" class="node"><title>node99</title>
-<ellipse fill="#ffffcc" stroke="black" cx="2551" cy="-80" rx="246.987" ry="43.8406"/>
-<text text-anchor="middle" x="2551" y="-94.4" font-family="Times Roman,serif" font-size="14.00">TakeObject</text>
-<text text-anchor="middle" x="2551" y="-76.4" font-family="Times Roman,serif" font-size="14.00">(HERAKLES_HUMAN1 GREEN_CUBE2 TABLE_4 )</text>
-<text text-anchor="middle" x="2551" y="-58.4" font-family="Times Roman,serif" font-size="14.00">[4, 5]</text>
-</g>
-<!-- node83&#45;&gt;node99 -->
-<g id="edge18" class="edge"><title>node83&#45;&gt;node99</title>
-<path fill="none" stroke="#9a32cd" d="M2202.62,-122.485C2246.74,-117.104 2292.89,-111.476 2336.63,-106.142"/>
-<polygon fill="#9a32cd" stroke="#9a32cd" points="2346.81,-104.901 2337.43,-110.579 2341.85,-105.507 2336.88,-106.112 2336.88,-106.112 2336.88,-106.112 2341.85,-105.507 2336.34,-101.645 2346.81,-104.901 2346.81,-104.901"/>
-</g>
-<!-- node74&#45;&gt;node99 -->
-<g id="edge16" class="edge"><title>node74&#45;&gt;node99</title>
-<path fill="none" stroke="#9a32cd" d="M2175.74,-56.4648C2218.12,-59.1223 2263.33,-61.9581 2307.17,-64.7077"/>
-<polygon fill="#9a32cd" stroke="#9a32cd" points="2317.39,-65.3486 2307.13,-69.2137 2312.4,-65.0355 2307.41,-64.7225 2307.41,-64.7225 2307.41,-64.7225 2312.4,-65.0355 2307.69,-60.2313 2317.39,-65.3486 2317.39,-65.3486"/>
-</g>
-<!-- node74&#45;&gt;node36 -->
-<g id="edge15" class="edge"><title>node74&#45;&gt;node36</title>
-<path fill="none" stroke="#9a32cd" d="M2166.73,-61.859C2201.01,-69.7479 2235.51,-80.9967 2266,-97 2286.03,-107.517 2282.5,-121.53 2302,-133 2325.55,-146.851 2351.96,-158.127 2378.54,-167.27"/>
-<polygon fill="#9a32cd" stroke="#9a32cd" points="2388.33,-170.543 2377.42,-171.641 2383.59,-168.958 2378.85,-167.373 2378.85,-167.373 2378.85,-167.373 2383.59,-168.958 2380.27,-163.105 2388.33,-170.543 2388.33,-170.543"/>
-</g>
-<!-- node96 -->
-<g id="node17" class="node"><title>node96</title>
-<ellipse fill="#ffffcc" stroke="black" cx="3132" cy="-80" rx="295.071" ry="43.8406"/>
-<text text-anchor="middle" x="3132" y="-94.4" font-family="Times Roman,serif" font-size="14.00">ThrowObject</text>
-<text text-anchor="middle" x="3132" y="-76.4" font-family="Times Roman,serif" font-size="14.00">(HERAKLES_HUMAN1 GREEN_CUBE2 GREEN_TRASHBIN )</text>
-<text text-anchor="middle" x="3132" y="-58.4" font-family="Times Roman,serif" font-size="14.00">[5, 6]</text>
-</g>
-<!-- node99&#45;&gt;node96 -->
-<g id="edge21" class="edge"><title>node99&#45;&gt;node96</title>
-<path fill="none" stroke="#9a32cd" d="M2798.66,-80C2807.84,-80 2817.08,-80 2826.34,-80"/>
-<polygon fill="#9a32cd" stroke="#9a32cd" points="2836.39,-80 2826.39,-84.5001 2831.39,-80 2826.39,-80.0001 2826.39,-80.0001 2826.39,-80.0001 2831.39,-80 2826.39,-75.5001 2836.39,-80 2836.39,-80"/>
-</g>
-<!-- node22 -->
-<g id="node18" class="node"><title>node22</title>
-<ellipse fill="#cce6ff" stroke="black" cx="3132" cy="-204" rx="236.881" ry="43.8406"/>
-<text text-anchor="middle" x="3132" y="-218.4" font-family="Times Roman,serif" font-size="14.00">ThrowObject</text>
-<text text-anchor="middle" x="3132" y="-200.4" font-family="Times Roman,serif" font-size="14.00">(PR2_ROBOT BLUE_CUBE2 BLUE_TRASHBIN )</text>
-<text text-anchor="middle" x="3132" y="-182.4" font-family="Times Roman,serif" font-size="14.00">[5, 6]</text>
-</g>
-<!-- node36&#45;&gt;node22 -->
-<g id="edge13" class="edge"><title>node36&#45;&gt;node22</title>
-<path fill="none" stroke="#9a32cd" d="M2800.35,-204C2828.31,-204 2856.78,-204 2884.72,-204"/>
-<polygon fill="#9a32cd" stroke="#9a32cd" points="2894.98,-204 2884.98,-208.5 2889.98,-204 2884.98,-204 2884.98,-204 2884.98,-204 2889.98,-204 2884.98,-199.5 2894.98,-204 2894.98,-204"/>
-</g>
-<!-- node109 -->
-<g id="node20" class="node"><title>node109</title>
-<ellipse fill="#ffffcc" stroke="black" cx="3692" cy="-80" rx="227.188" ry="43.8406"/>
-<text text-anchor="middle" x="3692" y="-94.4" font-family="Times Roman,serif" font-size="14.00">TakeObject</text>
-<text text-anchor="middle" x="3692" y="-76.4" font-family="Times Roman,serif" font-size="14.00">(HERAKLES_HUMAN1 RED_CUBE TABLE_4 )</text>
-<text text-anchor="middle" x="3692" y="-58.4" font-family="Times Roman,serif" font-size="14.00">[6, 7]</text>
-</g>
-<!-- node96&#45;&gt;node109 -->
-<g id="edge20" class="edge"><title>node96&#45;&gt;node109</title>
-<path fill="none" stroke="#9a32cd" d="M3427.58,-80C3436.56,-80 3445.51,-80 3454.41,-80"/>
-<polygon fill="#9a32cd" stroke="#9a32cd" points="3464.43,-80 3454.43,-84.5001 3459.43,-80 3454.43,-80.0001 3454.43,-80.0001 3454.43,-80.0001 3459.43,-80 3454.43,-75.5001 3464.43,-80 3464.43,-80"/>
-</g>
-<!-- node106 -->
-<g id="node22" class="node"><title>node106</title>
-<ellipse fill="#ffffcc" stroke="black" cx="4234" cy="-80" rx="277.893" ry="43.8406"/>
-<text text-anchor="middle" x="4234" y="-94.4" font-family="Times Roman,serif" font-size="14.00">PlaceObject</text>
-<text text-anchor="middle" x="4234" y="-76.4" font-family="Times Roman,serif" font-size="14.00">(HERAKLES_HUMAN1 RED_CUBE PLACEMAT_GREEN )</text>
-<text text-anchor="middle" x="4234" y="-58.4" font-family="Times Roman,serif" font-size="14.00">[7, 8]</text>
-</g>
-<!-- node109&#45;&gt;node106 -->
-<g id="edge22" class="edge"><title>node109&#45;&gt;node106</title>
-<path fill="none" stroke="#9a32cd" d="M3919.5,-80C3928.14,-80 3936.84,-80 3945.57,-80"/>
-<polygon fill="#9a32cd" stroke="#9a32cd" points="3955.82,-80 3945.82,-84.5001 3950.82,-80 3945.82,-80.0001 3945.82,-80.0001 3945.82,-80.0001 3950.82,-80 3945.82,-75.5001 3955.82,-80 3955.82,-80"/>
-</g>
-</g>
-</svg>
diff --git a/planStreams.svg b/planStreams.svg
index 3b09fdf..343249e 100644
--- a/planStreams.svg
+++ b/planStreams.svg
@@ -4,217 +4,257 @@
 <!-- Generated by graphviz version 2.26.3 (20100126.1600)
  -->
 <!-- Title: graphForClustersContents Pages: 1 -->
-<svg width="6464pt" height="204pt"
- viewBox="0.00 0.00 6464.00 204.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
-<g id="graph1" class="graph" transform="scale(1 1) rotate(0) translate(4 200)">
+<svg width="8016pt" height="202pt"
+ viewBox="0.00 0.00 8016.00 202.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
+<g id="graph1" class="graph" transform="scale(1 1) rotate(0) translate(4 198)">
 <title>graphForClustersContents</title>
-<polygon fill="white" stroke="white" points="-4,5 -4,-200 6461,-200 6461,5 -4,5"/>
-<!-- node13 -->
-<g id="node2" class="node"><title>node13</title>
-<ellipse fill="#ffffcc" stroke="black" cx="253" cy="-152" rx="226.981" ry="43.8406"/>
-<text text-anchor="middle" x="253" y="-166.4" font-family="Times Roman,serif" font-size="14.00">TravelTo</text>
-<text text-anchor="middle" x="253" y="-148.4" font-family="Times Roman,serif" font-size="14.00">(HERAKLES_HUMAN1 WORK_LOCATION_1 )</text>
-<text text-anchor="middle" x="253" y="-130.4" font-family="Times Roman,serif" font-size="14.00">[0, 10]</text>
-</g>
-<!-- node14 -->
-<g id="node5" class="node"><title>node14</title>
-<ellipse fill="#ffffcc" stroke="black" cx="784" cy="-152" rx="241.831" ry="43.8406"/>
-<text text-anchor="middle" x="784" y="-166.4" font-family="Times Roman,serif" font-size="14.00">Clean</text>
-<text text-anchor="middle" x="784" y="-148.4" font-family="Times Roman,serif" font-size="14.00">(HERAKLES_HUMAN1 ASSEMBLY_SURFACE_1 )</text>
-<text text-anchor="middle" x="784" y="-130.4" font-family="Times Roman,serif" font-size="14.00">[10, 30]</text>
-</g>
-<!-- node13&#45;&gt;node14 -->
-<g id="edge13" class="edge"><title>node13&#45;&gt;node14</title>
-<path fill="none" stroke="#9a32cd" d="M480.117,-152C497.189,-152 514.477,-152 531.691,-152"/>
-<polygon fill="#9a32cd" stroke="#9a32cd" points="541.815,-152 531.815,-156.5 536.815,-152 531.815,-152 531.815,-152 531.815,-152 536.815,-152 531.815,-147.5 541.815,-152 541.815,-152"/>
-</g>
-<!-- node15 -->
-<g id="node3" class="node"><title>node15</title>
-<ellipse fill="#cce6ff" stroke="black" cx="253" cy="-44" rx="251.937" ry="43.8406"/>
-<text text-anchor="middle" x="253" y="-58.4" font-family="Times Roman,serif" font-size="14.00">Pick</text>
-<text text-anchor="middle" x="253" y="-40.4" font-family="Times Roman,serif" font-size="14.00">(PR2_ROBOT GLUE_BOTTLE PLACEMENT_ST_4 )</text>
-<text text-anchor="middle" x="253" y="-22.4" font-family="Times Roman,serif" font-size="14.00">[0, 10]</text>
-</g>
-<!-- node16 -->
-<g id="node6" class="node"><title>node16</title>
-<ellipse fill="#cce6ff" stroke="black" cx="784" cy="-44" rx="186.176" ry="43.8406"/>
-<text text-anchor="middle" x="784" y="-58.4" font-family="Times Roman,serif" font-size="14.00">TravelTo</text>
-<text text-anchor="middle" x="784" y="-40.4" font-family="Times Roman,serif" font-size="14.00">(PR2_ROBOT WORK_LOCATION_1 )</text>
-<text text-anchor="middle" x="784" y="-22.4" font-family="Times Roman,serif" font-size="14.00">[10, 20]</text>
-</g>
-<!-- node15&#45;&gt;node16 -->
-<g id="edge16" class="edge"><title>node15&#45;&gt;node16</title>
-<path fill="none" stroke="#9a32cd" d="M505.67,-44C533.052,-44 560.615,-44 587.193,-44"/>
-<polygon fill="#9a32cd" stroke="#9a32cd" points="597.329,-44 587.329,-48.5001 592.329,-44 587.329,-44.0001 587.329,-44.0001 587.329,-44.0001 592.329,-44 587.328,-39.5001 597.329,-44 597.329,-44"/>
-</g>
+<polygon fill="white" stroke="white" points="-4,5 -4,-198 8013,-198 8013,5 -4,5"/>
 <!-- node18 -->
-<g id="node10" class="node"><title>node18</title>
-<ellipse fill="#ffffcc" stroke="black" cx="1927" cy="-46" rx="302.141" ry="43.8406"/>
-<text text-anchor="middle" x="1927" y="-60.4" font-family="Times Roman,serif" font-size="14.00">Pick</text>
-<text text-anchor="middle" x="1927" y="-42.4" font-family="Times Roman,serif" font-size="14.00">(HERAKLES_HUMAN1 GLUE_BOTTLE PLACEMENT_WL1_1 )</text>
-<text text-anchor="middle" x="1927" y="-24.4" font-family="Times Roman,serif" font-size="14.00">[30, 40]</text>
-</g>
-<!-- node14&#45;&gt;node18 -->
-<g id="edge14" class="edge"><title>node14&#45;&gt;node18</title>
-<path fill="none" stroke="#9a32cd" d="M1018.4,-140.985C1179.01,-132.208 1396.76,-117.892 1588,-97 1629.49,-92.4674 1673.69,-86.591 1716,-80.4471"/>
-<polygon fill="#9a32cd" stroke="#9a32cd" points="1726.13,-78.9649 1716.89,-84.8645 1721.19,-79.6883 1716.24,-80.4118 1716.24,-80.4118 1716.24,-80.4118 1721.19,-79.6883 1715.59,-75.9592 1726.13,-78.9649 1726.13,-78.9649"/>
+<g id="node2" class="node"><title>node18</title>
+<ellipse fill="#cce6ff" stroke="black" cx="188" cy="-150" rx="186.884" ry="43.8406"/>
+<text text-anchor="middle" x="188" y="-164.4" font-family="Times Roman,serif" font-size="14.00">Pick</text>
+<text text-anchor="middle" x="188" y="-146.4" font-family="Times Roman,serif" font-size="14.00">(HERAKLES_HUMAN1 Green_Cube )</text>
+<text text-anchor="middle" x="188" y="-128.4" font-family="Times Roman,serif" font-size="14.00">[0, 6]</text>
+</g>
+<!-- node21 -->
+<g id="node5" class="node"><title>node21</title>
+<ellipse fill="#cce6ff" stroke="black" cx="678" cy="-150" rx="265.872" ry="43.8406"/>
+<text text-anchor="middle" x="678" y="-164.4" font-family="Times Roman,serif" font-size="14.00">Place</text>
+<text text-anchor="middle" x="678" y="-146.4" font-family="Times Roman,serif" font-size="14.00">(HERAKLES_HUMAN1 Green_Cube SmoothingArea )</text>
+<text text-anchor="middle" x="678" y="-128.4" font-family="Times Roman,serif" font-size="14.00">[6, 12]</text>
+</g>
+<!-- node18&#45;&gt;node21 -->
+<g id="edge23" class="edge"><title>node18&#45;&gt;node21</title>
+<path fill="none" stroke="#9a32cd" d="M375.695,-150C384.235,-150 392.873,-150 401.565,-150"/>
+<polygon fill="#9a32cd" stroke="#9a32cd" points="411.79,-150 401.79,-154.5 406.79,-150 401.79,-150 401.79,-150 401.79,-150 406.79,-150 401.79,-145.5 411.79,-150 411.79,-150"/>
+</g>
+<!-- node7 -->
+<g id="node3" class="node"><title>node7</title>
+<ellipse fill="#ffffcc" stroke="black" cx="188" cy="-44" rx="138.093" ry="43.8406"/>
+<text text-anchor="middle" x="188" y="-58.4" font-family="Times Roman,serif" font-size="14.00">Pick</text>
+<text text-anchor="middle" x="188" y="-40.4" font-family="Times Roman,serif" font-size="14.00">(PR2_ROBOT Blue_Cube )</text>
+<text text-anchor="middle" x="188" y="-22.4" font-family="Times Roman,serif" font-size="14.00">[0, 6]</text>
+</g>
+<!-- node10 -->
+<g id="node6" class="node"><title>node10</title>
+<ellipse fill="#ffffcc" stroke="black" cx="678" cy="-44" rx="225.067" ry="43.8406"/>
+<text text-anchor="middle" x="678" y="-58.4" font-family="Times Roman,serif" font-size="14.00">Place</text>
+<text text-anchor="middle" x="678" y="-40.4" font-family="Times Roman,serif" font-size="14.00">(PR2_ROBOT Blue_Cube RagCleaningArea )</text>
+<text text-anchor="middle" x="678" y="-22.4" font-family="Times Roman,serif" font-size="14.00">[6, 12]</text>
+</g>
+<!-- node7&#45;&gt;node10 -->
+<g id="edge18" class="edge"><title>node7&#45;&gt;node10</title>
+<path fill="none" stroke="#9a32cd" d="M326.776,-44C362.776,-44 402.57,-44 442.05,-44"/>
+<polygon fill="#9a32cd" stroke="#9a32cd" points="452.078,-44 442.078,-48.5001 447.078,-44 442.078,-44.0001 442.078,-44.0001 442.078,-44.0001 447.078,-44 442.078,-39.5001 452.078,-44 452.078,-44"/>
+</g>
+<!-- node22 -->
+<g id="node8" class="node"><title>node22</title>
+<ellipse fill="#cce6ff" stroke="black" cx="1299" cy="-150" rx="318.905" ry="43.8406"/>
+<text text-anchor="middle" x="1299" y="-164.4" font-family="Times Roman,serif" font-size="14.00">Apply</text>
+<text text-anchor="middle" x="1299" y="-146.4" font-family="Times Roman,serif" font-size="14.00">(HERAKLES_HUMAN1 Green_Cube Smoothen SmoothingArea )</text>
+<text text-anchor="middle" x="1299" y="-128.4" font-family="Times Roman,serif" font-size="14.00">[12, 18]</text>
+</g>
+<!-- node21&#45;&gt;node22 -->
+<g id="edge24" class="edge"><title>node21&#45;&gt;node22</title>
+<path fill="none" stroke="#9a32cd" d="M944.062,-150C952.58,-150 961.144,-150 969.727,-150"/>
+<polygon fill="#9a32cd" stroke="#9a32cd" points="979.809,-150 969.809,-154.5 974.809,-150 969.809,-150 969.809,-150 969.809,-150 974.809,-150 969.809,-145.5 979.809,-150 979.809,-150"/>
+</g>
+<!-- node11 -->
+<g id="node9" class="node"><title>node11</title>
+<ellipse fill="#ffffcc" stroke="black" cx="1299" cy="-44" rx="255.973" ry="43.8406"/>
+<text text-anchor="middle" x="1299" y="-58.4" font-family="Times Roman,serif" font-size="14.00">Apply</text>
+<text text-anchor="middle" x="1299" y="-40.4" font-family="Times Roman,serif" font-size="14.00">(PR2_ROBOT Blue_Cube Clean RagCleaningArea )</text>
+<text text-anchor="middle" x="1299" y="-22.4" font-family="Times Roman,serif" font-size="14.00">[12, 18]</text>
+</g>
+<!-- node10&#45;&gt;node11 -->
+<g id="edge19" class="edge"><title>node10&#45;&gt;node11</title>
+<path fill="none" stroke="#9a32cd" d="M903.513,-44C945.518,-44 989.771,-44 1032.86,-44"/>
+<polygon fill="#9a32cd" stroke="#9a32cd" points="1042.91,-44 1032.91,-48.5001 1037.91,-44 1032.91,-44.0001 1032.91,-44.0001 1032.91,-44.0001 1037.91,-44 1032.91,-39.5001 1042.91,-44 1042.91,-44"/>
+</g>
+<!-- node23 -->
+<g id="node11" class="node"><title>node23</title>
+<ellipse fill="#cce6ff" stroke="black" cx="1842" cy="-150" rx="186.884" ry="43.8406"/>
+<text text-anchor="middle" x="1842" y="-164.4" font-family="Times Roman,serif" font-size="14.00">Pick</text>
+<text text-anchor="middle" x="1842" y="-146.4" font-family="Times Roman,serif" font-size="14.00">(HERAKLES_HUMAN1 Green_Cube )</text>
+<text text-anchor="middle" x="1842" y="-128.4" font-family="Times Roman,serif" font-size="14.00">[18, 24]</text>
+</g>
+<!-- node22&#45;&gt;node23 -->
+<g id="edge25" class="edge"><title>node22&#45;&gt;node23</title>
+<path fill="none" stroke="#9a32cd" d="M1618.01,-150C1626.8,-150 1635.53,-150 1644.14,-150"/>
+<polygon fill="#9a32cd" stroke="#9a32cd" points="1654.21,-150 1644.21,-154.5 1649.21,-150 1644.21,-150 1644.21,-150 1644.21,-150 1649.21,-150 1644.21,-145.5 1654.21,-150 1654.21,-150"/>
+</g>
+<!-- node12 -->
+<g id="node12" class="node"><title>node12</title>
+<ellipse fill="#ffffcc" stroke="black" cx="1842" cy="-44" rx="138.093" ry="43.8406"/>
+<text text-anchor="middle" x="1842" y="-58.4" font-family="Times Roman,serif" font-size="14.00">Pick</text>
+<text text-anchor="middle" x="1842" y="-40.4" font-family="Times Roman,serif" font-size="14.00">(PR2_ROBOT Blue_Cube )</text>
+<text text-anchor="middle" x="1842" y="-22.4" font-family="Times Roman,serif" font-size="14.00">[18, 24]</text>
+</g>
+<!-- node11&#45;&gt;node12 -->
+<g id="edge20" class="edge"><title>node11&#45;&gt;node12</title>
+<path fill="none" stroke="#9a32cd" d="M1555.39,-44C1602.55,-44 1650.32,-44 1692.98,-44"/>
+<polygon fill="#9a32cd" stroke="#9a32cd" points="1703.14,-44 1693.14,-48.5001 1698.14,-44 1693.14,-44.0001 1693.14,-44.0001 1693.14,-44.0001 1698.14,-44 1693.14,-39.5001 1703.14,-44 1703.14,-44"/>
+</g>
+<!-- node26 -->
+<g id="node14" class="node"><title>node26</title>
+<ellipse fill="#cce6ff" stroke="black" cx="2312" cy="-150" rx="244.866" ry="43.8406"/>
+<text text-anchor="middle" x="2312" y="-164.4" font-family="Times Roman,serif" font-size="14.00">Place</text>
+<text text-anchor="middle" x="2312" y="-146.4" font-family="Times Roman,serif" font-size="14.00">(HERAKLES_HUMAN1 Green_Cube GluingArea )</text>
+<text text-anchor="middle" x="2312" y="-128.4" font-family="Times Roman,serif" font-size="14.00">[24, 30]</text>
+</g>
+<!-- node23&#45;&gt;node26 -->
+<g id="edge26" class="edge"><title>node23&#45;&gt;node26</title>
+<path fill="none" stroke="#9a32cd" d="M2029.78,-150C2038.51,-150 2047.34,-150 2056.2,-150"/>
+<polygon fill="#9a32cd" stroke="#9a32cd" points="2066.22,-150 2056.22,-154.5 2061.22,-150 2056.22,-150 2056.22,-150 2056.22,-150 2061.22,-150 2056.22,-145.5 2066.22,-150 2066.22,-150"/>
+</g>
+<!-- node6 -->
+<g id="node15" class="node"><title>node6</title>
+<ellipse fill="#ffffcc" stroke="black" cx="2312" cy="-44" rx="191.126" ry="43.8406"/>
+<text text-anchor="middle" x="2312" y="-58.4" font-family="Times Roman,serif" font-size="14.00">PlaceOnStack</text>
+<text text-anchor="middle" x="2312" y="-40.4" font-family="Times Roman,serif" font-size="14.00">(PR2_ROBOT Blue_Cube StackArea )</text>
+<text text-anchor="middle" x="2312" y="-22.4" font-family="Times Roman,serif" font-size="14.00">[24, 30]</text>
+</g>
+<!-- node12&#45;&gt;node6 -->
+<g id="edge21" class="edge"><title>node12&#45;&gt;node6</title>
+<path fill="none" stroke="#9a32cd" d="M1980.79,-44C2021.35,-44 2066.54,-44 2110.17,-44"/>
+<polygon fill="#9a32cd" stroke="#9a32cd" points="2120.33,-44 2110.33,-48.5001 2115.33,-44 2110.33,-44.0001 2110.33,-44.0001 2110.33,-44.0001 2115.33,-44 2110.33,-39.5001 2120.33,-44 2120.33,-44"/>
+</g>
+<!-- node27 -->
+<g id="node17" class="node"><title>node27</title>
+<ellipse fill="#cce6ff" stroke="black" cx="2901" cy="-145" rx="306.884" ry="43.8406"/>
+<text text-anchor="middle" x="2901" y="-159.4" font-family="Times Roman,serif" font-size="14.00">Apply</text>
+<text text-anchor="middle" x="2901" y="-141.4" font-family="Times Roman,serif" font-size="14.00">(HERAKLES_HUMAN1 Green_Cube Glue_Green GluingArea )</text>
+<text text-anchor="middle" x="2901" y="-123.4" font-family="Times Roman,serif" font-size="14.00">[30, 36]</text>
+</g>
+<!-- node26&#45;&gt;node27 -->
+<g id="edge27" class="edge"><title>node26&#45;&gt;node27</title>
+<path fill="none" stroke="#9a32cd" d="M2557.52,-147.916C2566.35,-147.841 2575.24,-147.765 2584.16,-147.69"/>
+<polygon fill="#9a32cd" stroke="#9a32cd" points="2594.24,-147.604 2584.28,-152.189 2589.24,-147.647 2584.24,-147.689 2584.24,-147.689 2584.24,-147.689 2589.24,-147.647 2584.2,-143.189 2594.24,-147.604 2594.24,-147.604"/>
 </g>
-<!-- node28 -->
-<g id="node11" class="node"><title>node28</title>
-<ellipse fill="#cce6ff" stroke="black" cx="1927" cy="-152" rx="201.025" ry="43.8406"/>
-<text text-anchor="middle" x="1927" y="-166.4" font-family="Times Roman,serif" font-size="14.00">StartPointing</text>
-<text text-anchor="middle" x="1927" y="-148.4" font-family="Times Roman,serif" font-size="14.00">(PR2_ROBOT ASSEMBLY_SURFACE_1 )</text>
-<text text-anchor="middle" x="1927" y="-130.4" font-family="Times Roman,serif" font-size="14.00">[30, 31]</text>
+<!-- node17 -->
+<g id="node21" class="node"><title>node17</title>
+<ellipse fill="#cce6ff" stroke="black" cx="3897" cy="-99" rx="239.916" ry="43.8406"/>
+<text text-anchor="middle" x="3897" y="-113.4" font-family="Times Roman,serif" font-size="14.00">PlaceOnStack</text>
+<text text-anchor="middle" x="3897" y="-95.4" font-family="Times Roman,serif" font-size="14.00">(HERAKLES_HUMAN1 Green_Cube StackArea )</text>
+<text text-anchor="middle" x="3897" y="-77.4" font-family="Times Roman,serif" font-size="14.00">[42, 48]</text>
 </g>
-<!-- node14&#45;&gt;node28 -->
-<g id="edge15" class="edge"><title>node14&#45;&gt;node28</title>
-<path fill="none" stroke="#9a32cd" d="M1026.05,-152C1230.37,-152 1520,-152 1715.24,-152"/>
-<polygon fill="#9a32cd" stroke="#9a32cd" points="1725.34,-152 1715.34,-156.5 1720.34,-152 1715.34,-152 1715.34,-152 1715.34,-152 1720.34,-152 1715.34,-147.5 1725.34,-152 1725.34,-152"/>
+<!-- node6&#45;&gt;node17 -->
+<g id="edge17" class="edge"><title>node6&#45;&gt;node17</title>
+<path fill="none" stroke="#9a32cd" d="M2502.68,-48.4257C2757.4,-54.6599 3222.77,-67.1734 3620,-84 3632.05,-84.5106 3644.4,-85.065 3656.87,-85.6496"/>
+<polygon fill="#9a32cd" stroke="#9a32cd" points="3666.89,-86.1247 3656.69,-90.1461 3661.9,-85.8879 3656.91,-85.6511 3656.91,-85.6511 3656.91,-85.6511 3661.9,-85.8879 3657.12,-81.1562 3666.89,-86.1247 3666.89,-86.1247"/>
 </g>
-<!-- node17 -->
-<g id="node8" class="node"><title>node17</title>
-<ellipse fill="#cce6ff" stroke="black" cx="1325" cy="-44" rx="261.837" ry="43.8406"/>
-<text text-anchor="middle" x="1325" y="-58.4" font-family="Times Roman,serif" font-size="14.00">Place</text>
-<text text-anchor="middle" x="1325" y="-40.4" font-family="Times Roman,serif" font-size="14.00">(PR2_ROBOT GLUE_BOTTLE PLACEMENT_WL1_1 )</text>
-<text text-anchor="middle" x="1325" y="-22.4" font-family="Times Roman,serif" font-size="14.00">[20, 30]</text>
-</g>
-<!-- node16&#45;&gt;node17 -->
-<g id="edge17" class="edge"><title>node16&#45;&gt;node17</title>
-<path fill="none" stroke="#9a32cd" d="M970.56,-44C996.955,-44 1024.53,-44 1052.15,-44"/>
-<polygon fill="#9a32cd" stroke="#9a32cd" points="1062.32,-44 1052.32,-48.5001 1057.32,-44 1052.32,-44.0001 1052.32,-44.0001 1052.32,-44.0001 1057.32,-44 1052.32,-39.5001 1062.32,-44 1062.32,-44"/>
-</g>
-<!-- node17&#45;&gt;node18 -->
-<g id="edge18" class="edge"><title>node17&#45;&gt;node18</title>
-<path fill="none" stroke="#9a32cd" d="M1587.73,-44.8729C1596.59,-44.9023 1605.49,-44.9319 1614.41,-44.9615"/>
-<polygon fill="#9a32cd" stroke="#9a32cd" points="1624.48,-44.9949 1614.46,-49.4616 1619.48,-44.9783 1614.48,-44.9616 1614.48,-44.9616 1614.48,-44.9616 1619.48,-44.9783 1614.49,-40.4616 1624.48,-44.9949 1624.48,-44.9949"/>
-</g>
-<!-- node17&#45;&gt;node28 -->
-<g id="edge19" class="edge"><title>node17&#45;&gt;node28</title>
-<path fill="none" stroke="#9a32cd" d="M1501.24,-76.6835C1541.57,-84.0886 1584.26,-91.8691 1624,-99 1667.74,-106.848 1715.05,-115.193 1759,-122.883"/>
-<polygon fill="#9a32cd" stroke="#9a32cd" points="1768.91,-124.616 1758.28,-127.326 1763.98,-123.755 1759.06,-122.894 1759.06,-122.894 1759.06,-122.894 1763.98,-123.755 1759.83,-118.461 1768.91,-124.616 1768.91,-124.616"/>
-</g>
-<!-- node29 -->
-<g id="node13" class="node"><title>node29</title>
-<ellipse fill="#ffffcc" stroke="black" cx="2508" cy="-63" rx="241.831" ry="43.8406"/>
-<text text-anchor="middle" x="2508" y="-77.4" font-family="Times Roman,serif" font-size="14.00">Glue</text>
-<text text-anchor="middle" x="2508" y="-59.4" font-family="Times Roman,serif" font-size="14.00">(HERAKLES_HUMAN1 ASSEMBLY_SURFACE_1 )</text>
-<text text-anchor="middle" x="2508" y="-41.4" font-family="Times Roman,serif" font-size="14.00">[40, 60]</text>
-</g>
-<!-- node18&#45;&gt;node29 -->
-<g id="edge20" class="edge"><title>node18&#45;&gt;node29</title>
-<path fill="none" stroke="#9a32cd" d="M2223.88,-54.6868C2235.56,-55.0283 2247.21,-55.3694 2258.78,-55.7079"/>
-<polygon fill="#9a32cd" stroke="#9a32cd" points="2268.93,-56.0047 2258.8,-60.2102 2263.93,-55.8584 2258.93,-55.7121 2258.93,-55.7121 2258.93,-55.7121 2263.93,-55.8584 2259.06,-51.2141 2268.93,-56.0047 2268.93,-56.0047"/>
-</g>
-<!-- node28&#45;&gt;node29 -->
-<g id="edge21" class="edge"><title>node28&#45;&gt;node29</title>
-<path fill="none" stroke="#9a32cd" d="M2092.33,-126.675C2160.97,-116.16 2241.14,-103.879 2312.66,-92.9237"/>
-<polygon fill="#9a32cd" stroke="#9a32cd" points="2322.69,-91.3869 2313.48,-97.3493 2317.75,-92.1441 2312.8,-92.9012 2312.8,-92.9012 2312.8,-92.9012 2317.75,-92.1441 2312.12,-88.4531 2322.69,-91.3869 2322.69,-91.3869"/>
-</g>
-<!-- node30 -->
-<g id="node16" class="node"><title>node30</title>
-<ellipse fill="#cce6ff" stroke="black" cx="3089" cy="-152" rx="201.025" ry="43.8406"/>
-<text text-anchor="middle" x="3089" y="-166.4" font-family="Times Roman,serif" font-size="14.00">StopPointing</text>
-<text text-anchor="middle" x="3089" y="-148.4" font-family="Times Roman,serif" font-size="14.00">(PR2_ROBOT ASSEMBLY_SURFACE_1 )</text>
-<text text-anchor="middle" x="3089" y="-130.4" font-family="Times Roman,serif" font-size="14.00">[60, 61]</text>
-</g>
-<!-- node28&#45;&gt;node30 -->
-<g id="edge22" class="edge"><title>node28&#45;&gt;node30</title>
-<path fill="none" stroke="#9a32cd" d="M2128.74,-152C2338.1,-152 2664.14,-152 2877.16,-152"/>
-<polygon fill="#9a32cd" stroke="#9a32cd" points="2887.22,-152 2877.22,-156.5 2882.22,-152 2877.22,-152 2877.22,-152 2877.22,-152 2882.22,-152 2877.22,-147.5 2887.22,-152 2887.22,-152"/>
-</g>
-<!-- node31 -->
-<g id="node15" class="node"><title>node31</title>
-<ellipse fill="#ffffcc" stroke="black" cx="3089" cy="-46" rx="302.141" ry="43.8406"/>
-<text text-anchor="middle" x="3089" y="-60.4" font-family="Times Roman,serif" font-size="14.00">Place</text>
-<text text-anchor="middle" x="3089" y="-42.4" font-family="Times Roman,serif" font-size="14.00">(HERAKLES_HUMAN1 GLUE_BOTTLE PLACEMENT_WL1_1 )</text>
-<text text-anchor="middle" x="3089" y="-24.4" font-family="Times Roman,serif" font-size="14.00">[60, 70]</text>
-</g>
-<!-- node29&#45;&gt;node31 -->
-<g id="edge24" class="edge"><title>node29&#45;&gt;node31</title>
-<path fill="none" stroke="#9a32cd" d="M2747.25,-55.9996C2758.74,-55.6633 2770.34,-55.3239 2781.98,-54.9834"/>
-<polygon fill="#9a32cd" stroke="#9a32cd" points="2792.21,-54.6839 2782.35,-59.4746 2787.22,-54.8302 2782.22,-54.9765 2782.22,-54.9765 2782.22,-54.9765 2787.22,-54.8302 2782.09,-50.4784 2792.21,-54.6839 2792.21,-54.6839"/>
-</g>
-<!-- node29&#45;&gt;node30 -->
-<g id="edge23" class="edge"><title>node29&#45;&gt;node30</title>
-<path fill="none" stroke="#9a32cd" d="M2693.43,-91.4049C2764.02,-102.218 2844.17,-114.495 2913.78,-125.159"/>
-<polygon fill="#9a32cd" stroke="#9a32cd" points="2923.97,-126.72 2913.4,-129.654 2919.03,-125.963 2914.08,-125.206 2914.08,-125.206 2914.08,-125.206 2919.03,-125.963 2914.77,-120.757 2923.97,-126.72 2923.97,-126.72"/>
-</g>
-<!-- node72 -->
-<g id="node26" class="node"><title>node72</title>
-<ellipse fill="#ffffcc" stroke="black" cx="5525" cy="-99" rx="288" ry="43.8406"/>
-<text text-anchor="middle" x="5525" y="-113.4" font-family="Times Roman,serif" font-size="14.00">Pick</text>
-<text text-anchor="middle" x="5525" y="-95.4" font-family="Times Roman,serif" font-size="14.00">(HERAKLES_HUMAN1 BRACKET_1 PLACEMENT_WL1_2 )</text>
-<text text-anchor="middle" x="5525" y="-77.4" font-family="Times Roman,serif" font-size="14.00">[101, 111]</text>
-</g>
-<!-- node31&#45;&gt;node72 -->
-<g id="edge26" class="edge"><title>node31&#45;&gt;node72</title>
-<path fill="none" stroke="#9a32cd" d="M3386.35,-54.2012C3568.89,-58.5484 3807.45,-63 4019,-63 4019,-63 4019,-63 4481,-63 4738.84,-63 5032.29,-74.1032 5242.27,-83.9771"/>
-<polygon fill="#9a32cd" stroke="#9a32cd" points="5252.51,-84.4612 5242.31,-88.4843 5247.52,-84.2252 5242.53,-83.9893 5242.53,-83.9893 5242.53,-83.9893 5247.52,-84.2252 5242.74,-79.4943 5252.51,-84.4612 5252.51,-84.4612"/>
-</g>
-<!-- node69 -->
-<g id="node18" class="node"><title>node69</title>
-<ellipse fill="#cce6ff" stroke="black" cx="3586" cy="-147" rx="157.184" ry="43.8406"/>
-<text text-anchor="middle" x="3586" y="-161.4" font-family="Times Roman,serif" font-size="14.00">TravelTo</text>
-<text text-anchor="middle" x="3586" y="-143.4" font-family="Times Roman,serif" font-size="14.00">(PR2_ROBOT STOCK_TABLE )</text>
-<text text-anchor="middle" x="3586" y="-125.4" font-family="Times Roman,serif" font-size="14.00">[61, 71]</text>
-</g>
-<!-- node30&#45;&gt;node69 -->
-<g id="edge25" class="edge"><title>node30&#45;&gt;node69</title>
-<path fill="none" stroke="#9a32cd" d="M3290.43,-149.974C3332.94,-149.546 3377.35,-149.099 3418.45,-148.686"/>
-<polygon fill="#9a32cd" stroke="#9a32cd" points="3428.55,-148.584 3418.59,-153.184 3423.55,-148.634 3418.55,-148.685 3418.55,-148.685 3418.55,-148.685 3423.55,-148.634 3418.5,-144.185 3428.55,-148.584 3428.55,-148.584"/>
-</g>
-<!-- node70 -->
-<g id="node20" class="node"><title>node70</title>
-<ellipse fill="#cce6ff" stroke="black" cx="4019" cy="-139" rx="237.795" ry="43.8406"/>
-<text text-anchor="middle" x="4019" y="-153.4" font-family="Times Roman,serif" font-size="14.00">Pick</text>
-<text text-anchor="middle" x="4019" y="-135.4" font-family="Times Roman,serif" font-size="14.00">(PR2_ROBOT BRACKET_1 PLACEMENT_ST_1 )</text>
-<text text-anchor="middle" x="4019" y="-117.4" font-family="Times Roman,serif" font-size="14.00">[71, 81]</text>
-</g>
-<!-- node69&#45;&gt;node70 -->
-<g id="edge28" class="edge"><title>node69&#45;&gt;node70</title>
-<path fill="none" stroke="#9a32cd" d="M3743.24,-144.095C3752.58,-143.922 3762.07,-143.747 3771.65,-143.57"/>
-<polygon fill="#9a32cd" stroke="#9a32cd" points="3781.66,-143.385 3771.74,-148.069 3776.66,-143.477 3771.66,-143.57 3771.66,-143.57 3771.66,-143.57 3776.66,-143.477 3771.58,-139.071 3781.66,-143.385 3781.66,-143.385"/>
-</g>
-<!-- node71 -->
-<g id="node22" class="node"><title>node71</title>
-<ellipse fill="#cce6ff" stroke="black" cx="4481" cy="-138" rx="186.176" ry="43.8406"/>
-<text text-anchor="middle" x="4481" y="-152.4" font-family="Times Roman,serif" font-size="14.00">TravelTo</text>
-<text text-anchor="middle" x="4481" y="-134.4" font-family="Times Roman,serif" font-size="14.00">(PR2_ROBOT WORK_LOCATION_1 )</text>
-<text text-anchor="middle" x="4481" y="-116.4" font-family="Times Roman,serif" font-size="14.00">[81, 91]</text>
-</g>
-<!-- node70&#45;&gt;node71 -->
-<g id="edge29" class="edge"><title>node70&#45;&gt;node71</title>
-<path fill="none" stroke="#9a32cd" d="M4257.78,-138.483C4266.57,-138.464 4275.35,-138.445 4284.06,-138.426"/>
-<polygon fill="#9a32cd" stroke="#9a32cd" points="4294.25,-138.404 4284.26,-142.926 4289.25,-138.415 4284.25,-138.426 4284.25,-138.426 4284.25,-138.426 4289.25,-138.415 4284.24,-133.926 4294.25,-138.404 4294.25,-138.404"/>
-</g>
-<!-- node65 -->
-<g id="node24" class="node"><title>node65</title>
-<ellipse fill="#cce6ff" stroke="black" cx="4952" cy="-136" rx="248.194" ry="43.8406"/>
-<text text-anchor="middle" x="4952" y="-150.4" font-family="Times Roman,serif" font-size="14.00">Place</text>
-<text text-anchor="middle" x="4952" y="-132.4" font-family="Times Roman,serif" font-size="14.00">(PR2_ROBOT BRACKET_1 PLACEMENT_WL1_2 )</text>
-<text text-anchor="middle" x="4952" y="-114.4" font-family="Times Roman,serif" font-size="14.00">[91, 101]</text>
-</g>
-<!-- node71&#45;&gt;node65 -->
-<g id="edge30" class="edge"><title>node71&#45;&gt;node65</title>
-<path fill="none" stroke="#9a32cd" d="M4667.49,-137.208C4676.08,-137.172 4684.76,-137.135 4693.48,-137.098"/>
-<polygon fill="#9a32cd" stroke="#9a32cd" points="4703.74,-137.054 4693.76,-141.597 4698.74,-137.075 4693.74,-137.097 4693.74,-137.097 4693.74,-137.097 4698.74,-137.075 4693.72,-132.597 4703.74,-137.054 4703.74,-137.054"/>
-</g>
-<!-- node65&#45;&gt;node72 -->
-<g id="edge27" class="edge"><title>node65&#45;&gt;node72</title>
-<path fill="none" stroke="#9a32cd" d="M5185.06,-120.951C5206.06,-119.595 5227.45,-118.213 5248.77,-116.837"/>
-<polygon fill="#9a32cd" stroke="#9a32cd" points="5258.89,-116.183 5249.2,-121.318 5253.9,-116.506 5248.91,-116.828 5248.91,-116.828 5248.91,-116.828 5253.9,-116.506 5248.62,-112.337 5258.89,-116.183 5258.89,-116.183"/>
-</g>
-<!-- node73 -->
-<g id="node28" class="node"><title>node73</title>
-<ellipse fill="#ffffcc" stroke="black" cx="6153" cy="-99" rx="302.141" ry="43.8406"/>
-<text text-anchor="middle" x="6153" y="-113.4" font-family="Times Roman,serif" font-size="14.00">AttachBracket</text>
-<text text-anchor="middle" x="6153" y="-95.4" font-family="Times Roman,serif" font-size="14.00">(HERAKLES_HUMAN1 BRACKET_1 ASSEMBLY_SURFACE_1 )</text>
-<text text-anchor="middle" x="6153" y="-77.4" font-family="Times Roman,serif" font-size="14.00">[111, 131]</text>
-</g>
-<!-- node72&#45;&gt;node73 -->
-<g id="edge31" class="edge"><title>node72&#45;&gt;node73</title>
-<path fill="none" stroke="#9a32cd" d="M5813.73,-99C5822.41,-99 5831.12,-99 5839.83,-99"/>
-<polygon fill="#9a32cd" stroke="#9a32cd" points="5850.05,-99 5840.05,-103.5 5845.05,-99 5840.05,-99.0001 5840.05,-99.0001 5840.05,-99.0001 5845.05,-99 5840.05,-94.5001 5850.05,-99 5850.05,-99"/>
+<!-- node28 -->
+<g id="node19" class="node"><title>node28</title>
+<ellipse fill="#cce6ff" stroke="black" cx="3432" cy="-137" rx="186.884" ry="43.8406"/>
+<text text-anchor="middle" x="3432" y="-151.4" font-family="Times Roman,serif" font-size="14.00">Pick</text>
+<text text-anchor="middle" x="3432" y="-133.4" font-family="Times Roman,serif" font-size="14.00">(HERAKLES_HUMAN1 Green_Cube )</text>
+<text text-anchor="middle" x="3432" y="-115.4" font-family="Times Roman,serif" font-size="14.00">[36, 42]</text>
+</g>
+<!-- node27&#45;&gt;node28 -->
+<g id="edge28" class="edge"><title>node27&#45;&gt;node28</title>
+<path fill="none" stroke="#9a32cd" d="M3206.42,-140.399C3215.92,-140.255 3225.34,-140.114 3234.64,-139.973"/>
+<polygon fill="#9a32cd" stroke="#9a32cd" points="3244.69,-139.822 3234.76,-144.472 3239.69,-139.897 3234.69,-139.973 3234.69,-139.973 3234.69,-139.973 3239.69,-139.897 3234.62,-135.473 3244.69,-139.822 3244.69,-139.822"/>
+</g>
+<!-- node28&#45;&gt;node17 -->
+<g id="edge29" class="edge"><title>node28&#45;&gt;node17</title>
+<path fill="none" stroke="#9a32cd" d="M3609.12,-122.525C3628.14,-120.972 3647.68,-119.375 3667.19,-117.78"/>
+<polygon fill="#9a32cd" stroke="#9a32cd" points="3677.39,-116.947 3667.79,-122.246 3672.41,-117.354 3667.42,-117.761 3667.42,-117.761 3667.42,-117.761 3672.41,-117.354 3667.06,-113.276 3677.39,-116.947 3677.39,-116.947"/>
+</g>
+<!-- node34 -->
+<g id="node23" class="node"><title>node34</title>
+<ellipse fill="#cce6ff" stroke="black" cx="4350" cy="-99" rx="174.863" ry="43.8406"/>
+<text text-anchor="middle" x="4350" y="-113.4" font-family="Times Roman,serif" font-size="14.00">Pick</text>
+<text text-anchor="middle" x="4350" y="-95.4" font-family="Times Roman,serif" font-size="14.00">(HERAKLES_HUMAN1 Red_Cube )</text>
+<text text-anchor="middle" x="4350" y="-77.4" font-family="Times Roman,serif" font-size="14.00">[48, 54]</text>
+</g>
+<!-- node17&#45;&gt;node34 -->
+<g id="edge22" class="edge"><title>node17&#45;&gt;node34</title>
+<path fill="none" stroke="#9a32cd" d="M4137.76,-99C4146.58,-99 4155.37,-99 4164.07,-99"/>
+<polygon fill="#9a32cd" stroke="#9a32cd" points="4174.25,-99 4164.25,-103.5 4169.25,-99 4164.25,-99.0001 4164.25,-99.0001 4164.25,-99.0001 4169.25,-99 4164.25,-94.5001 4174.25,-99 4174.25,-99"/>
+</g>
+<!-- node37 -->
+<g id="node25" class="node"><title>node37</title>
+<ellipse fill="#cce6ff" stroke="black" cx="4806" cy="-99" rx="243.952" ry="43.8406"/>
+<text text-anchor="middle" x="4806" y="-113.4" font-family="Times Roman,serif" font-size="14.00">Place</text>
+<text text-anchor="middle" x="4806" y="-95.4" font-family="Times Roman,serif" font-size="14.00">(HERAKLES_HUMAN1 Red_Cube PolishingArea )</text>
+<text text-anchor="middle" x="4806" y="-77.4" font-family="Times Roman,serif" font-size="14.00">[54, 60]</text>
+</g>
+<!-- node34&#45;&gt;node37 -->
+<g id="edge30" class="edge"><title>node34&#45;&gt;node37</title>
+<path fill="none" stroke="#9a32cd" d="M4525.65,-99C4534.21,-99 4542.88,-99 4551.61,-99"/>
+<polygon fill="#9a32cd" stroke="#9a32cd" points="4561.87,-99 4551.87,-103.5 4556.87,-99 4551.87,-99.0001 4551.87,-99.0001 4551.87,-99.0001 4556.87,-99 4551.87,-94.5001 4561.87,-99 4561.87,-99"/>
+</g>
+<!-- node38 -->
+<g id="node27" class="node"><title>node38</title>
+<ellipse fill="#cce6ff" stroke="black" cx="5361" cy="-99" rx="275.065" ry="43.8406"/>
+<text text-anchor="middle" x="5361" y="-113.4" font-family="Times Roman,serif" font-size="14.00">Apply</text>
+<text text-anchor="middle" x="5361" y="-95.4" font-family="Times Roman,serif" font-size="14.00">(HERAKLES_HUMAN1 Red_Cube Polish PolishingArea )</text>
+<text text-anchor="middle" x="5361" y="-77.4" font-family="Times Roman,serif" font-size="14.00">[60, 66]</text>
+</g>
+<!-- node37&#45;&gt;node38 -->
+<g id="edge31" class="edge"><title>node37&#45;&gt;node38</title>
+<path fill="none" stroke="#9a32cd" d="M5050.24,-99C5058.7,-99 5067.21,-99 5075.73,-99"/>
+<polygon fill="#9a32cd" stroke="#9a32cd" points="5085.73,-99 5075.73,-103.5 5080.73,-99 5075.73,-99.0001 5075.73,-99.0001 5075.73,-99.0001 5080.73,-99 5075.73,-94.5001 5085.73,-99 5085.73,-99"/>
+</g>
+<!-- node39 -->
+<g id="node29" class="node"><title>node39</title>
+<ellipse fill="#cce6ff" stroke="black" cx="5848" cy="-99" rx="174.863" ry="43.8406"/>
+<text text-anchor="middle" x="5848" y="-113.4" font-family="Times Roman,serif" font-size="14.00">Pick</text>
+<text text-anchor="middle" x="5848" y="-95.4" font-family="Times Roman,serif" font-size="14.00">(HERAKLES_HUMAN1 Red_Cube )</text>
+<text text-anchor="middle" x="5848" y="-77.4" font-family="Times Roman,serif" font-size="14.00">[66, 72]</text>
+</g>
+<!-- node38&#45;&gt;node39 -->
+<g id="edge32" class="edge"><title>node38&#45;&gt;node39</title>
+<path fill="none" stroke="#9a32cd" d="M5636.17,-99C5644.92,-99 5653.61,-99 5662.2,-99"/>
+<polygon fill="#9a32cd" stroke="#9a32cd" points="5672.24,-99 5662.24,-103.5 5667.24,-99 5662.24,-99.0001 5662.24,-99.0001 5662.24,-99.0001 5667.24,-99 5662.24,-94.5001 5672.24,-99 5672.24,-99"/>
+</g>
+<!-- node42 -->
+<g id="node31" class="node"><title>node42</title>
+<ellipse fill="#cce6ff" stroke="black" cx="6293" cy="-99" rx="232.138" ry="43.8406"/>
+<text text-anchor="middle" x="6293" y="-113.4" font-family="Times Roman,serif" font-size="14.00">Place</text>
+<text text-anchor="middle" x="6293" y="-95.4" font-family="Times Roman,serif" font-size="14.00">(HERAKLES_HUMAN1 Red_Cube GluingArea )</text>
+<text text-anchor="middle" x="6293" y="-77.4" font-family="Times Roman,serif" font-size="14.00">[72, 78]</text>
+</g>
+<!-- node39&#45;&gt;node42 -->
+<g id="edge33" class="edge"><title>node39&#45;&gt;node42</title>
+<path fill="none" stroke="#9a32cd" d="M6023.56,-99C6032.39,-99 6041.32,-99 6050.3,-99"/>
+<polygon fill="#9a32cd" stroke="#9a32cd" points="6060.45,-99 6050.45,-103.5 6055.45,-99 6050.45,-99.0001 6050.45,-99.0001 6050.45,-99.0001 6055.45,-99 6050.45,-94.5001 6060.45,-99 6060.45,-99"/>
+</g>
+<!-- node43 -->
+<g id="node33" class="node"><title>node43</title>
+<ellipse fill="#cce6ff" stroke="black" cx="6844" cy="-99" rx="282.136" ry="43.8406"/>
+<text text-anchor="middle" x="6844" y="-113.4" font-family="Times Roman,serif" font-size="14.00">Apply</text>
+<text text-anchor="middle" x="6844" y="-95.4" font-family="Times Roman,serif" font-size="14.00">(HERAKLES_HUMAN1 Red_Cube Glue_Red GluingArea )</text>
+<text text-anchor="middle" x="6844" y="-77.4" font-family="Times Roman,serif" font-size="14.00">[78, 84]</text>
+</g>
+<!-- node42&#45;&gt;node43 -->
+<g id="edge34" class="edge"><title>node42&#45;&gt;node43</title>
+<path fill="none" stroke="#9a32cd" d="M6525.87,-99C6534.42,-99 6543.03,-99 6551.66,-99"/>
+<polygon fill="#9a32cd" stroke="#9a32cd" points="6561.8,-99 6551.8,-103.5 6556.8,-99 6551.8,-99.0001 6551.8,-99.0001 6551.8,-99.0001 6556.8,-99 6551.8,-94.5001 6561.8,-99 6561.8,-99"/>
+</g>
+<!-- node44 -->
+<g id="node35" class="node"><title>node44</title>
+<ellipse fill="#cce6ff" stroke="black" cx="7338" cy="-99" rx="174.863" ry="43.8406"/>
+<text text-anchor="middle" x="7338" y="-113.4" font-family="Times Roman,serif" font-size="14.00">Pick</text>
+<text text-anchor="middle" x="7338" y="-95.4" font-family="Times Roman,serif" font-size="14.00">(HERAKLES_HUMAN1 Red_Cube )</text>
+<text text-anchor="middle" x="7338" y="-77.4" font-family="Times Roman,serif" font-size="14.00">[84, 90]</text>
+</g>
+<!-- node43&#45;&gt;node44 -->
+<g id="edge35" class="edge"><title>node43&#45;&gt;node44</title>
+<path fill="none" stroke="#9a32cd" d="M7126.35,-99C7134.95,-99 7143.5,-99 7151.95,-99"/>
+<polygon fill="#9a32cd" stroke="#9a32cd" points="7162.19,-99 7152.19,-103.5 7157.19,-99 7152.19,-99.0001 7152.19,-99.0001 7152.19,-99.0001 7157.19,-99 7152.19,-94.5001 7162.19,-99 7162.19,-99"/>
+</g>
+<!-- node33 -->
+<g id="node37" class="node"><title>node33</title>
+<ellipse fill="#cce6ff" stroke="black" cx="7779" cy="-99" rx="227.896" ry="43.8406"/>
+<text text-anchor="middle" x="7779" y="-113.4" font-family="Times Roman,serif" font-size="14.00">PlaceOnStack</text>
+<text text-anchor="middle" x="7779" y="-95.4" font-family="Times Roman,serif" font-size="14.00">(HERAKLES_HUMAN1 Red_Cube StackArea )</text>
+<text text-anchor="middle" x="7779" y="-77.4" font-family="Times Roman,serif" font-size="14.00">[90, 96]</text>
+</g>
+<!-- node44&#45;&gt;node33 -->
+<g id="edge36" class="edge"><title>node44&#45;&gt;node33</title>
+<path fill="none" stroke="#9a32cd" d="M7513.56,-99C7522.38,-99 7531.29,-99 7540.24,-99"/>
+<polygon fill="#9a32cd" stroke="#9a32cd" points="7550.36,-99 7540.36,-103.5 7545.36,-99 7540.36,-99.0001 7540.36,-99.0001 7540.36,-99.0001 7545.36,-99 7540.36,-94.5001 7550.36,-99 7550.36,-99"/>
 </g>
 </g>
 </svg>
diff --git a/planTree.svg b/planTree.svg
index a2095d0..c56d4b0 100644
--- a/planTree.svg
+++ b/planTree.svg
@@ -4,334 +4,498 @@
 <!-- Generated by graphviz version 2.26.3 (20100126.1600)
  -->
 <!-- Title: final_graph Pages: 1 -->
-<svg width="7068pt" height="784pt"
- viewBox="0.00 0.00 7068.00 784.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
-<g id="graph1" class="graph" transform="scale(1 1) rotate(0) translate(4 780)">
+<svg width="5773pt" height="772pt"
+ viewBox="0.00 0.00 5773.00 772.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
+<g id="graph1" class="graph" transform="scale(1 1) rotate(0) translate(4 768)">
 <title>final_graph</title>
-<polygon fill="white" stroke="white" points="-4,5 -4,-780 7065,-780 7065,5 -4,5"/>
+<polygon fill="white" stroke="white" points="-4,5 -4,-768 5770,-768 5770,5 -4,5"/>
 <!-- cluster_0 -->
 <g id="node1" class="node"><title>cluster_0</title>
-<polygon fill="none" stroke="blue" points="991,-233 1,-233 1,-155 991,-155 991,-233"/>
-<text text-anchor="middle" x="496" y="-190.4" font-family="Times Roman,serif" font-size="14.00"> </text>
+<polygon fill="none" stroke="blue" points="1693,-763.002 1533,-763.002 1533,-685.002 1693,-685.002 1693,-763.002"/>
+<text text-anchor="middle" x="1613" y="-720.402" font-family="Times Roman,serif" font-size="14.00"> </text>
 </g>
 <!-- cluster_1 -->
 <g id="node2" class="node"><title>cluster_1</title>
-<polygon fill="none" stroke="blue" points="1941,-233 1009,-233 1009,-155 1941,-155 1941,-233"/>
-<text text-anchor="middle" x="1475" y="-190.4" font-family="Times Roman,serif" font-size="14.00"> </text>
+<polygon fill="none" stroke="blue" points="1331,-307 0.99992,-307 0.99992,-229 1331,-229 1331,-307"/>
+<text text-anchor="middle" x="666" y="-264.4" font-family="Times Roman,serif" font-size="14.00"> </text>
 </g>
 <!-- cluster_2 -->
 <g id="node3" class="node"><title>cluster_2</title>
-<polygon fill="none" stroke="blue" points="3143,-233 1959,-233 1959,-155 3143,-155 3143,-233"/>
-<text text-anchor="middle" x="2551" y="-190.4" font-family="Times Roman,serif" font-size="14.00"> </text>
+<polygon fill="none" stroke="blue" points="2399,-535 1721,-535 1721,-457 2399,-457 2399,-535"/>
+<text text-anchor="middle" x="2060" y="-492.4" font-family="Times Roman,serif" font-size="14.00"> </text>
 </g>
 <!-- cluster_3 -->
 <g id="node4" class="node"><title>cluster_3</title>
-<polygon fill="none" stroke="blue" points="4743,-273 3161,-273 3161,-115 4743,-115 4743,-273"/>
-<text text-anchor="middle" x="3952" y="-190.4" font-family="Times Roman,serif" font-size="14.00"> </text>
+<polygon fill="none" stroke="blue" points="2721,-421 1399,-421 1399,-343 2721,-343 2721,-421"/>
+<text text-anchor="middle" x="2060" y="-378.4" font-family="Times Roman,serif" font-size="14.00"> </text>
 </g>
 <!-- cluster_4 -->
 <g id="node5" class="node"><title>cluster_4</title>
-<polygon fill="none" stroke="blue" points="3396,-774.998 3106,-774.998 3106,-696.998 3396,-696.998 3396,-774.998"/>
-<text text-anchor="middle" x="3251" y="-732.398" font-family="Times Roman,serif" font-size="14.00"> </text>
+<polygon fill="none" stroke="blue" points="2259,-307 1349,-307 1349,-229 2259,-229 2259,-307"/>
+<text text-anchor="middle" x="1804" y="-264.4" font-family="Times Roman,serif" font-size="14.00"> </text>
 </g>
 <!-- cluster_5 -->
 <g id="node6" class="node"><title>cluster_5</title>
-<polygon fill="none" stroke="blue" points="3626,-661 2876,-661 2876,-583 3626,-583 3626,-661"/>
-<text text-anchor="middle" x="3251" y="-618.4" font-family="Times Roman,serif" font-size="14.00"> </text>
+<polygon fill="none" stroke="blue" points="1903,-649 1323,-649 1323,-571 1903,-571 1903,-649"/>
+<text text-anchor="middle" x="1613" y="-606.4" font-family="Times Roman,serif" font-size="14.00"> </text>
 </g>
 <!-- cluster_6 -->
 <g id="node7" class="node"><title>cluster_6</title>
-<polygon fill="none" stroke="blue" points="5805,-233 4761,-233 4761,-155 5805,-155 5805,-233"/>
-<text text-anchor="middle" x="5283" y="-190.4" font-family="Times Roman,serif" font-size="14.00"> </text>
+<polygon fill="none" stroke="blue" points="1731,-193 97.0032,-193 97.0032,-115 1731,-115 1731,-193"/>
+<text text-anchor="middle" x="914.003" y="-150.4" font-family="Times Roman,serif" font-size="14.00"> </text>
 </g>
 <!-- cluster_7 -->
 <g id="node8" class="node"><title>cluster_7</title>
-<polygon fill="none" stroke="blue" points="5911,-79 4655,-79 4655,-1.00002 5911,-1.00002 5911,-79"/>
-<text text-anchor="middle" x="5283" y="-36.4" font-family="Times Roman,serif" font-size="14.00"> </text>
+<polygon fill="none" stroke="blue" points="2791,-307 2277,-307 2277,-229 2791,-229 2791,-307"/>
+<text text-anchor="middle" x="2534" y="-264.4" font-family="Times Roman,serif" font-size="14.00"> </text>
 </g>
 <!-- cluster_8 -->
 <g id="node9" class="node"><title>cluster_8</title>
-<polygon fill="none" stroke="blue" points="4448,-547 2054,-547 2054,-309 4448,-309 4448,-547"/>
-<text text-anchor="middle" x="3251" y="-424.4" font-family="Times Roman,serif" font-size="14.00"> </text>
+<polygon fill="none" stroke="blue" points="3319,-193 1749,-193 1749,-115 3319,-115 3319,-193"/>
+<text text-anchor="middle" x="2534" y="-150.4" font-family="Times Roman,serif" font-size="14.00"> </text>
 </g>
 <!-- cluster_9 -->
 <g id="node10" class="node"><title>cluster_9</title>
-<polygon fill="none" stroke="blue" points="7059,-233 5823,-233 5823,-155 7059,-155 7059,-233"/>
-<text text-anchor="middle" x="6441" y="-190.4" font-family="Times Roman,serif" font-size="14.00"> </text>
-</g>
-<!-- node_5 -->
-<g id="node11" class="node"><title>node_5</title>
-<ellipse fill="#c1cdcd" stroke="black" cx="3251" cy="-735.998" rx="137.179" ry="31.1127"/>
-<ellipse fill="none" stroke="black" cx="3251" cy="-735.998" rx="141.179" ry="35.1127"/>
-<text text-anchor="middle" x="3251" y="-741.398" font-family="Times Roman,serif" font-size="14.00">HandleSurface</text>
-<text text-anchor="middle" x="3251" y="-723.398" font-family="Times Roman,serif" font-size="14.00">(ASSEMBLY_SURFACE_1 )</text>
+<polygon fill="none" stroke="blue" points="3726,-421 3252,-421 3252,-343 3726,-343 3726,-421"/>
+<text text-anchor="middle" x="3489" y="-378.4" font-family="Times Roman,serif" font-size="14.00"> </text>
+</g>
+<!-- cluster_10 -->
+<g id="node11" class="node"><title>cluster_10</title>
+<polygon fill="none" stroke="blue" points="4371,-307 3121,-307 3121,-229 4371,-229 4371,-307"/>
+<text text-anchor="middle" x="3746" y="-264.4" font-family="Times Roman,serif" font-size="14.00"> </text>
+</g>
+<!-- cluster_11 -->
+<g id="node12" class="node"><title>cluster_11</title>
+<polygon fill="none" stroke="blue" points="4155,-193 3337,-193 3337,-115 4155,-115 4155,-193"/>
+<text text-anchor="middle" x="3746" y="-150.4" font-family="Times Roman,serif" font-size="14.00"> </text>
+</g>
+<!-- cluster_12 -->
+<g id="node13" class="node"><title>cluster_12</title>
+<polygon fill="none" stroke="blue" points="4276,-79 2798,-79 2798,-1.00002 4276,-1.00002 4276,-79"/>
+<text text-anchor="middle" x="3537" y="-36.4" font-family="Times Roman,serif" font-size="14.00"> </text>
+</g>
+<!-- cluster_13 -->
+<g id="node14" class="node"><title>cluster_13</title>
+<polygon fill="none" stroke="blue" points="1523,-535 809.003,-535 809.003,-457 1523,-457 1523,-535"/>
+<text text-anchor="middle" x="1166" y="-492.4" font-family="Times Roman,serif" font-size="14.00"> </text>
+</g>
+<!-- cluster_14 -->
+<g id="node15" class="node"><title>cluster_14</title>
+<polygon fill="none" stroke="blue" points="5053,-193 4589,-193 4589,-115 5053,-115 5053,-193"/>
+<text text-anchor="middle" x="4821" y="-150.4" font-family="Times Roman,serif" font-size="14.00"> </text>
+</g>
+<!-- cluster_15 -->
+<g id="node16" class="node"><title>cluster_15</title>
+<polygon fill="none" stroke="blue" points="5764,-79 4294,-79 4294,-1.00002 5764,-1.00002 5764,-79"/>
+<text text-anchor="middle" x="5029" y="-36.4" font-family="Times Roman,serif" font-size="14.00"> </text>
+</g>
+<!-- cluster_16 -->
+<g id="node17" class="node"><title>cluster_16</title>
+<polygon fill="none" stroke="blue" points="1319,-421 651.002,-421 651.002,-343 1319,-343 1319,-421"/>
+<text text-anchor="middle" x="985.002" y="-378.4" font-family="Times Roman,serif" font-size="14.00"> </text>
+</g>
+<!-- node_1 -->
+<g id="node18" class="node"><title>node_1</title>
+<ellipse fill="#c1cdcd" stroke="black" cx="1613" cy="-724.002" rx="72.1249" ry="31.1127"/>
+<ellipse fill="none" stroke="black" cx="1613" cy="-724.002" rx="76.1249" ry="35.1127"/>
+<text text-anchor="middle" x="1613" y="-729.402" font-family="Times Roman,serif" font-size="14.00">BuildStack</text>
+<text text-anchor="middle" x="1613" y="-711.402" font-family="Times Roman,serif" font-size="14.00">(StackArea )</text>
+</g>
+<!-- node_2 -->
+<g id="node19" class="node"><title>node_2</title>
+<ellipse fill="#c1cdcd" stroke="black" cx="1523" cy="-610" rx="191.126" ry="31.1127"/>
+<text text-anchor="middle" x="1523" y="-615.4" font-family="Times Roman,serif" font-size="14.00">Handle</text>
+<text text-anchor="middle" x="1523" y="-597.4" font-family="Times Roman,serif" font-size="14.00">(PR2_ROBOT Blue_Cube StackArea )</text>
+</g>
+<!-- node_3 -->
+<g id="node20" class="node"><title>node_3</title>
+<ellipse fill="#c1cdcd" stroke="black" cx="1823" cy="-610" rx="72.1249" ry="31.1127"/>
+<text text-anchor="middle" x="1823" y="-615.4" font-family="Times Roman,serif" font-size="14.00">BuildStack</text>
+<text text-anchor="middle" x="1823" y="-597.4" font-family="Times Roman,serif" font-size="14.00">(StackArea )</text>
+</g>
+<!-- node_4 -->
+<g id="node21" class="node"><title>node_4</title>
+<ellipse fill="#c1cdcd" stroke="black" cx="956.001" cy="-496" rx="138.093" ry="31.1127"/>
+<text text-anchor="middle" x="956.001" y="-501.4" font-family="Times Roman,serif" font-size="14.00">ApplyFirstOperations</text>
+<text text-anchor="middle" x="956.001" y="-483.4" font-family="Times Roman,serif" font-size="14.00">(PR2_ROBOT Blue_Cube )</text>
 </g>
 <!-- node_6 -->
-<g id="node12" class="node"><title>node_6</title>
-<ellipse fill="#c1cdcd" stroke="black" cx="3251" cy="-622" rx="367" ry="31.1127"/>
-<ellipse fill="none" stroke="black" cx="3251" cy="-622" rx="371" ry="35.1127"/>
-<text text-anchor="middle" x="3251" y="-627.4" font-family="Times Roman,serif" font-size="14.00">AssembleOneBracket</text>
-<text text-anchor="middle" x="3251" y="-609.4" font-family="Times Roman,serif" font-size="14.00">(HERAKLES_HUMAN1 PR2_ROBOT BRACKET_1 ASSEMBLY_SURFACE_1 )</text>
+<g id="node22" class="node"><title>node_6</title>
+<ellipse fill="#ffffcc" stroke="black" cx="1323.01" cy="-496" rx="191.126" ry="31.1127"/>
+<text text-anchor="middle" x="1323.01" y="-501.4" font-family="Times Roman,serif" font-size="14.00">PlaceOnStack</text>
+<text text-anchor="middle" x="1323.01" y="-483.4" font-family="Times Roman,serif" font-size="14.00">(PR2_ROBOT Blue_Cube StackArea )</text>
 </g>
 <!-- node_7 -->
-<g id="node13" class="node"><title>node_7</title>
-<ellipse fill="#c1cdcd" stroke="black" cx="2325" cy="-508" rx="242" ry="31.1127"/>
-<text text-anchor="middle" x="2325" y="-513.4" font-family="Times Roman,serif" font-size="14.00">CleanSurface</text>
-<text text-anchor="middle" x="2325" y="-495.4" font-family="Times Roman,serif" font-size="14.00">(HERAKLES_HUMAN1 ASSEMBLY_SURFACE_1 )</text>
+<g id="node23" class="node"><title>node_7</title>
+<ellipse fill="#ffffcc" stroke="black" cx="798.004" cy="-382" rx="138.093" ry="31.1127"/>
+<text text-anchor="middle" x="798.004" y="-387.4" font-family="Times Roman,serif" font-size="14.00">Pick</text>
+<text text-anchor="middle" x="798.004" y="-369.4" font-family="Times Roman,serif" font-size="14.00">(PR2_ROBOT Blue_Cube )</text>
 </g>
 <!-- node_8 -->
-<g id="node14" class="node"><title>node_8</title>
-<ellipse fill="#c1cdcd" stroke="black" cx="2325" cy="-428" rx="261.837" ry="31.1127"/>
-<text text-anchor="middle" x="2325" y="-433.4" font-family="Times Roman,serif" font-size="14.00">Bring</text>
-<text text-anchor="middle" x="2325" y="-415.4" font-family="Times Roman,serif" font-size="14.00">(PR2_ROBOT GLUE_BOTTLE WORK_LOCATION_1 )</text>
-</g>
-<!-- node_9 -->
-<g id="node15" class="node"><title>node_9</title>
-<ellipse fill="#c1cdcd" stroke="black" cx="2887" cy="-428" rx="263.044" ry="31.1127"/>
-<ellipse fill="none" stroke="black" cx="2887" cy="-428" rx="267.044" ry="35.1127"/>
-<text text-anchor="middle" x="2887" y="-433.4" font-family="Times Roman,serif" font-size="14.00">GiveGlue</text>
-<text text-anchor="middle" x="2887" y="-415.4" font-family="Times Roman,serif" font-size="14.00">(PR2_ROBOT HERAKLES_HUMAN1 GLUE_BOTTLE )</text>
+<g id="node24" class="node"><title>node_8</title>
+<ellipse fill="#c1cdcd" stroke="black" cx="1142.01" cy="-382" rx="169" ry="31.1127"/>
+<text text-anchor="middle" x="1142.01" y="-387.4" font-family="Times Roman,serif" font-size="14.00">ApplyOperation</text>
+<text text-anchor="middle" x="1142.01" y="-369.4" font-family="Times Roman,serif" font-size="14.00">(PR2_ROBOT Blue_Cube Clean )</text>
 </g>
 <!-- node_10 -->
-<g id="node16" class="node"><title>node_10</title>
-<ellipse fill="#c1cdcd" stroke="black" cx="3492" cy="-413.001" rx="306.177" ry="31.1127"/>
-<ellipse fill="none" stroke="black" cx="3492" cy="-413.001" rx="310.177" ry="35.1127"/>
-<text text-anchor="middle" x="3492" y="-418.401" font-family="Times Roman,serif" font-size="14.00">ApplyGlue</text>
-<text text-anchor="middle" x="3492" y="-400.401" font-family="Times Roman,serif" font-size="14.00">(HERAKLES_HUMAN1 PR2_ROBOT ASSEMBLY_SURFACE_1 )</text>
+<g id="node25" class="node"><title>node_10</title>
+<ellipse fill="#ffffcc" stroke="black" cx="235" cy="-268" rx="225.067" ry="31.1127"/>
+<text text-anchor="middle" x="235" y="-273.4" font-family="Times Roman,serif" font-size="14.00">Place</text>
+<text text-anchor="middle" x="235" y="-255.4" font-family="Times Roman,serif" font-size="14.00">(PR2_ROBOT Blue_Cube RagCleaningArea )</text>
 </g>
 <!-- node_11 -->
-<g id="node17" class="node"><title>node_11</title>
-<ellipse fill="#c1cdcd" stroke="black" cx="2325" cy="-348" rx="261.837" ry="31.1127"/>
-<text text-anchor="middle" x="2325" y="-353.4" font-family="Times Roman,serif" font-size="14.00">PrepareBracket</text>
-<text text-anchor="middle" x="2325" y="-335.4" font-family="Times Roman,serif" font-size="14.00">(PR2_ROBOT BRACKET_1 ASSEMBLY_SURFACE_1 )</text>
+<g id="node26" class="node"><title>node_11</title>
+<ellipse fill="#ffffcc" stroke="black" cx="752.997" cy="-268" rx="256" ry="31.1127"/>
+<text text-anchor="middle" x="752.997" y="-273.4" font-family="Times Roman,serif" font-size="14.00">Apply</text>
+<text text-anchor="middle" x="752.997" y="-255.4" font-family="Times Roman,serif" font-size="14.00">(PR2_ROBOT Blue_Cube Clean RagCleaningArea )</text>
 </g>
 <!-- node_12 -->
-<g id="node18" class="node"><title>node_12</title>
-<ellipse fill="#c1cdcd" stroke="black" cx="4137" cy="-380" rx="302.141" ry="31.1127"/>
-<text text-anchor="middle" x="4137" y="-385.4" font-family="Times Roman,serif" font-size="14.00">PlaceBracket</text>
-<text text-anchor="middle" x="4137" y="-367.4" font-family="Times Roman,serif" font-size="14.00">(HERAKLES_HUMAN1 BRACKET_1 ASSEMBLY_SURFACE_1 )</text>
+<g id="node27" class="node"><title>node_12</title>
+<ellipse fill="#ffffcc" stroke="black" cx="1184" cy="-268" rx="138.093" ry="31.1127"/>
+<text text-anchor="middle" x="1184" y="-273.4" font-family="Times Roman,serif" font-size="14.00">Pick</text>
+<text text-anchor="middle" x="1184" y="-255.4" font-family="Times Roman,serif" font-size="14.00">(PR2_ROBOT Blue_Cube )</text>
 </g>
 <!-- node_13 -->
-<g id="node19" class="node"><title>node_13</title>
-<ellipse fill="#ffffcc" stroke="black" cx="236" cy="-194" rx="227" ry="31.1127"/>
-<text text-anchor="middle" x="236" y="-199.4" font-family="Times Roman,serif" font-size="14.00">TravelTo</text>
-<text text-anchor="middle" x="236" y="-181.4" font-family="Times Roman,serif" font-size="14.00">(HERAKLES_HUMAN1 WORK_LOCATION_1 )</text>
+<g id="node28" class="node"><title>node_13</title>
+<ellipse fill="#c1cdcd" stroke="black" cx="1970" cy="-496" rx="239.916" ry="31.1127"/>
+<text text-anchor="middle" x="1970" y="-501.4" font-family="Times Roman,serif" font-size="14.00">Handle</text>
+<text text-anchor="middle" x="1970" y="-483.4" font-family="Times Roman,serif" font-size="14.00">(HERAKLES_HUMAN1 Green_Cube StackArea )</text>
 </g>
 <!-- node_14 -->
-<g id="node20" class="node"><title>node_14</title>
-<ellipse fill="#ffffcc" stroke="black" cx="741.002" cy="-194" rx="242" ry="31.1127"/>
-<text text-anchor="middle" x="741.002" y="-199.4" font-family="Times Roman,serif" font-size="14.00">Clean</text>
-<text text-anchor="middle" x="741.002" y="-181.4" font-family="Times Roman,serif" font-size="14.00">(HERAKLES_HUMAN1 ASSEMBLY_SURFACE_1 )</text>
+<g id="node29" class="node"><title>node_14</title>
+<ellipse fill="#c1cdcd" stroke="black" cx="2319" cy="-496" rx="72.1249" ry="31.1127"/>
+<text text-anchor="middle" x="2319" y="-501.4" font-family="Times Roman,serif" font-size="14.00">BuildStack</text>
+<text text-anchor="middle" x="2319" y="-483.4" font-family="Times Roman,serif" font-size="14.00">(StackArea )</text>
 </g>
 <!-- node_15 -->
-<g id="node21" class="node"><title>node_15</title>
-<ellipse fill="#cce6ff" stroke="black" cx="1270" cy="-194" rx="251.937" ry="31.1127"/>
-<text text-anchor="middle" x="1270" y="-199.4" font-family="Times Roman,serif" font-size="14.00">Pick</text>
-<text text-anchor="middle" x="1270" y="-181.4" font-family="Times Roman,serif" font-size="14.00">(PR2_ROBOT GLUE_BOTTLE PLACEMENT_ST_4 )</text>
+<g id="node30" class="node"><title>node_15</title>
+<ellipse fill="#c1cdcd" stroke="black" cx="1595" cy="-382" rx="186.884" ry="31.1127"/>
+<text text-anchor="middle" x="1595" y="-387.4" font-family="Times Roman,serif" font-size="14.00">ApplyFirstOperations</text>
+<text text-anchor="middle" x="1595" y="-369.4" font-family="Times Roman,serif" font-size="14.00">(HERAKLES_HUMAN1 Green_Cube )</text>
 </g>
 <!-- node_16 -->
-<g id="node22" class="node"><title>node_16</title>
-<ellipse fill="#cce6ff" stroke="black" cx="1746" cy="-194" rx="186.176" ry="31.1127"/>
-<text text-anchor="middle" x="1746" y="-199.4" font-family="Times Roman,serif" font-size="14.00">TravelTo</text>
-<text text-anchor="middle" x="1746" y="-181.4" font-family="Times Roman,serif" font-size="14.00">(PR2_ROBOT WORK_LOCATION_1 )</text>
+<g id="node31" class="node"><title>node_16</title>
+<ellipse fill="#c1cdcd" stroke="black" cx="2007" cy="-382" rx="186.884" ry="31.1127"/>
+<text text-anchor="middle" x="2007" y="-387.4" font-family="Times Roman,serif" font-size="14.00">ApplySecondOperations</text>
+<text text-anchor="middle" x="2007" y="-369.4" font-family="Times Roman,serif" font-size="14.00">(HERAKLES_HUMAN1 Green_Cube )</text>
 </g>
 <!-- node_17 -->
-<g id="node23" class="node"><title>node_17</title>
-<ellipse fill="#cce6ff" stroke="black" cx="2230" cy="-194" rx="261.837" ry="31.1127"/>
-<text text-anchor="middle" x="2230" y="-199.4" font-family="Times Roman,serif" font-size="14.00">Place</text>
-<text text-anchor="middle" x="2230" y="-181.4" font-family="Times Roman,serif" font-size="14.00">(PR2_ROBOT GLUE_BOTTLE PLACEMENT_WL1_1 )</text>
+<g id="node32" class="node"><title>node_17</title>
+<ellipse fill="#cce6ff" stroke="black" cx="2472" cy="-382" rx="239.916" ry="31.1127"/>
+<text text-anchor="middle" x="2472" y="-387.4" font-family="Times Roman,serif" font-size="14.00">PlaceOnStack</text>
+<text text-anchor="middle" x="2472" y="-369.4" font-family="Times Roman,serif" font-size="14.00">(HERAKLES_HUMAN1 Green_Cube StackArea )</text>
 </g>
 <!-- node_18 -->
-<g id="node24" class="node"><title>node_18</title>
-<ellipse fill="#ffffcc" stroke="black" cx="2832" cy="-194" rx="302.141" ry="31.1127"/>
-<text text-anchor="middle" x="2832" y="-199.4" font-family="Times Roman,serif" font-size="14.00">Pick</text>
-<text text-anchor="middle" x="2832" y="-181.4" font-family="Times Roman,serif" font-size="14.00">(HERAKLES_HUMAN1 GLUE_BOTTLE PLACEMENT_WL1_1 )</text>
+<g id="node33" class="node"><title>node_18</title>
+<ellipse fill="#cce6ff" stroke="black" cx="1545" cy="-268" rx="186.884" ry="31.1127"/>
+<text text-anchor="middle" x="1545" y="-273.4" font-family="Times Roman,serif" font-size="14.00">Pick</text>
+<text text-anchor="middle" x="1545" y="-255.4" font-family="Times Roman,serif" font-size="14.00">(HERAKLES_HUMAN1 Green_Cube )</text>
+</g>
+<!-- node_19 -->
+<g id="node34" class="node"><title>node_19</title>
+<ellipse fill="#c1cdcd" stroke="black" cx="2010" cy="-268" rx="239.916" ry="31.1127"/>
+<text text-anchor="middle" x="2010" y="-273.4" font-family="Times Roman,serif" font-size="14.00">ApplyOperation</text>
+<text text-anchor="middle" x="2010" y="-255.4" font-family="Times Roman,serif" font-size="14.00">(HERAKLES_HUMAN1 Green_Cube Smoothen )</text>
+</g>
+<!-- node_21 -->
+<g id="node35" class="node"><title>node_21</title>
+<ellipse fill="#cce6ff" stroke="black" cx="371.003" cy="-154" rx="266" ry="31.1127"/>
+<text text-anchor="middle" x="371.003" y="-159.4" font-family="Times Roman,serif" font-size="14.00">Place</text>
+<text text-anchor="middle" x="371.003" y="-141.4" font-family="Times Roman,serif" font-size="14.00">(HERAKLES_HUMAN1 Green_Cube SmoothingArea )</text>
+</g>
+<!-- node_22 -->
+<g id="node36" class="node"><title>node_22</title>
+<ellipse fill="#cce6ff" stroke="black" cx="992.001" cy="-154" rx="319" ry="31.1127"/>
+<text text-anchor="middle" x="992.001" y="-159.4" font-family="Times Roman,serif" font-size="14.00">Apply</text>
+<text text-anchor="middle" x="992.001" y="-141.4" font-family="Times Roman,serif" font-size="14.00">(HERAKLES_HUMAN1 Green_Cube Smoothen SmoothingArea )</text>
+</g>
+<!-- node_23 -->
+<g id="node37" class="node"><title>node_23</title>
+<ellipse fill="#cce6ff" stroke="black" cx="1535" cy="-154" rx="186.884" ry="31.1127"/>
+<text text-anchor="middle" x="1535" y="-159.4" font-family="Times Roman,serif" font-size="14.00">Pick</text>
+<text text-anchor="middle" x="1535" y="-141.4" font-family="Times Roman,serif" font-size="14.00">(HERAKLES_HUMAN1 Green_Cube )</text>
+</g>
+<!-- node_24 -->
+<g id="node38" class="node"><title>node_24</title>
+<ellipse fill="#c1cdcd" stroke="black" cx="2534" cy="-268" rx="249" ry="31.1127"/>
+<text text-anchor="middle" x="2534" y="-273.4" font-family="Times Roman,serif" font-size="14.00">ApplyOperation</text>
+<text text-anchor="middle" x="2534" y="-255.4" font-family="Times Roman,serif" font-size="14.00">(HERAKLES_HUMAN1 Green_Cube Glue_Green )</text>
+</g>
+<!-- node_26 -->
+<g id="node39" class="node"><title>node_26</title>
+<ellipse fill="#cce6ff" stroke="black" cx="2003" cy="-154" rx="244.866" ry="31.1127"/>
+<text text-anchor="middle" x="2003" y="-159.4" font-family="Times Roman,serif" font-size="14.00">Place</text>
+<text text-anchor="middle" x="2003" y="-141.4" font-family="Times Roman,serif" font-size="14.00">(HERAKLES_HUMAN1 Green_Cube GluingArea )</text>
+</g>
+<!-- node_27 -->
+<g id="node40" class="node"><title>node_27</title>
+<ellipse fill="#cce6ff" stroke="black" cx="2592.01" cy="-154" rx="307" ry="31.1127"/>
+<text text-anchor="middle" x="2592.01" y="-159.4" font-family="Times Roman,serif" font-size="14.00">Apply</text>
+<text text-anchor="middle" x="2592.01" y="-141.4" font-family="Times Roman,serif" font-size="14.00">(HERAKLES_HUMAN1 Green_Cube Glue_Green GluingArea )</text>
 </g>
 <!-- node_28 -->
-<g id="node25" class="node"><title>node_28</title>
-<ellipse fill="#cce6ff" stroke="black" cx="3371" cy="-194" rx="201.025" ry="31.1127"/>
-<text text-anchor="middle" x="3371" y="-199.4" font-family="Times Roman,serif" font-size="14.00">StartPointing</text>
-<text text-anchor="middle" x="3371" y="-181.4" font-family="Times Roman,serif" font-size="14.00">(PR2_ROBOT ASSEMBLY_SURFACE_1 )</text>
+<g id="node41" class="node"><title>node_28</title>
+<ellipse fill="#cce6ff" stroke="black" cx="3123.01" cy="-154" rx="186.884" ry="31.1127"/>
+<text text-anchor="middle" x="3123.01" y="-159.4" font-family="Times Roman,serif" font-size="14.00">Pick</text>
+<text text-anchor="middle" x="3123.01" y="-141.4" font-family="Times Roman,serif" font-size="14.00">(HERAKLES_HUMAN1 Green_Cube )</text>
 </g>
 <!-- node_29 -->
-<g id="node26" class="node"><title>node_29</title>
-<ellipse fill="#ffffcc" stroke="black" cx="3851" cy="-194" rx="242" ry="31.1127"/>
-<text text-anchor="middle" x="3851" y="-199.4" font-family="Times Roman,serif" font-size="14.00">Glue</text>
-<text text-anchor="middle" x="3851" y="-181.4" font-family="Times Roman,serif" font-size="14.00">(HERAKLES_HUMAN1 ASSEMBLY_SURFACE_1 )</text>
-</g>
-<!-- node_30 -->
-<g id="node27" class="node"><title>node_30</title>
-<ellipse fill="#cce6ff" stroke="black" cx="4432" cy="-154" rx="201.025" ry="31.1127"/>
-<text text-anchor="middle" x="4432" y="-159.4" font-family="Times Roman,serif" font-size="14.00">StopPointing</text>
-<text text-anchor="middle" x="4432" y="-141.4" font-family="Times Roman,serif" font-size="14.00">(PR2_ROBOT ASSEMBLY_SURFACE_1 )</text>
+<g id="node42" class="node"><title>node_29</title>
+<ellipse fill="#c1cdcd" stroke="black" cx="3489" cy="-382" rx="227.896" ry="31.1127"/>
+<text text-anchor="middle" x="3489" y="-387.4" font-family="Times Roman,serif" font-size="14.00">Handle</text>
+<text text-anchor="middle" x="3489" y="-369.4" font-family="Times Roman,serif" font-size="14.00">(HERAKLES_HUMAN1 Red_Cube StackArea )</text>
 </g>
 <!-- node_31 -->
-<g id="node28" class="node"><title>node_31</title>
-<ellipse fill="#ffffcc" stroke="black" cx="4432" cy="-234.001" rx="302.141" ry="31.1127"/>
-<text text-anchor="middle" x="4432" y="-239.401" font-family="Times Roman,serif" font-size="14.00">Place</text>
-<text text-anchor="middle" x="4432" y="-221.401" font-family="Times Roman,serif" font-size="14.00">(HERAKLES_HUMAN1 GLUE_BOTTLE PLACEMENT_WL1_1 )</text>
-</g>
-<!-- node_64 -->
-<g id="node29" class="node"><title>node_64</title>
-<ellipse fill="#c1cdcd" stroke="black" cx="5017" cy="-194" rx="246.987" ry="31.1127"/>
-<text text-anchor="middle" x="5017" y="-199.4" font-family="Times Roman,serif" font-size="14.00">Bring</text>
-<text text-anchor="middle" x="5017" y="-181.4" font-family="Times Roman,serif" font-size="14.00">(PR2_ROBOT BRACKET_1 WORK_LOCATION_1 )</text>
-</g>
-<!-- node_65 -->
-<g id="node30" class="node"><title>node_65</title>
-<ellipse fill="#cce6ff" stroke="black" cx="5549" cy="-194" rx="248.194" ry="31.1127"/>
-<text text-anchor="middle" x="5549" y="-199.4" font-family="Times Roman,serif" font-size="14.00">Place</text>
-<text text-anchor="middle" x="5549" y="-181.4" font-family="Times Roman,serif" font-size="14.00">(PR2_ROBOT BRACKET_1 PLACEMENT_WL1_2 )</text>
-</g>
-<!-- node_69 -->
-<g id="node31" class="node"><title>node_69</title>
-<ellipse fill="#cce6ff" stroke="black" cx="4821" cy="-40" rx="157.184" ry="31.1127"/>
-<text text-anchor="middle" x="4821" y="-45.4" font-family="Times Roman,serif" font-size="14.00">TravelTo</text>
-<text text-anchor="middle" x="4821" y="-27.4" font-family="Times Roman,serif" font-size="14.00">(PR2_ROBOT STOCK_TABLE )</text>
-</g>
-<!-- node_70 -->
-<g id="node32" class="node"><title>node_70</title>
-<ellipse fill="#cce6ff" stroke="black" cx="5254" cy="-40" rx="237.795" ry="31.1127"/>
-<text text-anchor="middle" x="5254" y="-45.4" font-family="Times Roman,serif" font-size="14.00">Pick</text>
-<text text-anchor="middle" x="5254" y="-27.4" font-family="Times Roman,serif" font-size="14.00">(PR2_ROBOT BRACKET_1 PLACEMENT_ST_1 )</text>
-</g>
-<!-- node_71 -->
-<g id="node33" class="node"><title>node_71</title>
-<ellipse fill="#cce6ff" stroke="black" cx="5716" cy="-40" rx="186.176" ry="31.1127"/>
-<text text-anchor="middle" x="5716" y="-45.4" font-family="Times Roman,serif" font-size="14.00">TravelTo</text>
-<text text-anchor="middle" x="5716" y="-27.4" font-family="Times Roman,serif" font-size="14.00">(PR2_ROBOT WORK_LOCATION_1 )</text>
-</g>
-<!-- node_72 -->
-<g id="node34" class="node"><title>node_72</title>
-<ellipse fill="#ffffcc" stroke="black" cx="6120" cy="-194" rx="288" ry="31.1127"/>
-<text text-anchor="middle" x="6120" y="-199.4" font-family="Times Roman,serif" font-size="14.00">Pick</text>
-<text text-anchor="middle" x="6120" y="-181.4" font-family="Times Roman,serif" font-size="14.00">(HERAKLES_HUMAN1 BRACKET_1 PLACEMENT_WL1_2 )</text>
-</g>
-<!-- node_73 -->
-<g id="node35" class="node"><title>node_73</title>
-<ellipse fill="#ffffcc" stroke="black" cx="6748" cy="-194" rx="302.141" ry="31.1127"/>
-<text text-anchor="middle" x="6748" y="-199.4" font-family="Times Roman,serif" font-size="14.00">AttachBracket</text>
-<text text-anchor="middle" x="6748" y="-181.4" font-family="Times Roman,serif" font-size="14.00">(HERAKLES_HUMAN1 BRACKET_1 ASSEMBLY_SURFACE_1 )</text>
-</g>
-<!-- node_5&#45;&gt;cluster_5 -->
-<g id="edge16" class="edge"><title>node_5&#45;&gt;cluster_5</title>
-<path fill="none" stroke="black" stroke-width="2" d="M3251,-700.864C3251,-691.542 3251,-681.3 3251,-671.372"/>
-<polygon fill="black" stroke="black" points="3254.5,-671.192 3251,-661.192 3247.5,-671.192 3254.5,-671.192"/>
-</g>
-<!-- node_6&#45;&gt;cluster_8 -->
-<g id="edge17" class="edge"><title>node_6&#45;&gt;cluster_8</title>
-<path fill="none" stroke="black" stroke-width="2" d="M3251,-586.868C3251,-577.923 3251,-567.773 3251,-557.033"/>
-<polygon fill="black" stroke="black" points="3254.5,-557.022 3251,-547.022 3247.5,-557.022 3254.5,-557.022"/>
-</g>
-<!-- node_7&#45;&gt;cluster_0 -->
-<g id="edge18" class="edge"><title>node_7&#45;&gt;cluster_0</title>
-<path fill="none" stroke="black" stroke-width="2" d="M2179.95,-483.099C1865.29,-429.078 1117.45,-300.69 733.075,-234.701"/>
-<polygon fill="black" stroke="black" points="733.666,-231.251 723.218,-233.009 732.482,-238.15 733.666,-231.251"/>
-</g>
-<!-- node_7&#45;&gt;node_9 -->
-<g id="edge1" class="edge"><title>node_7&#45;&gt;node_9</title>
-<path fill="none" stroke="#9a32cd" d="M2487.18,-484.915C2552.38,-475.633 2628.05,-464.862 2695.9,-455.203"/>
-<polygon fill="#9a32cd" stroke="#9a32cd" points="2705.85,-453.786 2696.59,-459.651 2700.9,-454.491 2695.95,-455.196 2695.95,-455.196 2695.95,-455.196 2700.9,-454.491 2695.32,-450.741 2705.85,-453.786 2705.85,-453.786"/>
+<g id="node43" class="node"><title>node_31</title>
+<ellipse fill="#c1cdcd" stroke="black" cx="3305" cy="-268" rx="174.863" ry="31.1127"/>
+<text text-anchor="middle" x="3305" y="-273.4" font-family="Times Roman,serif" font-size="14.00">ApplyFirstOperations</text>
+<text text-anchor="middle" x="3305" y="-255.4" font-family="Times Roman,serif" font-size="14.00">(HERAKLES_HUMAN1 Red_Cube )</text>
+</g>
+<!-- node_32 -->
+<g id="node44" class="node"><title>node_32</title>
+<ellipse fill="#c1cdcd" stroke="black" cx="3693" cy="-268" rx="174.863" ry="31.1127"/>
+<text text-anchor="middle" x="3693" y="-273.4" font-family="Times Roman,serif" font-size="14.00">ApplySecondOperations</text>
+<text text-anchor="middle" x="3693" y="-255.4" font-family="Times Roman,serif" font-size="14.00">(HERAKLES_HUMAN1 Red_Cube )</text>
+</g>
+<!-- node_33 -->
+<g id="node45" class="node"><title>node_33</title>
+<ellipse fill="#cce6ff" stroke="black" cx="4134" cy="-268" rx="227.896" ry="31.1127"/>
+<text text-anchor="middle" x="4134" y="-273.4" font-family="Times Roman,serif" font-size="14.00">PlaceOnStack</text>
+<text text-anchor="middle" x="4134" y="-255.4" font-family="Times Roman,serif" font-size="14.00">(HERAKLES_HUMAN1 Red_Cube StackArea )</text>
+</g>
+<!-- node_34 -->
+<g id="node46" class="node"><title>node_34</title>
+<ellipse fill="#cce6ff" stroke="black" cx="3521" cy="-154" rx="174.863" ry="31.1127"/>
+<text text-anchor="middle" x="3521" y="-159.4" font-family="Times Roman,serif" font-size="14.00">Pick</text>
+<text text-anchor="middle" x="3521" y="-141.4" font-family="Times Roman,serif" font-size="14.00">(HERAKLES_HUMAN1 Red_Cube )</text>
+</g>
+<!-- node_35 -->
+<g id="node47" class="node"><title>node_35</title>
+<ellipse fill="#c1cdcd" stroke="black" cx="3940" cy="-154" rx="205.975" ry="31.1127"/>
+<text text-anchor="middle" x="3940" y="-159.4" font-family="Times Roman,serif" font-size="14.00">ApplyOperation</text>
+<text text-anchor="middle" x="3940" y="-141.4" font-family="Times Roman,serif" font-size="14.00">(HERAKLES_HUMAN1 Red_Cube Polish )</text>
+</g>
+<!-- node_37 -->
+<g id="node48" class="node"><title>node_37</title>
+<ellipse fill="#cce6ff" stroke="black" cx="3050" cy="-40" rx="244" ry="31.1127"/>
+<text text-anchor="middle" x="3050" y="-45.4" font-family="Times Roman,serif" font-size="14.00">Place</text>
+<text text-anchor="middle" x="3050" y="-27.4" font-family="Times Roman,serif" font-size="14.00">(HERAKLES_HUMAN1 Red_Cube PolishingArea )</text>
+</g>
+<!-- node_38 -->
+<g id="node49" class="node"><title>node_38</title>
+<ellipse fill="#cce6ff" stroke="black" cx="3605" cy="-40" rx="275.065" ry="31.1127"/>
+<text text-anchor="middle" x="3605" y="-45.4" font-family="Times Roman,serif" font-size="14.00">Apply</text>
+<text text-anchor="middle" x="3605" y="-27.4" font-family="Times Roman,serif" font-size="14.00">(HERAKLES_HUMAN1 Red_Cube Polish PolishingArea )</text>
+</g>
+<!-- node_39 -->
+<g id="node50" class="node"><title>node_39</title>
+<ellipse fill="#cce6ff" stroke="black" cx="4092" cy="-40" rx="174.863" ry="31.1127"/>
+<text text-anchor="middle" x="4092" y="-45.4" font-family="Times Roman,serif" font-size="14.00">Pick</text>
+<text text-anchor="middle" x="4092" y="-27.4" font-family="Times Roman,serif" font-size="14.00">(HERAKLES_HUMAN1 Red_Cube )</text>
+</g>
+<!-- node_40 -->
+<g id="node51" class="node"><title>node_40</title>
+<ellipse fill="#c1cdcd" stroke="black" cx="4821" cy="-154" rx="224.153" ry="31.1127"/>
+<text text-anchor="middle" x="4821" y="-159.4" font-family="Times Roman,serif" font-size="14.00">ApplyOperation</text>
+<text text-anchor="middle" x="4821" y="-141.4" font-family="Times Roman,serif" font-size="14.00">(HERAKLES_HUMAN1 Red_Cube Glue_Red )</text>
+</g>
+<!-- node_42 -->
+<g id="node52" class="node"><title>node_42</title>
+<ellipse fill="#cce6ff" stroke="black" cx="4535" cy="-40" rx="232.138" ry="31.1127"/>
+<text text-anchor="middle" x="4535" y="-45.4" font-family="Times Roman,serif" font-size="14.00">Place</text>
+<text text-anchor="middle" x="4535" y="-27.4" font-family="Times Roman,serif" font-size="14.00">(HERAKLES_HUMAN1 Red_Cube GluingArea )</text>
+</g>
+<!-- node_43 -->
+<g id="node53" class="node"><title>node_43</title>
+<ellipse fill="#cce6ff" stroke="black" cx="5086" cy="-40" rx="282.136" ry="31.1127"/>
+<text text-anchor="middle" x="5086" y="-45.4" font-family="Times Roman,serif" font-size="14.00">Apply</text>
+<text text-anchor="middle" x="5086" y="-27.4" font-family="Times Roman,serif" font-size="14.00">(HERAKLES_HUMAN1 Red_Cube Glue_Red GluingArea )</text>
+</g>
+<!-- node_44 -->
+<g id="node54" class="node"><title>node_44</title>
+<ellipse fill="#cce6ff" stroke="black" cx="5580" cy="-40" rx="174.863" ry="31.1127"/>
+<text text-anchor="middle" x="5580" y="-45.4" font-family="Times Roman,serif" font-size="14.00">Pick</text>
+<text text-anchor="middle" x="5580" y="-27.4" font-family="Times Roman,serif" font-size="14.00">(HERAKLES_HUMAN1 Red_Cube )</text>
+</g>
+<!-- node_1&#45;&gt;cluster_5 -->
+<g id="edge21" class="edge"><title>node_1&#45;&gt;cluster_5</title>
+<path fill="none" stroke="black" stroke-width="2" d="M1613,-688.868C1613,-679.545 1613,-669.302 1613,-659.374"/>
+<polygon fill="black" stroke="black" points="1616.5,-659.193 1613,-649.193 1609.5,-659.193 1616.5,-659.193"/>
+</g>
+<!-- node_2&#45;&gt;cluster_13 -->
+<g id="edge22" class="edge"><title>node_2&#45;&gt;cluster_13</title>
+<path fill="none" stroke="black" stroke-width="2" d="M1436.13,-582.258C1394.7,-569.029 1344.24,-552.915 1298.19,-538.212"/>
+<polygon fill="black" stroke="black" points="1299.03,-534.805 1288.44,-535.097 1296.9,-541.474 1299.03,-534.805"/>
+</g>
+<!-- node_2&#45;&gt;node_3 -->
+<g id="edge1" class="edge"><title>node_2&#45;&gt;node_3</title>
+<path fill="none" stroke="#9a32cd" d="M1714.27,-610C1723.36,-610 1732.23,-610 1740.74,-610"/>
+<polygon fill="#9a32cd" stroke="#9a32cd" points="1750.92,-610 1740.92,-614.5 1745.92,-610 1740.92,-610 1740.92,-610 1740.92,-610 1745.92,-610 1740.92,-605.5 1750.92,-610 1750.92,-610"/>
+</g>
+<!-- node_3&#45;&gt;cluster_2 -->
+<g id="edge23" class="edge"><title>node_3&#45;&gt;cluster_2</title>
+<path fill="none" stroke="black" stroke-width="2" d="M1871.25,-586.793C1899.45,-573.225 1935.97,-555.66 1969.36,-539.599"/>
+<polygon fill="black" stroke="black" points="1971.19,-542.603 1978.68,-535.114 1968.16,-536.295 1971.19,-542.603"/>
+</g>
+<!-- node_4&#45;&gt;cluster_16 -->
+<g id="edge24" class="edge"><title>node_4&#45;&gt;cluster_16</title>
+<path fill="none" stroke="black" stroke-width="2" d="M963.926,-464.849C966.572,-454.447 969.589,-442.589 972.496,-431.159"/>
+<polygon fill="black" stroke="black" points="975.938,-431.827 975.012,-421.272 969.154,-430.101 975.938,-431.827"/>
+</g>
+<!-- node_4&#45;&gt;node_6 -->
+<g id="edge2" class="edge"><title>node_4&#45;&gt;node_6</title>
+<path fill="none" stroke="#9a32cd" d="M1094.23,-496C1103.25,-496 1112.44,-496 1121.68,-496"/>
+<polygon fill="#9a32cd" stroke="#9a32cd" points="1131.73,-496 1121.73,-500.5 1126.73,-496 1121.73,-496 1121.73,-496 1121.73,-496 1126.73,-496 1121.73,-491.5 1131.73,-496 1131.73,-496"/>
+</g>
+<!-- node_7&#45;&gt;node_8 -->
+<g id="edge3" class="edge"><title>node_7&#45;&gt;node_8</title>
+<path fill="none" stroke="#9a32cd" d="M936.436,-382C945.185,-382 954.055,-382 962.95,-382"/>
+<polygon fill="#9a32cd" stroke="#9a32cd" points="972.998,-382 962.998,-386.5 967.998,-382 962.998,-382 962.998,-382 962.998,-382 967.998,-382 962.998,-377.5 972.998,-382 972.998,-382"/>
 </g>
 <!-- node_8&#45;&gt;cluster_1 -->
-<g id="edge19" class="edge"><title>node_8&#45;&gt;cluster_1</title>
-<path fill="none" stroke="black" stroke-width="2" d="M2221.2,-399.424C2072.51,-358.492 1797.97,-282.912 1626.56,-235.724"/>
-<polygon fill="black" stroke="black" points="1627.27,-232.288 1616.7,-233.009 1625.41,-239.037 1627.27,-232.288"/>
-</g>
-<!-- node_8&#45;&gt;node_9 -->
-<g id="edge2" class="edge"><title>node_8&#45;&gt;node_9</title>
-<path fill="none" stroke="#9a32cd" d="M2587.08,-428C2594.55,-428 2602.05,-428 2609.54,-428"/>
-<polygon fill="#9a32cd" stroke="#9a32cd" points="2619.75,-428 2609.75,-432.5 2614.75,-428 2609.75,-428 2609.75,-428 2609.75,-428 2614.75,-428 2609.75,-423.5 2619.75,-428 2619.75,-428"/>
-</g>
-<!-- node_9&#45;&gt;cluster_2 -->
-<g id="edge20" class="edge"><title>node_9&#45;&gt;cluster_2</title>
-<path fill="none" stroke="black" stroke-width="2" d="M2837.42,-393.473C2778.63,-352.531 2680.49,-284.177 2615.75,-239.092"/>
-<polygon fill="black" stroke="black" points="2617.44,-236.008 2607.24,-233.165 2613.44,-241.752 2617.44,-236.008"/>
-</g>
-<!-- node_9&#45;&gt;node_10 -->
-<g id="edge3" class="edge"><title>node_9&#45;&gt;node_10</title>
-<path fill="none" stroke="#9a32cd" d="M3149.72,-421.487C3159.42,-421.246 3169.18,-421.004 3178.96,-420.762"/>
-<polygon fill="#9a32cd" stroke="#9a32cd" points="3189.15,-420.509 3179.26,-425.256 3184.15,-420.633 3179.15,-420.757 3179.15,-420.757 3179.15,-420.757 3184.15,-420.633 3179.04,-416.258 3189.15,-420.509 3189.15,-420.509"/>
-</g>
-<!-- node_10&#45;&gt;cluster_3 -->
-<g id="edge21" class="edge"><title>node_10&#45;&gt;cluster_3</title>
-<path fill="none" stroke="black" stroke-width="2" d="M3563.62,-378.902C3620.41,-351.866 3702.24,-312.909 3776.15,-277.719"/>
-<polygon fill="black" stroke="black" points="3778.07,-280.684 3785.59,-273.226 3775.06,-274.364 3778.07,-280.684"/>
-</g>
-<!-- node_10&#45;&gt;node_12 -->
-<g id="edge4" class="edge"><title>node_10&#45;&gt;node_12</title>
-<path fill="none" stroke="#9a32cd" d="M3774.44,-398.55C3801.67,-397.157 3829.28,-395.744 3856.49,-394.352"/>
-<polygon fill="#9a32cd" stroke="#9a32cd" points="3866.49,-393.84 3856.74,-398.845 3861.5,-394.096 3856.51,-394.351 3856.51,-394.351 3856.51,-394.351 3861.5,-394.096 3856.28,-389.857 3866.49,-393.84 3866.49,-393.84"/>
-</g>
-<!-- node_11&#45;&gt;cluster_6 -->
-<g id="edge22" class="edge"><title>node_11&#45;&gt;cluster_6</title>
-<path fill="none" stroke="black" stroke-width="2" d="M2564.87,-335.512C3038.31,-310.864 4102.99,-255.434 4750.43,-221.727"/>
-<polygon fill="black" stroke="black" points="4751.08,-225.198 4760.88,-221.183 4750.72,-218.208 4751.08,-225.198"/>
+<g id="edge25" class="edge"><title>node_8&#45;&gt;cluster_1</title>
+<path fill="none" stroke="black" stroke-width="2" d="M1039.01,-357.334C980.648,-343.356 906.098,-325.502 839.01,-309.435"/>
+<polygon fill="black" stroke="black" points="839.709,-306.003 829.169,-307.078 838.079,-312.811 839.709,-306.003"/>
+</g>
+<!-- node_10&#45;&gt;node_11 -->
+<g id="edge4" class="edge"><title>node_10&#45;&gt;node_11</title>
+<path fill="none" stroke="#9a32cd" d="M460.318,-268C469.139,-268 478.013,-268 486.899,-268"/>
+<polygon fill="#9a32cd" stroke="#9a32cd" points="496.933,-268 486.933,-272.5 491.933,-268 486.933,-268 486.933,-268 486.933,-268 491.933,-268 486.933,-263.5 496.933,-268 496.933,-268"/>
 </g>
 <!-- node_11&#45;&gt;node_12 -->
 <g id="edge5" class="edge"><title>node_11&#45;&gt;node_12</title>
-<path fill="none" stroke="#9a32cd" d="M2584.14,-352.577C2912.83,-358.381 3478.93,-368.379 3829.25,-374.565"/>
-<polygon fill="#9a32cd" stroke="#9a32cd" points="3839.29,-374.743 3829.22,-379.065 3834.3,-374.654 3829.3,-374.566 3829.3,-374.566 3829.3,-374.566 3834.3,-374.654 3829.38,-370.067 3839.29,-374.743 3839.29,-374.743"/>
+<path fill="none" stroke="#9a32cd" d="M1009.01,-268C1018.05,-268 1026.99,-268 1035.77,-268"/>
+<polygon fill="#9a32cd" stroke="#9a32cd" points="1046,-268 1036,-272.5 1041,-268 1036,-268 1036,-268 1036,-268 1041,-268 1036,-263.5 1046,-268 1046,-268"/>
 </g>
-<!-- node_12&#45;&gt;cluster_9 -->
-<g id="edge23" class="edge"><title>node_12&#45;&gt;cluster_9</title>
-<path fill="none" stroke="black" stroke-width="2" d="M4374.62,-360.817C4743.84,-331.011 5463.14,-272.942 5947.91,-233.807"/>
-<polygon fill="black" stroke="black" points="5948.2,-237.295 5957.89,-233.001 5947.64,-230.317 5948.2,-237.295"/>
+<!-- node_13&#45;&gt;cluster_3 -->
+<g id="edge26" class="edge"><title>node_13&#45;&gt;cluster_3</title>
+<path fill="none" stroke="black" stroke-width="2" d="M1994.35,-465.15C2003.15,-454.007 2013.29,-441.162 2022.93,-428.952"/>
+<polygon fill="black" stroke="black" points="2025.72,-431.062 2029.17,-421.044 2020.23,-426.724 2025.72,-431.062"/>
 </g>
 <!-- node_13&#45;&gt;node_14 -->
 <g id="edge6" class="edge"><title>node_13&#45;&gt;node_14</title>
-<path fill="none" stroke="#9a32cd" d="M463.018,-194C471.586,-194 480.194,-194 488.802,-194"/>
-<polygon fill="#9a32cd" stroke="#9a32cd" points="498.903,-194 488.904,-198.5 493.903,-194 488.903,-194 488.903,-194 488.903,-194 493.903,-194 488.903,-189.5 498.903,-194 498.903,-194"/>
+<path fill="none" stroke="#9a32cd" d="M2210.01,-496C2219.19,-496 2228.09,-496 2236.58,-496"/>
+<polygon fill="#9a32cd" stroke="#9a32cd" points="2246.73,-496 2236.73,-500.5 2241.73,-496 2236.73,-496 2236.73,-496 2236.73,-496 2241.73,-496 2236.73,-491.5 2246.73,-496 2246.73,-496"/>
+</g>
+<!-- node_14&#45;&gt;cluster_9 -->
+<g id="edge27" class="edge"><title>node_14&#45;&gt;cluster_9</title>
+<path fill="none" stroke="black" stroke-width="2" d="M2389.55,-489.126C2554.44,-473.059 2971.54,-432.419 3241.97,-406.07"/>
+<polygon fill="black" stroke="black" points="3242.31,-409.553 3251.92,-405.1 3241.63,-402.586 3242.31,-409.553"/>
+</g>
+<!-- node_15&#45;&gt;cluster_4 -->
+<g id="edge28" class="edge"><title>node_15&#45;&gt;cluster_4</title>
+<path fill="none" stroke="black" stroke-width="2" d="M1649.64,-352.197C1672.15,-339.917 1698.7,-325.437 1723.37,-311.98"/>
+<polygon fill="black" stroke="black" points="1725.26,-314.936 1732.36,-307.075 1721.91,-308.791 1725.26,-314.936"/>
 </g>
 <!-- node_15&#45;&gt;node_16 -->
 <g id="edge7" class="edge"><title>node_15&#45;&gt;node_16</title>
-<path fill="none" stroke="#9a32cd" d="M1522.29,-194C1531.43,-194 1540.55,-194 1549.58,-194"/>
-<polygon fill="#9a32cd" stroke="#9a32cd" points="1559.74,-194 1549.74,-198.5 1554.74,-194 1549.74,-194 1549.74,-194 1549.74,-194 1554.74,-194 1549.74,-189.5 1559.74,-194 1559.74,-194"/>
-</g>
-<!-- node_17&#45;&gt;node_18 -->
-<g id="edge8" class="edge"><title>node_17&#45;&gt;node_18</title>
-<path fill="none" stroke="#9a32cd" d="M2492.3,-194C2501.28,-194 2510.3,-194 2519.34,-194"/>
-<polygon fill="#9a32cd" stroke="#9a32cd" points="2529.55,-194 2519.55,-198.5 2524.55,-194 2519.55,-194 2519.55,-194 2519.55,-194 2524.55,-194 2519.55,-189.5 2529.55,-194 2529.55,-194"/>
-</g>
-<!-- node_28&#45;&gt;node_29 -->
-<g id="edge9" class="edge"><title>node_28&#45;&gt;node_29</title>
-<path fill="none" stroke="#9a32cd" d="M3572.13,-194C3580.99,-194 3589.92,-194 3598.88,-194"/>
-<polygon fill="#9a32cd" stroke="#9a32cd" points="3609,-194 3599,-198.5 3604,-194 3599,-194 3599,-194 3599,-194 3604,-194 3599,-189.5 3609,-194 3609,-194"/>
-</g>
-<!-- node_29&#45;&gt;node_30 -->
-<g id="edge10" class="edge"><title>node_29&#45;&gt;node_30</title>
-<path fill="none" stroke="#9a32cd" d="M4064.46,-179.304C4121.41,-175.383 4182.62,-171.169 4238.44,-167.326"/>
-<polygon fill="#9a32cd" stroke="#9a32cd" points="4248.43,-166.638 4238.76,-171.815 4243.44,-166.982 4238.46,-167.325 4238.46,-167.325 4238.46,-167.325 4243.44,-166.982 4238.15,-162.836 4248.43,-166.638 4248.43,-166.638"/>
-</g>
-<!-- node_29&#45;&gt;node_31 -->
-<g id="edge11" class="edge"><title>node_29&#45;&gt;node_31</title>
-<path fill="none" stroke="#9a32cd" d="M4064.46,-208.696C4099.08,-211.08 4135.27,-213.571 4170.87,-216.022"/>
-<polygon fill="#9a32cd" stroke="#9a32cd" points="4180.89,-216.712 4170.6,-220.515 4175.9,-216.369 4170.91,-216.025 4170.91,-216.025 4170.91,-216.025 4175.9,-216.369 4171.22,-211.536 4180.89,-216.712 4180.89,-216.712"/>
-</g>
-<!-- node_64&#45;&gt;cluster_7 -->
-<g id="edge24" class="edge"><title>node_64&#45;&gt;cluster_7</title>
-<path fill="none" stroke="black" stroke-width="2" d="M5069.55,-163.575C5108.65,-140.941 5162.6,-109.707 5206.48,-84.3035"/>
-<polygon fill="black" stroke="black" points="5208.49,-87.1803 5215.39,-79.1408 5204.99,-81.1223 5208.49,-87.1803"/>
-</g>
-<!-- node_64&#45;&gt;node_65 -->
-<g id="edge12" class="edge"><title>node_64&#45;&gt;node_65</title>
-<path fill="none" stroke="#9a32cd" d="M5264.31,-194C5273.18,-194 5282.08,-194 5290.97,-194"/>
-<polygon fill="#9a32cd" stroke="#9a32cd" points="5301,-194 5291,-198.5 5296,-194 5291,-194 5291,-194 5291,-194 5296,-194 5291,-189.5 5301,-194 5301,-194"/>
-</g>
-<!-- node_69&#45;&gt;node_70 -->
-<g id="edge13" class="edge"><title>node_69&#45;&gt;node_70</title>
-<path fill="none" stroke="#9a32cd" d="M4978.24,-40C4987.3,-40 4996.51,-40 5005.8,-40"/>
-<polygon fill="#9a32cd" stroke="#9a32cd" points="5015.91,-40 5005.91,-44.5001 5010.91,-40.0001 5005.91,-40.0001 5005.91,-40.0001 5005.91,-40.0001 5010.91,-40.0001 5005.91,-35.5001 5015.91,-40 5015.91,-40"/>
-</g>
-<!-- node_70&#45;&gt;node_71 -->
-<g id="edge14" class="edge"><title>node_70&#45;&gt;node_71</title>
-<path fill="none" stroke="#9a32cd" d="M5492.1,-40C5501.33,-40 5510.54,-40 5519.68,-40"/>
-<polygon fill="#9a32cd" stroke="#9a32cd" points="5529.96,-40 5519.96,-44.5001 5524.96,-40.0001 5519.96,-40.0001 5519.96,-40.0001 5519.96,-40.0001 5524.96,-40.0001 5519.96,-35.5001 5529.96,-40 5529.96,-40"/>
-</g>
-<!-- node_72&#45;&gt;node_73 -->
-<g id="edge15" class="edge"><title>node_72&#45;&gt;node_73</title>
-<path fill="none" stroke="#9a32cd" d="M6408.27,-194C6417.29,-194 6426.33,-194 6435.38,-194"/>
-<polygon fill="#9a32cd" stroke="#9a32cd" points="6445.59,-194 6435.59,-198.5 6440.59,-194 6435.59,-194 6435.59,-194 6435.59,-194 6440.59,-194 6435.59,-189.5 6445.59,-194 6445.59,-194"/>
+<path fill="none" stroke="#9a32cd" d="M1782.01,-382C1791.23,-382 1800.5,-382 1809.74,-382"/>
+<polygon fill="#9a32cd" stroke="#9a32cd" points="1819.76,-382 1809.76,-386.5 1814.76,-382 1809.76,-382 1809.76,-382 1809.76,-382 1814.76,-382 1809.76,-377.5 1819.76,-382 1819.76,-382"/>
+</g>
+<!-- node_16&#45;&gt;cluster_7 -->
+<g id="edge29" class="edge"><title>node_16&#45;&gt;cluster_7</title>
+<path fill="none" stroke="black" stroke-width="2" d="M2121.03,-357.334C2185.98,-343.283 2269.04,-325.315 2343.62,-309.183"/>
+<polygon fill="black" stroke="black" points="2344.58,-312.557 2353.61,-307.022 2343.1,-305.715 2344.58,-312.557"/>
+</g>
+<!-- node_16&#45;&gt;node_17 -->
+<g id="edge8" class="edge"><title>node_16&#45;&gt;node_17</title>
+<path fill="none" stroke="#9a32cd" d="M2194.12,-382C2203.3,-382 2212.57,-382 2221.88,-382"/>
+<polygon fill="#9a32cd" stroke="#9a32cd" points="2231.99,-382 2221.99,-386.5 2226.99,-382 2221.99,-382 2221.99,-382 2221.99,-382 2226.99,-382 2221.99,-377.5 2231.99,-382 2231.99,-382"/>
+</g>
+<!-- node_18&#45;&gt;node_19 -->
+<g id="edge9" class="edge"><title>node_18&#45;&gt;node_19</title>
+<path fill="none" stroke="#9a32cd" d="M1732.13,-268C1741.3,-268 1750.57,-268 1759.88,-268"/>
+<polygon fill="#9a32cd" stroke="#9a32cd" points="1770,-268 1760,-272.5 1765,-268 1760,-268 1760,-268 1760,-268 1765,-268 1760,-263.5 1770,-268 1770,-268"/>
+</g>
+<!-- node_19&#45;&gt;cluster_6 -->
+<g id="edge30" class="edge"><title>node_19&#45;&gt;cluster_6</title>
+<path fill="none" stroke="black" stroke-width="2" d="M1822.84,-248.532C1679.43,-233.615 1476.67,-212.525 1299.04,-194.049"/>
+<polygon fill="black" stroke="black" points="1299.3,-190.557 1288.99,-193.004 1298.57,-197.52 1299.3,-190.557"/>
+</g>
+<!-- node_21&#45;&gt;node_22 -->
+<g id="edge10" class="edge"><title>node_21&#45;&gt;node_22</title>
+<path fill="none" stroke="#9a32cd" d="M637.064,-154C645.582,-154 654.146,-154 662.729,-154"/>
+<polygon fill="#9a32cd" stroke="#9a32cd" points="672.811,-154 662.811,-158.5 667.811,-154 662.811,-154 662.811,-154 662.811,-154 667.811,-154 662.811,-149.5 672.811,-154 672.811,-154"/>
+</g>
+<!-- node_22&#45;&gt;node_23 -->
+<g id="edge11" class="edge"><title>node_22&#45;&gt;node_23</title>
+<path fill="none" stroke="#9a32cd" d="M1311.01,-154C1319.97,-154 1328.86,-154 1337.63,-154"/>
+<polygon fill="#9a32cd" stroke="#9a32cd" points="1347.88,-154 1337.88,-158.5 1342.88,-154 1337.88,-154 1337.88,-154 1337.88,-154 1342.88,-154 1337.88,-149.5 1347.88,-154 1347.88,-154"/>
+</g>
+<!-- node_24&#45;&gt;cluster_8 -->
+<g id="edge31" class="edge"><title>node_24&#45;&gt;cluster_8</title>
+<path fill="none" stroke="black" stroke-width="2" d="M2534,-236.849C2534,-226.552 2534,-214.828 2534,-203.505"/>
+<polygon fill="black" stroke="black" points="2537.5,-203.272 2534,-193.272 2530.5,-203.272 2537.5,-203.272"/>
+</g>
+<!-- node_26&#45;&gt;node_27 -->
+<g id="edge12" class="edge"><title>node_26&#45;&gt;node_27</title>
+<path fill="none" stroke="#9a32cd" d="M2248.1,-154C2256.94,-154 2265.83,-154 2274.76,-154"/>
+<polygon fill="#9a32cd" stroke="#9a32cd" points="2284.85,-154 2274.85,-158.5 2279.85,-154 2274.85,-154 2274.85,-154 2274.85,-154 2279.85,-154 2274.85,-149.5 2284.85,-154 2284.85,-154"/>
+</g>
+<!-- node_27&#45;&gt;node_28 -->
+<g id="edge13" class="edge"><title>node_27&#45;&gt;node_28</title>
+<path fill="none" stroke="#9a32cd" d="M2899.35,-154C2908.17,-154 2916.93,-154 2925.58,-154"/>
+<polygon fill="#9a32cd" stroke="#9a32cd" points="2935.69,-154 2925.69,-158.5 2930.69,-154 2925.69,-154 2925.69,-154 2925.69,-154 2930.69,-154 2925.69,-149.5 2935.69,-154 2935.69,-154"/>
+</g>
+<!-- node_29&#45;&gt;cluster_10 -->
+<g id="edge32" class="edge"><title>node_29&#45;&gt;cluster_10</title>
+<path fill="none" stroke="black" stroke-width="2" d="M3555.85,-352.346C3584.02,-339.85 3617.37,-325.057 3648.21,-311.376"/>
+<polygon fill="black" stroke="black" points="3649.97,-314.423 3657.7,-307.169 3647.14,-308.025 3649.97,-314.423"/>
+</g>
+<!-- node_31&#45;&gt;cluster_11 -->
+<g id="edge33" class="edge"><title>node_31&#45;&gt;cluster_11</title>
+<path fill="none" stroke="black" stroke-width="2" d="M3403.97,-242.416C3457.25,-228.642 3524.31,-211.309 3584.89,-195.647"/>
+<polygon fill="black" stroke="black" points="3586.14,-198.939 3594.95,-193.048 3584.39,-192.162 3586.14,-198.939"/>
+</g>
+<!-- node_31&#45;&gt;node_32 -->
+<g id="edge14" class="edge"><title>node_31&#45;&gt;node_32</title>
+<path fill="none" stroke="#9a32cd" d="M3480.27,-268C3489.32,-268 3498.42,-268 3507.5,-268"/>
+<polygon fill="#9a32cd" stroke="#9a32cd" points="3517.73,-268 3507.73,-272.5 3512.73,-268 3507.73,-268 3507.73,-268 3507.73,-268 3512.73,-268 3507.73,-263.5 3517.73,-268 3517.73,-268"/>
+</g>
+<!-- node_32&#45;&gt;cluster_14 -->
+<g id="edge34" class="edge"><title>node_32&#45;&gt;cluster_14</title>
+<path fill="none" stroke="black" stroke-width="2" d="M3845.13,-252.625C4033.39,-233.599 4356.28,-200.966 4578.77,-178.48"/>
+<polygon fill="black" stroke="black" points="4579.36,-181.939 4588.96,-177.451 4578.66,-174.974 4579.36,-181.939"/>
+</g>
+<!-- node_32&#45;&gt;node_33 -->
+<g id="edge15" class="edge"><title>node_32&#45;&gt;node_33</title>
+<path fill="none" stroke="#9a32cd" d="M3868.25,-268C3877.34,-268 3886.53,-268 3895.77,-268"/>
+<polygon fill="#9a32cd" stroke="#9a32cd" points="3905.81,-268 3895.81,-272.5 3900.81,-268 3895.81,-268 3895.81,-268 3895.81,-268 3900.81,-268 3895.81,-263.5 3905.81,-268 3905.81,-268"/>
+</g>
+<!-- node_34&#45;&gt;node_35 -->
+<g id="edge16" class="edge"><title>node_34&#45;&gt;node_35</title>
+<path fill="none" stroke="#9a32cd" d="M3696.27,-154C3705.41,-154 3714.63,-154 3723.88,-154"/>
+<polygon fill="#9a32cd" stroke="#9a32cd" points="3733.92,-154 3723.92,-158.5 3728.92,-154 3723.92,-154 3723.92,-154 3723.92,-154 3728.92,-154 3723.92,-149.5 3733.92,-154 3733.92,-154"/>
+</g>
+<!-- node_35&#45;&gt;cluster_12 -->
+<g id="edge35" class="edge"><title>node_35&#45;&gt;cluster_12</title>
+<path fill="none" stroke="black" stroke-width="2" d="M3843.21,-126.622C3795.75,-113.195 3737.55,-96.7315 3684.68,-81.7766"/>
+<polygon fill="black" stroke="black" points="3685.45,-78.3571 3674.88,-79.0029 3683.55,-85.0928 3685.45,-78.3571"/>
+</g>
+<!-- node_37&#45;&gt;node_38 -->
+<g id="edge17" class="edge"><title>node_37&#45;&gt;node_38</title>
+<path fill="none" stroke="#9a32cd" d="M3294.24,-40C3302.7,-40 3311.21,-40 3319.73,-40"/>
+<polygon fill="#9a32cd" stroke="#9a32cd" points="3329.73,-40 3319.73,-44.5001 3324.73,-40.0001 3319.73,-40.0001 3319.73,-40.0001 3319.73,-40.0001 3324.73,-40.0001 3319.73,-35.5001 3329.73,-40 3329.73,-40"/>
+</g>
+<!-- node_38&#45;&gt;node_39 -->
+<g id="edge18" class="edge"><title>node_38&#45;&gt;node_39</title>
+<path fill="none" stroke="#9a32cd" d="M3880.16,-40C3889.07,-40 3897.92,-40 3906.66,-40"/>
+<polygon fill="#9a32cd" stroke="#9a32cd" points="3916.87,-40 3906.87,-44.5001 3911.87,-40.0001 3906.87,-40.0001 3906.87,-40.0001 3906.87,-40.0001 3911.87,-40.0001 3906.87,-35.5001 3916.87,-40 3916.87,-40"/>
+</g>
+<!-- node_40&#45;&gt;cluster_15 -->
+<g id="edge36" class="edge"><title>node_40&#45;&gt;cluster_15</title>
+<path fill="none" stroke="black" stroke-width="2" d="M4875.92,-123.899C4898.22,-111.678 4924.42,-97.3179 4948.78,-83.9656"/>
+<polygon fill="black" stroke="black" points="4950.57,-86.9733 4957.66,-79.0978 4947.21,-80.8348 4950.57,-86.9733"/>
+</g>
+<!-- node_42&#45;&gt;node_43 -->
+<g id="edge19" class="edge"><title>node_42&#45;&gt;node_43</title>
+<path fill="none" stroke="#9a32cd" d="M4767.08,-40C4775.94,-40 4784.87,-40 4793.83,-40"/>
+<polygon fill="#9a32cd" stroke="#9a32cd" points="4803.94,-40 4793.94,-44.5001 4798.94,-40.0001 4793.94,-40.0001 4793.94,-40.0001 4793.94,-40.0001 4798.94,-40.0001 4793.94,-35.5001 4803.94,-40 4803.94,-40"/>
+</g>
+<!-- node_43&#45;&gt;node_44 -->
+<g id="edge20" class="edge"><title>node_43&#45;&gt;node_44</title>
+<path fill="none" stroke="#9a32cd" d="M5368.35,-40C5377.2,-40 5386,-40 5394.68,-40"/>
+<polygon fill="#9a32cd" stroke="#9a32cd" points="5404.82,-40 5394.82,-44.5001 5399.82,-40.0001 5394.82,-40.0001 5394.82,-40.0001 5394.82,-40.0001 5399.82,-40.0001 5394.82,-35.5001 5404.82,-40 5404.82,-40"/>
 </g>
 </g>
 </svg>
diff --git a/supervisor/#Tester.opf# b/supervisor/#Tester.opf#
deleted file mode 100644
index 9c4f074..0000000
--- a/supervisor/#Tester.opf#
+++ /dev/null
@@ -1,965 +0,0 @@
-; -*-Lisp-*-
-;;author: Michelangelo Fiore
-
-;;This file contains procedures to test the single modules of the
-;system.
-
-
-(
-
-
- (defop |testMapSwitch|
-   :invocation (!(Tester.testMapSwitch))
-   :body (
-          (!(= @plan (. 0 1 2 3 .)))
-
-          (!(= @currentNode (CAR @plan)))
-          (!(= @plan (CDR @plan)))
-          (WHILE(?(~(NULL @plan)))
-                (!(= @nextNode (CAR @plan)))
-                (!(= @plan (CDR @plan)))
-                (!(SEND-MESSAGE spencer_map_server (spencer_map_server.request switchMap @currentNode @nextNode)))
-                (^(spencer_map_server.switchMap.report @report))
-                (!(SEND-MESSAGE spencer_map_server (spencer_map_server.request getCenter @nextNode)))
-                (^(spencer_map_server.getCenter.report @report))
-                (^(spencer_map_server.getCenter.result @x @y))
-
-                (!(BaseActions.getFreeId @moveId))
-                (!(ReportManager.sub BaseActions.report @moveId))
-                (=>(BaseActions.action move (. (. @x @y 0 .) .)))
-                (!(DatabaseInterface.addMonitor (AGENT-STATEMENT SPENCER_ROBOT pr2_robot isAt @nextNode) (Monitor.atNextLocation)))
-                (^(Monitor.atNextLocation))
-                (=>(BaseActions.stop @moveId))
-                (^(BaseActions.report (VAL @moveId) @report))
-                (~>(BaseActions.report (VAL @moveId) (VAL @report)))
-                (~>(Monitor.atNextLocation))
-                )
-
-          )
-   )
-
- (defop |testEstimateIntentions|
-   :invocation(!(Tester.testEstimate))
-   :body (
-          (!(Controller.initAll))
-          (!(FakeExecution.lmp))
-          (!(Softmotion.getFreeId @smId))
-          (=>(Softmotion.request moveHead -0.2 0.1 @smId))
-          (^(Softmotion.report (VAL @smId) @report))
-
-          (!(SEND-MESSAGE EstimateIntentions (EstimateIntentions.start (. EatCookies DrinkWater FillCookies .) (. human_take_waterBottle human_take_glass human_open_cookieBox human_move_fridge .) (. BOTTLE GLASS COOKIE_BOX FRIDGE .) (. HotDay SnackTime .) )))
-                                        ;         (!(SEND-MESSAGE EstimateIntentions (EstimateIntentions.start (. ReadBook PrepareDinner ListenToMusic UseTelephone .) (. human_move_table human_move_nightstand human_move_library human_move_sofa .) (. TABLE NIGHSTAND LIBRARY SOFA .) (. AfterWork DinnerTime .) )))
-
-          (^(EstimateIntentions.rosResult @intention @iprob @action @aprob @q))
-          (!(FakeExecution.giveDrink))
-          )
-
-   )
-
-(defop |testSpencer|
-  :invocation(!(Tester.testSpencer))
-  :body (
-         (!(Controller.initAll))
-         (=>(ExecutionManager.execute guideGroup 0 goal 0))
-         )
-  )
-
-(defop |testRegisterChanges|
-  :invocation(!(Tester.testRegisterChanges))
-  :body (
-         (!(Controller.initAll))
-         (!(AgentActionMonitor.startMonitoringAgent HERAKLES_HUMAN1))
-         )
-  )
-
-(defop |testInference|
-  :invocation(!(Tester.testInference))
-  :body (
-         (!(Controller.initAll))
-         (!(AgentActionMonitor.calculateInferencesForAgents (. HERAKLES_HUMAN1 .)))
-         )
-
-  )
-
-(defop |testInferenceOnPickPlace|
-  :invocation(!(Tester.testInferenceOnPickPlace))
-  :body (
-         (!(Controller.initAll))
-
-         (!(AgentActionMonitor.calculateInferencesForAgents (. HERAKLES_HUMAN1 .)))
-         (=>(ExecutionManager.execute take GLUE_BOTTLE RIGHT 0))
-         (^(ExecutionManager.report 0 @report))
-         (=>(ExecutionManager.execute handover GIVE GLUE_BOTTLE HERAKLES_HUMAN1 1))
-         (^(ExecutionManager.report 1 @report))
-
-         )
-  )
-
-(defop |testPickGive|
-  :invocation(!(Tester.testPickGive))
-  :body (
-         (!(Controller.initAll))
-         (=>(ExecutionManager.execute take LOTR_TAPE RIGHT 0))
-          (^(ExecutionManager.report 0 @report))
-
-          (=>(ExecutionManager.execute simpleHandover GIVE LOTR_TAPE HERAKLES_HUMAN1 1))
-          (^(ExecutionManager.report 1 @report))
-          )
-)
-
- (defop |testSendMessage|
-   :invocation(!(Tester.testSendMessage))
-   :body (
-          (!(= @report "OK"))
-          (!(SEND-MESSAGE asd (AttentionalInterface.report @report)))
-          )
-   )
-
-
- (defop |testReportManager|
-   :invocation(!(Tester.testReportManager))
-   :body (
-          (!(ReportManager.sub ExecutionManager.report 0))
-          ;; (!(ReportManager.sub ExecutionManager.report 0))
-          ;; (!(ReportManager.unsub ExecutionManager.report 0))
-          ;; (!(ReportManager.unsub ExecutionManager.report 0))
-
-          (!(ReportManager.publish ExecutionManager.report 0 OK))
-
-          )
-   )
- (defop |testGuide| 
-   :invocation (!(Tester.testGuide @agent))
-   :body (
-	  (!(Controller.initAll))
-	  (!(ExecutionManager.getFreeId @approachId))
-	  (=>(ExecutionManager.execute approachPerson @agent @approachId))
-	  (^(ExecutionManager.report (VAL @approachId) @report))
-	  (~>(ExecutionManager.report (VAL @approachId) @report))
-
-	  (^(ELAPSED-TIME (TIME) 6))
-	  (!(ExecutionManager.getFreeId @guideId))
-	  (=>(ExecutionManager.execute startGuide @guideId))
-	  (^(ExecutionManager.report (VAL @guideId) @report))
-	  )
-   )
-
- (defop |testGoBase|
-   :invocation(!(Tester.testGoBase))
-   :body (
-	  (!(Controller.initAll))
-	  (=>(BaseActions.action move (. (. 0 0 0 .) .) 0))
-	  (^(BaseActions.report 0 @report))
-	  )
-   )
-
- (defop |testSpencerGo|
-   :invocation(!(Tester.testSpencerGo))
-   :body (
-	  (!(Controller.initAll))
-	  (=>(BaseActions.action move (. (. 2 0 -90 .) .) 0))
-	  (^(BaseActions.report 0 @report))
-	  (~>(BaseActions.report 0 @report))
-          (^(ELAPSED-TIME (TIME) 5))
-	  (=>(BaseActions.action move (. (. -2 0 90 .) .) 1))
-;          (=>(BaseActions.action move (. (. -4.8 8 -90 .) .) 1))
-          (^(BaseActions.report 1 @report))
-          (~>(BaseActions.report 1 @report))
-	  )
-   )
- (defop |testGtpGoto|
-   :invocation (!(Tester.testGtpGoto))
-   :body (
-	  (!(Controller.initAll))
-	  (=>(GtpActions.action travelTo NO_NAME (. 2.5 2 0 .) 0))
-	  )
-   )
-
-(defop |testRosMoveHead| 
-   :invocation(!(TestRosMoveHead))
-   :body (
-	  (!(SEND-MESSAGE HeadBridge (moveHead pan 1)))
-	  (^(HeadBridge.response @response))
-			 
-	  )
-   )
-
- (defop |testGtpPlan|
-   :invocation(!(Tester.testGtpPlan))
-   :body (
-	  (!(Controller.initAll))
-	  
-	  (=>(Mhp.request initGtp 0))
-	  (^(Mhp.report 0 @any))
-	  (=>(Mhp.request fetchEnvironment 1))
-
-	  (^(Mhp.report 1 @any))
-	  (=>(Mhp.request addGtpAgent mainAgent PR2_ROBOT 2))
-	  (^(Mhp.report 2 @any))
-	  (=>(Mhp.request addGtpObject mainObject WALLE_TAPE 3))
-	  (^(Mhp.report 3 @any))
-	  (=>(Mhp.request addGtpData hand right 4))
-	  (^(Mhp.report 4 @any))
-	  (=>(Mhp.request planGtpTask pick 5))
-	  (^(Mhp.report 5 @any))
-	  )
-   )
-
-
- (defop |testGtpTake|
-   :invocation(!(Tester.testGtpTake))
-   :body (
-	  (!(Controller.initAll))
-	  (=>(GtpActions.action pick BLUE_CUBE RIGHT 0))
-	  (^(GtpActions.report 0 @report))
-	  (~>(GtpActions.report @id @report))
-	  
-	  (=>(GtpActions.action place BLUE_CUBE TABLE_4 PLACEMAT_BLUE (. .) RIGHT 1))
-	  (^(GtpActions.report 1 @report))
-	  (~>(GtpActions.report @id @report))
-	  )
-   )
- 
- (defop |testGtpPlace|
-   :invocation(!(Tester.testGtpPlace))
-   :body (
-	  (=>(GtpActions.action place BLUE_CUBE TABLE_4 PLACEMAT_BLUE (. .) RIGHT 1))
-	  (^(GtpActions.report 1 @report))
-	  (~>(GtpActions.report @id @report))
-	  )
-   )
-(defop |testPlanTake|
-  :invocation(!(Tester.testPlanTake))
-  :body (
-	 (!(Controller.initAll))
-	 (!(Connector.setPlanManager))
-	 (=>(PlanManager.goal TakeObject (. PR2_ROBOT GREY_TAPE .)))
-	 (=>(PlanManager.newGoal TRUE))
-
-	 )
-  )
-
-(defop |testBaseActions|
-  :invocation(!(Tester.testBaseActions))
-  :body (
-	 (!(BaseActions.init))
-	 (!(BaseActions.getFreeId @id))
-	 (=>(BaseActions.action move (. (. 1.5 2 0 .) .) @id ))
-	 )
-  )
-
- (defop |testSpeak|
-   :invocation(!(Tester.testSpeak))
-   :body (
-	  (!(Acapela.init))
-
-	  (!(Acapela.say "Hello."))
-	  (^(ELAPSED-TIME (TIME) 1))
-(!(Acapela.say "I think you want to clean the table. Let's see if I can help."))
-	  (^(ELAPSED-TIME (TIME) 1))
-(!(Acapela.say "Let me think of a plan."))
-	  (^(ELAPSED-TIME (TIME) 1))
-(!(Acapela.say "Okay, this is the plan"))
-	  (^(ELAPSED-TIME (TIME) 1))
-(!(Acapela.say "You want to do it in a different way? Let's see If I can help."))
-	  (^(ELAPSED-TIME (TIME) 1))
-(!(Acapela.say "Okay. I wait for further instructions"))
-	  (^(ELAPSED-TIME (TIME) 1))
-(!(Acapela.say "Let me think of another plan"))
-	  (^(ELAPSED-TIME (TIME) 1))
-(!(Acapela.say "First, I take the lord of the rings tape and give it to you."))
-	  (^(ELAPSED-TIME (TIME) 1))
-(!(Acapela.say "Then, you throw it in the pink trashbin."))
-	  (^(ELAPSED-TIME (TIME) 1))
-(!(Acapela.say "After that, I take the walle tape and give it to you."))
-	  (^(ELAPSED-TIME (TIME) 1))
-(!(Acapela.say "To conclude, you throw it in the pink trashbin."))
-	  (^(ELAPSED-TIME (TIME) 1))
-(!(Acapela.say "First you take the lord of the rings tape and then you give it to me. To conclude i throw it in the pink trashbin."))
-	  (^(ELAPSED-TIME (TIME) 1))
-(!(Acapela.say "I take the lord of the rings tape"))
-	  (^(ELAPSED-TIME (TIME) 1))
-(!(Acapela.say "I take the walle tape"))
-	  (^(ELAPSED-TIME (TIME) 1))
-(!(Acapela.say "I give it to you"))
-	  (^(ELAPSED-TIME (TIME) 1))
-(!(Acapela.say "I give you the walle tape"))
-	  (^(ELAPSED-TIME (TIME) 1))
-(!(Acapela.say "I give you the lord of the rings tape"))
-	  (^(ELAPSED-TIME (TIME) 1))
-(!(Acapela.say "I throw it in the pink trash bin"))
-	  (^(ELAPSED-TIME (TIME) 1))
-(!(Acapela.say "I throw the walle tape in the pink trash bin"))
-	  (^(ELAPSED-TIME (TIME) 1))
-(!(Acapela.say "Take the walle tape"))
-	  (^(ELAPSED-TIME (TIME) 1))
-(!(Acapela.say "Take the lord of the rings tape"))
-	  (^(ELAPSED-TIME (TIME) 1))
-(!(Acapela.say "Give me the lord of the rings tape"))
-	  (^(ELAPSED-TIME (TIME) 1))
-(!(Acapela.say "Give it to me"))
-	  (^(ELAPSED-TIME (TIME) 1))
-(!(Acapela.say "Throw it in the pink trashbin"))
-	  (^(ELAPSED-TIME (TIME) 1))
-(!(Acapela.say "Throw the walle tape in the pink trashbin"))
-	  (^(ELAPSED-TIME (TIME) 1))
-(!(Acapela.say "Throw the lord of the rings tape in the pink trashbin"))
-	  (^(ELAPSED-TIME (TIME) 1))
-(!(Acapela.say "I can't seem to reach it"))
-	  (^(ELAPSED-TIME (TIME) 1))
-)
-)
-
- (defop |testGetActionString|
-   :invocation(!(Tester.testGetActionString))
-   :body (
-	  (!(= @actionName handover))
-	  (!(= @actionParameters (. WALLE_TAPE HERAKLES_HUMAN1 PR2_ROBOT .)))
-	  (!(PlanManager.getActionString @actionName @actionParameters "I " 0 @oldObject @followsHandover @actionString))
-	  (!(PlanManager.getActionString @actionName @actionParameters "I " 0 @oldObject @followsHandover @actionString))
-	  (!(PlanManager.getActionString @actionName @actionParameters "I " 0 @oldObject @followsHandover @actionString))
-	  )
-   )
- (defop |testTellPlan|
-   :invocation(!(Tester.testTellPlan))
-   :body (
-	  (!(Controller.initAll))
-	  (=>(PlanManager.goal Clean (. TABLE_4 .)))
-	  (?(PlanManager.goal @goal @parameters))
-	  (=>(PlannerInterface.getPlan (VAL @goal) (VAL @parameters)))   ;;we ask for a plan
-	  (^(PlannerInterface.report @report))
-	  (~>(PlannerInterface.report (VAL @report)))
-	  (IF(?(EQUAL @report OK))
-	     (^(PlannerInterface.result @plan))
-	     (~>(PlannerInterface.result (VAL @plan)))
-	     (!(PlanManager.tellPlan @plan))
-			       
-	     )
-			 
-	  )
-   )
-
- (defop |testWeirdError|
-   :invocation(!(Tester.testWeirdError))
-   :body (
-	  (!(= @stoppable TRUE))
-	  (IF(?(&(ExecutionManager.stop 0) (EQUAL @stoppable TRUE)))
-	     (!(PRINT "OK"))
-	     )
-	  
-	  )
-   )
- 
-
- (defop |testGenericAddDb|
-   :invocation(!(Tester.testGenericAddDb))
-   :body (
-	  ;;doesn't work
-	  (!(= $fact (Softmotion.stop 3)))
-	  (=> ($fact))
-	  )
-   )
- (defop |testReturn|
-   :invocation(!(Tester.testReturn))
-   :body (
-	  (!(Controller.initAll))
-	  
-	  (!(= @id 3))
-	  (!(ArmActions.getFreeId @id))
-	  (!(PRINT @id))
-	  (!(ArmActions.getFreeId @id))
-	  (!(PRINT @id))
-	  (!(ArmActions.getFreeId @id))
-	  (!(PRINT @id))
-	  (!(ArmActions.getFreeId @id))
-	  (!(PRINT @id))
-	  (!(ArmActions.getFreeId @id))
-	  (!(PRINT @id))
-	  (!(ArmActions.getFreeId @id))
-	  (!(PRINT @id))
-	  )
-   )
-
- (defop |testConsTail|
-   :invocation(!(Tester.testConsTail))
-   :body (
-	  (!(= @queue (. .)))
-	  (!(= @element (. a .)))
-	  
-	  (!(= @newQueue (CONS-TAIL (VAL @element) @queue)))
-	  (!(PRINT @newQueue))
-	  
-	  )
-   )
-
- (defop |testTablet|
-   :invocation(!(Tester.testTablet))
-   :body (
-	  (!(Controller.initAll))
-	  (=>(TabletConnector.shouldRun TRUE))
-	  (!(TabletConnector.getCommand))
-	  )
-   )
- (defop |testStringCat|
-   :invocation(!(Tester.testStringCat))
-   :body (
-	  (!(= @a "take" ))
-	  (!(= @b "object"))
-	  (!(= @c (TERM-STRING-CAT @a ".asd")))
-	  (!(PRINT @c))
-	  )
-   )
- (defop |testDatabaseMonitor|
-   :invocation (!(Tester.testDbMonitor))
-   :body (
-;	  (!(DatabaseInterface.addMonitor (Prova a @var) (event) @result))
-;	  (!(DatabaseInterface.add (Prova a b) @result))
-
-
-	  )
-   )
- (defop |testMonitorSpheres|
-   :invocation (!(Tester.testMonitorSpheres))
-   :body (
-	  (!(Controller.initAll))
-
-(!(AgentActionMonitor.calculateInferencesForAgents (. HERAKLES_HUMAN1 .)))
-;(=>(AgentActionMonitor.startMonitorSphereLoop))
-;	  (^(ELAPSED-TIME (TIME) 1))
-;	  (!(AgentActionMonitor.cleanMonitorSphere 1))
-;	  (^(ELAPSED-TIME (TIME) 1))
-;	  (!(AgentActionMonitor.cleanAgentMonitorSpheres HERAKLES_HUMAN1))
-
-	  
-	  )
-   )
-
-(defop |testPlan|
-  :invocation(!(Tester.testPlan))
-  :body (
-         (!(Controller.initAll))
-         (!(AgentActionMonitor.cleanMonitorSpheres))
-         (!(AgentActionMonitor.calculateInferencesForAgents (. HERAKLES_HUMAN1 .)))
-         (!(AgentActionMonitor.startMonitoringAgent HERAKLES_HUMAN1 ))
-                                         (=>(PlanManager.goal Clean (. .)))
-     ;;(=>(PlanManager.goal TravelTo (. HERAKLES_HUMAN1 STOCK_TABLE .)))
-     ;(=>(PlanManager.goal HandleSurface (. ASSEMBLY_SURFACE_1 .)))
-                                         (=>(PlanManager.newGoal TRUE))
-
-                                         (=>(PlanManager.managePlans))
-	 )
-  )
- 
- ;; (defop |testPlan| 
- ;;   :invocation(!(Tester.testPlan))
- ;;   :body (
- ;; 	  (!(Controller.initAll))
- ;; 	  (=>(PlanManager.newGoal TRUE))
- ;; 	  (=>(PlanManager.goal provaGoal))
- ;; 	  (=>(PlannerInterface.report OK))
- ;; 	  (!(= @actionTake (. take (. GREY_TAPE NO_NAME NO_NAME 300 .) .)))
-	  
- ;; 	  (!(= @action1 (. (VAL @actionTake) 1 (. .) .)))
- ;; 	  (!(= @actionThrow (. throw (. GREY_TAPE TABLE_4 PINK_TRASHBIN 300 .) .)))
- ;; 	  (!(= @action2 (. (VAL @actionThrow) 2 (. 1 .) .)))
- ;; 	  (=>(PlannerInterface.result (. (. (VAL @action1) (VAL @action2) .) (. .) .)))
- ;; 	  (=>(PlanManager.managePlans))
- ;; 	  (^(PlanManager.actionReport 1 @report))
- ;; 	  (=>(PlannerInterface.report ACHIEVED))
- ;; 	  )
- ;;   )
-
- (defop |testPlace|
-   :invocation(!(Tester.testPlace))
-   :body (
-	  (!(Controller.initAll))
-	  (=>(Robot.hasObject RIGHT LOTR_TAPE))
-	  (=>(Robot.armPosition RIGHT FREE))
-	  (=>(ExecutionManager.execute placeSandra LOTR_TAPE TABLE_4 PLACEMAT_RED 2))
-	  )
-   )
-
- (defop |testPlaceAfterTake|
-   :invocation(!(Tester.testPlaceAfterTake))
-   :body (
-	  (=>(ExecutionManager.execute placeSandra LOTR_TAPE TABLE_4 PLACEMAT_RED 3))
-	  )
-   )
-
- (defop |testArmActions|
-   :invocation(!(Tester.testArmActions))
-   :documentation "PLACE OBJECT HAS NOT BEEN TESTED "
-   :body (
-	  (!(ArmActions.init))
-	  (!(Controller.initAll))
-	  (=>(Robot.armInAir RIGHT TRUE))
-
-
-;	  (!(PRINT "MovetoX"))
-;	  (=>(ArmActions.action moveToX RIGHT 3.3 2.65 1.2 1))
-;	  (^(ArmActions.report 1 @report))
-;	  (~>(ArmActions.report 1 @report))
-	  (!(Tester.breakpoint))
-	  (!(PRINT "MoveToQ"))
-	  (=>(ArmActions.action moveToQ RIGHT NO_NAME NO_NAME 0 0 0 0 0 0 0 1))
-	  (^(ArmActions.report 1 @report))
-  	  (~>(ArmActions.report 1 @report))
-	  
-	  (!(PRINT "MoveToObject"))
-	  (=>(ArmActions.action moveToObject RIGHT GREY_TAPE 1))
-	  (^(ArmActions.report 1 @report))
-	  (~>(ArmActions.report 1 @report))
-	
-	  (!(PRINT "EscapeObject"))
-	  (=>(ArmActions.action escapeObject RIGHT GREY_TAPE 1))
-	  (^(ArmActions.report 1 @report))
-	  (~>(ArmActions.report 1 @report))
-
-	 ; (=>(ArmActions.action gotoPlaceObject RIGHT GREY_TAPE TABLE_4 NO_NAME 1))
-	  ;(^(ArmActions.report 1 @report))
-
-	  (!(PRINT "MoveToRest"))
-	  (=>(ArmActions.action moveToPose REST RIGHT 0 1))
-	  (^(ArmActions.report 1 @report))
-	  (~>(ArmActions.report 1 @report))
-
-	  (!(PRINT "MoveToReady"))
-	  (=>(ArmActions.action moveToPose READY RIGHT 0 1))
-	  (^(ArmActions.report 1 @report))
-	  (~>(ArmActions.report 1 @report))	  
-
-
-	  (!(PRINT "MoveToExtended"))
-	  (=>(ArmActions.action moveToPose EXTENDED RIGHT 0 1))
-	  (^(ArmActions.report 1 @report))
-	  (~>(ArmActions.report 1 @report))
-	  )
-   )
-
-(defop |testGripperActions|
-  :invocation(!(Tester.testGripperActions))
-  :body (
-
-	  (=>(ArmActions.action closeGripper RIGHT 1))
-	  (^(ArmActions.report 1 @report))
-
-
-	  (=>(ArmActions.action openGripper RIGHT 1))
-	  (^(ArmActions.report 1 @report))
-
-	  (=>(ArmActions.action openGripperOnPressure RIGHT 1))
-	  (^(ArmActions.report 1 @report))
-
-	  (=>(ArmActions.action stopOpenGripperOnPressure RIGHT 1))
-	  (^(ArmActions.report 1 @report))
-	 )
-  )
-
-(defop |testHeadActions|
-  :invocation(!(Tester.testHeadActions))
-  :body (
-	 (!(HeadActions.init))
-	 (!(Controller.initAll))
-	(!(PRINT "INIT FAITES !!!!!!!!!!!!!!!!!!!!!"))
-	(!(HeadActions.getFreeId @headId))
-	(=>(HeadActions.action headExplore @headId))
-	 (^(HeadActions.report (VAL @headId) @report))
-	(~>(HeadActions.report (VAL @headId) @report))
-	(IF(?(EQUAL @report FAILED))
-		(!(PRINT "Explore failed"))
-	 )
-	
-	(!(HeadActions.getFreeId @headId))
-	 (=>(HeadActions.action lookAt LOTR_TAPE NO_NAME @headId))
-	 (^(HeadActions.report (VAL @headId) @report))
-	(~>(HeadActions.report (VAL @headId) @report))	
-	(IF(?(EQUAL @report FAILED))
-		(!(PRINT "LookAt failed"))
-	 )
-
-	(!(HeadActions.getFreeId @headId))
-	 (=>(HeadActions.action isLookingAt LOTR_TAPE NO_NAME @headId))
-	 (^(HeadActions.report (VAL @headId) @report))
-	(~>(HeadActions.report (VAL @headId) @report))
-	(IF(?(EQUAL @report "TRUE"))
-		(!(PRINT "Object is looking"))
-		ELSEIF(?(EQUAL @report "FALSE"))
-			(!(PRINT "Object is not looking"))
-			ELSE
-				(!(PRINT "FAILED"))
-		)
-	 )
-  )
- 
- (defop |testString|
-   :invocation(!(Tester.testString))
-   :body (
-	  (!(= @a MonitorQueue.priorityQueue))
-	  (!(= @b (TERM-STRING-CAT @a "Sem")))
-	  (!(PRINT @b))
-	  (!(SEM-CREATE (VAL @b) 1 SEM-FIFO))
-	  (!(SEM-P (VAL @b)))
-	  (!(SEM-V (VAL @b)))
-	  )
-   )
- (defop |testGenomInterface|
-   :invocation(!(Tester.testGenomInterface))
-   :body (
-	  (=>(Softmotion.request useGripper RRELEASE 1))
-	  (^(Softmotion.report 1 @report))
-	  (!(PRINT @report))
-	  )
-   )
- (defop |testObservations|
-   :invocation(!(Tester.testObservations))
-   :documentation
-   :body (
-	  (?(Spark.robotTorso @rTorso))
-	 (?(Spark.robotName @sparkRobotName))
-
-	  
-	 (?(Spark.freeId @sparkId))
-	 (=>(Spark.request getJointAbsPose (VAL @sparkRobotName) (VAL @rTorso) (VAL @sparkId)))
-	 (!(ExecutionManager.handleReport Spark.report @sparkId @executionId))
-	 (?(Spark.result (VAL @sparkId) @robotTorsoX @robotTorsoY @robotTorsoZ @robotTorsoYaw @robotTorsoPitch @robotTorsoRoll))
-	 (~>(Spark.result (VAL @sparkId) (VAL @robotTorsoX) (VAL @robotTorsoY) (VAL @robotTorsoZ) (VAL @robotTorsoYaw) (VAL @robotTorsoPitch) (VAL @robotTorsoRoll)))
-	 (=>(ExecutionManager.oldArmPosition unknown))
-	 (=>(ExecutionManager.oldDistance outOfRange))
-	 (=>(ExecutionManager.oldOrientation unknown))
-	 (!(= @i 0))
-	 (WHILE(?(~(EQUAL @i 10)))
-					;Set the starting state variables. We need to get the first row of observations to set the state variable inRange
-	       (!(ExecutionManager.getHumanObservations HERAKLES_HUMAN1 @robotTorsoX @robotTorsoY @robotTorsoZ 1 @armPosition @distance @orientation))
-	       (^(ELAPSED-TIME (TIME) 1))
-	       (!(= @i (+ @i 1)))
-	       )
-	 )
-   )
- (defop |testMonitorHead|
-   :invocation(!(Tester.testMonitorHead))
-   :body (
-	  (?(Spark.humanHead @head))
-	  (!(MonitorManager.init))
-	  (!(MonitorManager.monitorTarget HERAKLES_HUMAN1 @head (. (. (fact) .) (. .) .) (. (. .) (. .) .) 1 1)) 
-		    
-	  )
-   )
-
- (defop |testGive|
-   :invocation(!(Tester.testGive))
-   :documentation " "
-   :body (
-	  (!(Controller.initAll))
-	  (=>(Robot.hasObject RIGHT WALLE_TAPE))
-	  (=>(ExecutionManager.execute handover GIVE WALLE_TAPE HERAKLES_HUMAN1 1))
-
-	    
-	  )
-   )
-
- (defop |testGrab|
-   :invocation(!(Tester.testGrab))
-   :documentation " "
-   :body (
-	  (!(Controller.initAll))
-	  ;; (!(Spark.getFreeId @sparkId))
-	  ;; (=>(Spark.request placeObjectForSimu (VAL @object) 0 0 0 0 0 0 1 @sparkId)) 
-	  ;; (!(ExecutionManager.handleReport Spark.report @sparkId @executionId))
-
-	  (!(Spark.getFreeId @sparkId))
-	  (=>(Spark.request setObjectInHand HERAKLES_HUMAN1 LOTR_TAPE RIGHT TRUE (VAL @sparkId)))
-	  (!(ExecutionManager.handleReport Spark @sparkId @executionId TRUE NO_NAME))
-
-	  (=>(ExecutionManager.execute handover GRAB LOTR_TAPE HERAKLES_HUMAN1 1))
-
-	    
-	  )
-   )
- (defop |testFailed|
-   :invocation(!(Tester.testFailed))
-   :documentation " "
-   :body (
-	  (!(Tester.supportTestFailed))
-	  (^ (fact))
-	  )
-   )
-
- (defop |supportTestFailed|
-   :invocation(!(Tester.supportTestFailed))
-   :documentation " "
-   :body (
-	  (!(FAILED))
-	  )
-   )
- (defop |testGeneric|
-   :invocation (!(Tester.testGeneric))
-   :documentation " "
-   :body (
-	 ;works if fact with no || or && and wait or if with variable and not VAL. 
-	  ;weirder and weirder. If we have a composed term it works with VAL...
-	  (!(= @a (fact)))
-	  (IF(?(VAL @a))
-	     (!(PRINT "ok"))
-	     )
-	  ;(!(Tester.testGeneric2 FALSE))
-	  )
-   )
- (defop |testGeneric2|
-   :invocation (!(Tester.testGeneric2 @a))
-   :documentation ""
-   :body (
-	  (^ (|| (fact) (VAL @a )))
-	     (!(PRINT "ok"))
-	     
-	     )
-   )
- (defop |testWhile|
-   :invocation(!(Tester.testWhile))
-   :body (
-	  (!(= @a 0))
-	  (WHILE(?(~(fact (VAL @a))))
-		(!(= @a (+ @a 1)))
-		)
-	  )
-   )
-
- (defop |testTake|
-   :invocation (!(Tester.testTake))
-   :documentation ""
-   :body (
-	  (!(Controller.initAll))
-
-      (=>(ExecutionManager.execute take GLUE_BOTTLE RIGHT 0))
-
-	  )
-   )
-(defop |testTakeThrow|
-  :invocation(!(Tester.testTakeThrow))
-  :documentation " "
-  :body (
-	  (!(Controller.initAll))
-	  (?(Spark.freeId @sparkId))
-	  (=>(Spark.request setGraspedObject GREY_TAPE 0 0 (VAL @sparkId)))
-	  (!(ExecutionManager.handleReport Spark.report @sparkId @executionId))
-
-	  (?(Spark.freeId @sparkId))
-	  (=>(Spark.request setInferrenceForObject GREY_TAPE 0 PR2_ROBOT 0 SPARK_PRECISE_ROBOT_HAND 1.0 (VAL @sparkId)))  
-	  (!(ExecutionManager.handleReport Spark.report @sparkId @executionId))
-	  
-	  (=>(ExecutionManager.execute take GREY_TAPE RIGHT 1))
-	  
-	  (^(ExecutionManager.report (VAL @executionId) @report))
-	  
-	  (=>(ExecutionManager.throw GREY_TAPE PINK_TRASHBIN 2))
-	  )
-  )
-
-(defop |testThrow|
-  :invocation(!(Tester.testThrow))
-  :body (
-	 (!(Controller.initAll))
-	 ;; (?(Spark.freeId @sparkId))
-	 ;; (=>(Spark.request placeObjectForSimu GREY_TAPE 0 0 0 0 0 0 1 (VAL @sparkId)))
-	 ;; (!(ExecutionManager.handleReport Spark.report @sparkId 1))
-	  
-	 ;;  (?(Spark.robotHand RIGHT @sparkHand))
-	 ;;  (?(Spark.freeId @sparkId))
-	 ;;  (=>(Spark.request setGraspedObject GREY_TAPE 1 (VAL @sparkHand) (VAL @sparkId)))
-	 ;;  (!(ExecutionManager.handleReport Spark.report @sparkId 1))
-	  
-	 ;;  (?(Spark.freeId @sparkId))
-	 ;;  (=>(Spark.request setInferrenceForObject GREY_TAPE 1 PR2_ROBOT (VAL @sparkHand) SPARK_PRECISE_ROBOT_HAND 1.0 (VAL @sparkId)))  
-	 ;;  (!(ExecutionManager.handleReport Spark.report @sparkId 1))
-
-	  (=>(Robot.hasObject RIGHT LOTR_TAPE))
-
-	 ;; (=>(Robot.armPosition RIGHT TABLE_4))
-	 
-	 (=>(ExecutionManager.execute throw LOTR_TAPE PINK_TRASHBIN 1))
-	 )
-  )
-
- (defop |testLispList|
-   :invocation (!(Tester.testLispList))
-   :documentation " "
-   :body (
-	  (!(= @a (. a b .)))
-	  (!(= @c (CAR @a)))
-	  (!(PRINT @c))
-	  (!(= @b (LAST @a)))
-	  (!(PRINT @b))
-	  )
-   )
-
- (defop |testUnification|
-   :invocation (!(Tester.testUnification))
-   :documentation ""
-   :body (
-;	  (!(= @var (action a parameters b) ))
-	  ;; (!(= @var2 (. a b c d .)))	
-	  ;; (!(== (VAL @var2) (. @primo @secondo @terzo @quarto .)))
-	  ;; (!(PRINT @primo))
-	  ;; (!(PRINT @terzo))
-;; 	  (! (== (VAL @var) (action @actionName parameters @parameters)))
-;; 	     (! (== @action (ACTION-NAME @action-name) (ACTOR @action-actor) (START-TIME @start-time) (END-TIME @end-time) (PARAMETERS @actionParameters)))
-;; ;	  (IF(! (== $ACTION (ACTION (ACTION-ID $ACTION-ID) (ACTION-NAME $ACTION-NAME) (ACTOR $ACTOR) (START-TIME $START-TIME) (END-TIME $END-TIME) (PARAMETERS $ActionParams))))
-;; ;	    )
-;; 	  (!(PRINT @var))
-;; 	  (!(PRINT @actionName))
-;; 	  (!(PRINT @parameters))
-
-
-	  (!(= @x 3))
-	  (!(= @y 3))
-	  (!(= @z 3))
-
-	 (!(= @ax (- @x 0.2)))
-	 (!(= @ay (+ @y 0.2)))
-	 (!(= @bx (+ @x 0.2)))
-	 (!(= @by (+ @y 0.2)))
-	 (!(= @cx (- @x 0.2)))
-	 (!(= @cy (- @y 0.2)))
-	 (!(= @dx (+ @x 0.2)))
-	 (!(= @dy (- @y 0.2)))
-
-	 (!(= @list (. @ax @by @z @cx @cy @z @dx @dy @z .)))
-	  )
-   )
-
- (defop |breakpoint|
-   :invocation (!(Tester.breakpoint))
-   :documentation "hack to implement breakpoints. The system waits for 5 seconds when it reaches one so you have the time to press halt =) "
-   :body (
-	  (!(PRINT "breakpoint reached"))
-	  (^(ELAPSED-TIME(TIME) 5))
-	  )
-   )
- (defop |testQueue|
-   :invocation (!(Tester.testQueue))
-   :documentation "test the standard operations of the queue"
-   :body (
-	  (!(Queue.init Tester.queue))
-	  (!(Queue.push fact Tester.queue))
-	  (!(Queue.push otherFact Tester.queue))
-	  (!(Queue.head @head Tester.queue))
-	  (!(PRINT @head))
-	  (!(Queue.pop Tester.queue))
-	  (!(Queue.head @head Tester.queue))
-	  (!(PRINT @head))
-	  )
-   )
-
-(defop |testPickPlace|
-  :invocation (!(Tester.testPickPlace))
-  :body (
-	 (!(Controller.initAll))
-	 (?(Spark.freeId @sparkId))
-	 (=>(Spark.request setGraspedObject BLUE_CUBE2 0 0 (VAL @sparkId)))
-;	 (!(ExecutionManager.handleReport Spark.report @sparkId @executionId))
-
-	 (?(Spark.freeId @sparkId))
-	 (=>(Spark.request setInferrenceForObject BLUE_CUBE2 0 PR2_ROBOT 0 SPARK_PRECISE_ROBOT_HAND 1.0 (VAL @sparkId)))  
-;	 (!(ExecutionManager.handleReport Spark.report @sparkId @executionId))
-	 
-	 (=>(ExecutionManager.execute take BLUE_CUBE2 RIGHT 10))
-	 (^(ExecutionManager.report 10 @report))
-	 (IF(?(EQUAL @report OK))
-	 	(=>(ExecutionManager.execute place BLUE_CUBE2 TABLE_4 PLACEMAT_GREEN 20))
-		)
-	 )
-  )
-
- (defop |testPriorityQueue|
-   :invocation(!(Tester.testPriorityQueue))
-   :documentation "thest the standard operations of the priority queue"
-   :body (
-	  (!(PriorityQueue.init Tester.priorityQueue))
-	  (!(PriorityQueue.push (. fact 3 .) Tester.priorityQueue))   ;inserimento coda vuota
-	  (?(Tester.priorityQueue @queue))
-	  (!(PRINT @queue))
-	  (!(PriorityQueue.push (. secondFact 6 .) Tester.priorityQueue))  ;inserimento in coda
-	  (?(Tester.priorityQueue @queue))
- 	  (!(PRINT @queue))
-	  (!(PriorityQueue.push (. thirdFact 1 .) Tester.priorityQueue))  ;inserimento in testa
-	  (?(Tester.priorityQueue @queue))
-	  (!(PRINT @queue))
-	 ; (!(= @queue (. (. thirdFact 1 .) (. fact 3 .) (. secondFact 5 .) .)))
-	 ; (=> (Tester.priorityQueue @queue))
-	  (!(PriorityQueue.push (. fourthFact 4 .) Tester.priorityQueue)) ;inserimento secondo posto
-	  (?(Tester.priorityQueue @queue))
-	  (!(PRINT @queue))
-	  (!(PriorityQueue.pop Tester.priorityQueue ))
-	  (!(PriorityQueue.pop Tester.priorityQueue))
-	  (!(PriorityQueue.head Tester.priorityQueue @head))
-	  (!(PRINT @head))
-	 )
-   )
-
- (defop |testLists|
-   :invocation(!(Tester.testLists))
-   :documentation
-   :body (
-	  (!(= @lista (. factc facte facta .)))
-	  (!(= @listb (. factf factb factz .)))
-	  (!(= @uniona (LIST-UNION @lista @listb)))
-	  (!(= @unionb (LIST-UNION @listb @lista)))
-	  (!(PRINT @uniona))
-	  (!(PRINT @unionb))
-	  )
-   )
-
- (defop |testMonitorManager|
-   :invocation (!(Tester.testMonitorManager))
-   :documentation
-   :body (
-	  (!(Controller.initAll))
-	  (!(= @sparkRobotName PR2_ROBOT))
-	  (!(= @executionId 1))
-	  (!(= @object GREY_TAPE))
-	  
-	  (!(= @monitorSuccessConditions (. (. (ExecutionManager.report 1 OK) .) (. .) .)))
-	  (!(= @monitorFailureConditions  (. (.(ExecutionManager.report 1 FAILURE) .) (. .) .)))
-	  (!(= @monitorSuccessConditions2 (. (. (ExecutionManager.report 2 OK) .) (. .) .)))
-					
-					;start the monitoring
-      (!(MonitorManager.monitorTarget WALLE_TAPE "NO_NAME" (VAL @monitorSuccessConditions) (VAL @monitorFailureConditions) MEDIUM 1))
-
-	  (!(MonitorManager.monitorTarget TABLE_4 "NO_NAME" (VAL @monitorSuccessConditions2) (VAL @monitorFailureConditions) HIGH 2))
-	  
-
-	  )
-   )
-
- (defop |testCondition|
-   :invocation (!(Tester.testCondition))
-   :documentation
-   :body (
-	  (!(= @fact (fact a)))
-	  (!(= @factb (fact b)))
-	  (!(= @conditions (. @fact @factb .)))
-	  (!(= @failed FALSE))
-	  (=> (fact a))
-	  (=> (fact b))
-
-	  )
-   )
-
- (defop |TestFindList|
-   :invocation(!(Tester.testFindList))
-   :documentation " "
-   :body (
-
-	  (!(DatabaseInterface.findList (fact @f) (. @f .) @result))
-	  (IF(?(~(NULL @result)))
-
-	     (WHILE(?(~(NULL @result)))
-		   (!(= @fact (CAR(CAR @result))))
-		   (!(PRINT @fact))
-		   (!(= @result (CDR @result)))
-		   )
-	     )
-
-	  )
-   )
- 
-)
diff --git a/supervisor/#mainSpencer.inc# b/supervisor/#mainSpencer.inc#
deleted file mode 100644
index ce2fffb..0000000
--- a/supervisor/#mainSpencer.inc#
+++ /dev/null
@@ -1,34 +0,0 @@
-include "new-default.inc"
-include "semaphore.inc"
-
-load db "supervisor/Config.db"
-load db "supervisor/configuration/Spencer.db"
-
-
-load opf "supervisor/Tester.opf"
-
-include "supervisor/robot/DatabaseInterface.sym"
-include "supervisor/robot/ExecutionManager.sym"
-include "supervisor/robot/Controller.sym"
-include "supervisor/robot/HeadActions.sym"
-include "supervisor/robot/PathPlanner.sym"
-include "supervisor/robot/BaseActions.sym"
-
-include "supervisor/domains/SpencerMonitors.sym"
-
-load db "supervisor/robot/PathPlanner.db"
-load db "supervisor/robot/BaseActions.db"
-load db "supervisor/robot/DatabaseInterface.db"
-
-load opf "supervisor/robot/ExecutionManager.opf"
-load opf "supervisor/robot/Controller.opf"
-load opf "supervisor/robot/HeadActions.opf"
-load opf "supervisor/robot/PlannerInterface.opf"
-load opf "supervisor/robot/PathPlanner.opf"
-load opf "supervisor/robot/DatabaseInterface.opf"
-
-load opf "supe"
-
-
-load opf "supervisor/domains/Spencer.opf"
-
diff --git a/supervisor/Tester.opf b/supervisor/Tester.opf
index 6cdc861..97f7381 100644
--- a/supervisor/Tester.opf
+++ b/supervisor/Tester.opf
@@ -8,452 +8,572 @@
 
 (
 
+(defop |testPlanGregIcsr|
+  :invocation(!(Tester.testPlanGregIcsr))
+  :body (
+    (!(Controller.initAll))
+     (!(AgentActionMonitor.cleanMonitorSpheres))
+     (!(AgentActionMonitor.calculateInferencesForAgents (. HERAKLES_HUMAN1 .)))
+     (!(AgentActionMonitor.startMonitoringAgent HERAKLES_HUMAN1 ))
+     (=>(PlanManager.goal BuildStack (. StackArea .)))
+     (=>(PlanManager.newGoal TRUE))
+     (=>(PlanManager.managePlans))  
+
+    )
+
+  )
+(defop |testMonitorPlan|
+  :invocation(!(Tester.testMonitorPlan))
+  :body (
+    (!(DatabaseInterface.init))
+    (!(= @action (. (. applyFirstOperations 1 (. HERAKLES_HUMAN1 Green_Cube .) .)  .)))
+    (!(PlanManager.monitorPlan HERAKLES_HUMAN1 @action))
+    )
+  )
+
+ (defop |testTreeAnalysis|
+	:invocation(!(Tester.testTreeAnalysis))  
+	:body (
+		(!(PRINT "b"))
+    (!(DatabaseInterface.init))
+        (!(= @plan (HATP-REP (REQ-ID 26)(REPORT OK)
+                             (STREAMS
+                              (ACTION-LIST (.
+                                            (ACTION (ACTION-ID 1125)(ACTION-NAME Pick)(ACTOR PR2_PR2_ROBOT)(START-TIME 0)(END-TIME 6)(PARAMETERS (. PR2_PR2_ROBOT Blue_Cube  .)))
+                                            (ACTION (ACTION-ID 1136)(ACTION-NAME Pick)(ACTOR HERAKLES_HUMAN1)(START-TIME 0)(END-TIME 6)(PARAMETERS (. HERAKLES_HUMAN1 Green_Cube  .)))
+                                            (ACTION (ACTION-ID 1128)(ACTION-NAME Place)(ACTOR PR2_ROBOT)(START-TIME 6)(END-TIME 12)(PARAMETERS (. PR2_ROBOT Blue_Cube GluingArea  .)))
+                                            (ACTION (ACTION-ID 1142)(ACTION-NAME HandleOperation)(ACTOR HERAKLES_HUMAN1)(START-TIME 6)(END-TIME 12)
+                                                    (PARAMETERS (. HERAKLES_HUMAN1 Green_Cube Smoothen SmoothingArea  .)))
+                                            (ACTION (ACTION-ID 1129)(ACTION-NAME Apply)(ACTOR PR2_ROBOT)(START-TIME 12)(END-TIME 18)(PARAMETERS (. PR2_ROBOT Blue_Cube Glue  .)))
+                                            (ACTION (ACTION-ID 1145)(ACTION-NAME HandleOperation)(ACTOR HERAKLES_HUMAN1)(START-TIME 12)(END-TIME 18)
+                                                    (PARAMETERS (. HERAKLES_HUMAN1 Green_Cube Stickers StickersArea  .)))(ACTION (ACTION-ID 1130)
+                                                                                                                         (ACTION-NAME Pick)(ACTOR PR2_ROBOT)(START-TIME 18)(END-TIME 24)(PARAMETERS (. PR2_ROBOT Blue_Cube  .)))
+                                                    (ACTION (ACTION-ID 1124)(ACTION-NAME PlaceOnStack)(ACTOR PR2_ROBOT)(START-TIME 24)(END-TIME 30)(PARAMETERS (. PR2_ROBOT Blue_Cube StackArea  .)))
+                                                    (ACTION (ACTION-ID 1135)(ACTION-NAME PlaceOnStack)(ACTOR HERAKLES_HUMAN1)(START-TIME 30)(END-TIME 36)(PARAMETERS (. HERAKLES_HUMAN1 Green_Cube StackArea  .)))
+                                                    (ACTION (ACTION-ID 1151)(ACTION-NAME Pick)(ACTOR PR2_ROBOT)(START-TIME 30)(END-TIME 36)(PARAMETERS (. PR2_ROBOT Red_Cube  .)))
+                                                    (ACTION (ACTION-ID 1154)(ACTION-NAME Place)(ACTOR PR2_ROBOT)(START-TIME 36)(END-TIME 42)(PARAMETERS (. PR2_ROBOT Red_Cube CleaningArea  .)))
+                                                    (ACTION (ACTION-ID 1155)(ACTION-NAME Apply)(ACTOR PR2_ROBOT)(START-TIME 42)(END-TIME 48)(PARAMETERS (. PR2_ROBOT Red_Cube Clean  .)))
+                                                    (ACTION (ACTION-ID 1156)(ACTION-NAME Pick)(ACTOR PR2_ROBOT)(START-TIME 48)(END-TIME 54)(PARAMETERS (. PR2_ROBOT Red_Cube  .)))
+                                                    (ACTION (ACTION-ID 1159)(ACTION-NAME Place)(ACTOR PR2_ROBOT)(START-TIME 54)(END-TIME 60)(PARAMETERS (. PR2_ROBOT Red_Cube PolishingArea  .)))
+                                                    (ACTION (ACTION-ID 1160)(ACTION-NAME Apply)(ACTOR PR2_ROBOT)(START-TIME 60)(END-TIME 66)(PARAMETERS (. PR2_ROBOT Red_Cube Polish  .)))
+                                                    (ACTION (ACTION-ID 1161)(ACTION-NAME Pick)(ACTOR PR2_ROBOT)(START-TIME 66)(END-TIME 72)(PARAMETERS (. PR2_ROBOT Red_Cube  .)))
+                                                    (ACTION (ACTION-ID 1150)(ACTION-NAME PlaceOnStack)(ACTOR PR2_ROBOT)(START-TIME 72)(END-TIME 78)(PARAMETERS (. PR2_ROBOT Red_Cube StackArea  .)))
+                                                    .))
+                              (LINK-LIST (.
+                                          (LINK 1124 1135)(LINK 1124 1151)(LINK 1125 1128)(LINK 1128 1129)(LINK 1129 1130)(LINK 1130 1124)(LINK 1135 1150)
+                                          (LINK 1136 1142)(LINK 1142 1145)(LINK 1145 1135)(LINK 1151 1154)(LINK 1154 1155)(LINK 1155 1156)(LINK 1156 1159)(LINK 1159 1160)
+                                          (LINK 1160 1161)(LINK 1161 1150) .))
+                              )
+                             (TREE (TASK-LIST (.
+                                               (TASK (TYPE METHOD)(TASK-ID 1119)(TASK-NAME BuildStack)(ACTORS (. PR2_ROBOT HERAKLES_HUMAN1 .))(PARAMETERS (. StackArea .))
+                                                     (SUBNODES (.
+                                                                (TASK (TYPE METHOD)(TASK-ID 1120)(TASK-NAME Handle)(ACTORS (. PR2_ROBOT .))(PARAMETERS (. PR2_ROBOT Blue_Cube StackArea .))
+                                                                      (SUBNODES (. (TASK (TYPE METHOD)(TASK-ID 1122)(TASK-NAME ApplyFirstOperations)(ACTORS (. PR2_ROBOT .))(PARAMETERS (. PR2_ROBOT Blue_Cube .))(SUBNODES (. (TASK (TYPE ACTION)(TASK-ID 1125)(TASK-NAME Pick)(ACTORS (. PR2_ROBOT .))(PARAMETERS (. PR2_ROBOT Blue_Cube .))(SUBNODES (.  .)))(TASK (TYPE METHOD)(TASK-ID 1126)(TASK-NAME ApplyOperation)(ACTORS (. PR2_ROBOT .))(PARAMETERS (. PR2_ROBOT Blue_Cube Glue .))(SUBNODES (. (TASK (TYPE ACTION)(TASK-ID 1128)(TASK-NAME Place)(ACTORS (. PR2_ROBOT .))(PARAMETERS (. PR2_ROBOT Blue_Cube GluingArea .))(SUBNODES (.  .)))(TASK (TYPE ACTION)(TASK-ID 1129)(TASK-NAME Apply)(ACTORS (. PR2_ROBOT .))(PARAMETERS (. PR2_ROBOT Blue_Cube Glue .))(SUBNODES (.  .)))(TASK (TYPE ACTION)(TASK-ID 1130)(TASK-NAME Pick)(ACTORS (. PR2_ROBOT .))(PARAMETERS (. PR2_ROBOT Blue_Cube .))(SUBNODES (.  .))) .))) .)))(TASK (TYPE ACTION)(TASK-ID 1124)(TASK-NAME PlaceOnStack)(ACTORS (. PR2_ROBOT .))(PARAMETERS (. PR2_ROBOT Blue_Cube StackArea .))(SUBNODES (.  .))) .)))(TASK (TYPE METHOD)(TASK-ID 1121)(TASK-NAME BuildStack)(ACTORS (. HERAKLES_HUMAN1 PR2_ROBOT .))(PARAMETERS (. StackArea .))(SUBNODES (. (TASK (TYPE METHOD)(TASK-ID 1131)(TASK-NAME Handle)(ACTORS (. HERAKLES_HUMAN1 .))(PARAMETERS (. HERAKLES_HUMAN1 Green_Cube StackArea .))(SUBNODES (. (TASK (TYPE METHOD)(TASK-ID 1133)(TASK-NAME ApplyFirstOperations)(ACTORS (. HERAKLES_HUMAN1 .))(PARAMETERS (. HERAKLES_HUMAN1 Green_Cube .))(SUBNODES (. (TASK (TYPE ACTION)(TASK-ID 1136)(TASK-NAME Pick)(ACTORS (. HERAKLES_HUMAN1 .))(PARAMETERS (. HERAKLES_HUMAN1 Green_Cube .))(SUBNODES (.  .)))(TASK (TYPE METHOD)(TASK-ID 1137)(TASK-NAME ApplyOperation)(ACTORS (. HERAKLES_HUMAN1 .))(PARAMETERS (. HERAKLES_HUMAN1 Green_Cube Smoothen .))(SUBNODES (. (TASK (TYPE ACTION)(TASK-ID 1142)(TASK-NAME HandleOperation)(ACTORS (. HERAKLES_HUMAN1 .))(PARAMETERS (. HERAKLES_HUMAN1 Green_Cube Smoothen SmoothingArea .))(SUBNODES (.  .))) .)))(TASK (TYPE METHOD)(TASK-ID 1138)(TASK-NAME ApplyFirstOperations)(ACTORS (. HERAKLES_HUMAN1 .))(PARAMETERS (. HERAKLES_HUMAN1 Green_Cube .))(SUBNODES (. (TASK (TYPE METHOD)(TASK-ID 1143)(TASK-NAME ApplyOperation)(ACTORS (. HERAKLES_HUMAN1 .))(PARAMETERS (. HERAKLES_HUMAN1 Green_Cube Stickers .))(SUBNODES (. (TASK (TYPE ACTION)(TASK-ID 1145)(TASK-NAME HandleOperation)(ACTORS (. HERAKLES_HUMAN1 .))(PARAMETERS (. HERAKLES_HUMAN1 Green_Cube Stickers StickersArea .))(SUBNODES (.  .))) .))) .))) .)))(TASK (TYPE ACTION)(TASK-ID 1135)(TASK-NAME PlaceOnStack)(ACTORS (. HERAKLES_HUMAN1 .))(PARAMETERS (. HERAKLES_HUMAN1 Green_Cube StackArea .))(SUBNODES (.  .))) .)))(TASK (TYPE METHOD)(TASK-ID 1132)(TASK-NAME BuildStack)(ACTORS (. PR2_ROBOT .))(PARAMETERS (. StackArea .))(SUBNODES (. (TASK (TYPE METHOD)(TASK-ID 1146)(TASK-NAME Handle)(ACTORS (. PR2_ROBOT .))(PARAMETERS (. PR2_ROBOT Red_Cube StackArea .))(SUBNODES (. (TASK (TYPE METHOD)(TASK-ID 1148)(TASK-NAME ApplyFirstOperations)(ACTORS (. PR2_ROBOT .))(PARAMETERS (. PR2_ROBOT Red_Cube .))(SUBNODES (. (TASK (TYPE ACTION)(TASK-ID 1151)(TASK-NAME Pick)(ACTORS (. PR2_ROBOT .))(PARAMETERS (. PR2_ROBOT Red_Cube .))(SUBNODES (.  .)))(TASK (TYPE METHOD)(TASK-ID 1152)(TASK-NAME ApplyOperation)(ACTORS (. PR2_ROBOT .))(PARAMETERS (. PR2_ROBOT Red_Cube Clean .))(SUBNODES (. (TASK (TYPE ACTION)(TASK-ID 1154)(TASK-NAME Place)(ACTORS (. PR2_ROBOT .))(PARAMETERS (. PR2_ROBOT Red_Cube CleaningArea .))(SUBNODES (.  .)))(TASK (TYPE ACTION)(TASK-ID 1155)(TASK-NAME Apply)(ACTORS (. PR2_ROBOT .))(PARAMETERS (. PR2_ROBOT Red_Cube Clean .))(SUBNODES (.  .)))(TASK (TYPE ACTION)(TASK-ID 1156)(TASK-NAME Pick)(ACTORS (. PR2_ROBOT .))(PARAMETERS (. PR2_ROBOT Red_Cube .))(SUBNODES (. .))) .))) .)))(TASK (TYPE METHOD)(TASK-ID 1149)(TASK-NAME ApplySecondOperations)(ACTORS (. PR2_ROBOT .))(PARAMETERS (. PR2_ROBOT Red_Cube .))(SUBNODES (. (TASK (TYPE METHOD)(TASK-ID 1157)(TASK-NAME ApplyOperation)(ACTORS (. PR2_ROBOT .))(PARAMETERS (. PR2_ROBOT Red_Cube Polish .))(SUBNODES (. (TASK (TYPE ACTION)(TASK-ID 1159)(TASK-NAME Place)(ACTORS (. PR2_ROBOT .))(PARAMETERS (. PR2_ROBOT Red_Cube PolishingArea .))(SUBNODES (.  .)))(TASK (TYPE ACTION)(TASK-ID 1160)(TASK-NAME Apply)(ACTORS (. PR2_ROBOT .))(PARAMETERS (. PR2_ROBOT Red_Cube Polish .))(SUBNODES (.  .)))(TASK (TYPE ACTION)(TASK-ID 1161)(TASK-NAME Pick)(ACTORS (. PR2_ROBOT .))(PARAMETERS (. PR2_ROBOT Red_Cube .))(SUBNODES (. .))) .))) .)))(TASK (TYPE ACTION)(TASK-ID 1150)(TASK-NAME PlaceOnStack)(ACTORS (. PR2_ROBOT .))(PARAMETERS (. PR2_ROBOT Red_Cube StackArea .))(SUBNODES (.  .)))

+                                              )
+
+                                   (LINK-LIST (. (LINK 1120 1121)(LINK 1122 1124)(LINK 1125 1126)(LINK 1128 1129)(LINK 1129 1130)(LINK 1131 1132)(LINK 1133 1135)(LINK 1136 1137)(LINK 1137 1138)(LINK 1148 1149)(LINK 1149 1150)(LINK 1151 1152)(LINK 1154 1155)(LINK 1155 1156)(LINK 1159 1160)(LINK 1160 1161) .))))))
+
+
+(!(= @treePlan 
+ (TREE (TASK-LIST (.
+                                               (TASK (TYPE METHOD)(TASK-ID 1119)(TASK-NAME BuildStack)(ACTORS (. PR2_ROBOT HERAKLES_HUMAN1 .))(PARAMETERS (. StackArea .))
+                                                     (SUBNODES (.
+                                                                (TASK (TYPE METHOD)(TASK-ID 1120)(TASK-NAME Handle)(ACTORS (. PR2_ROBOT .))(PARAMETERS (. PR2_ROBOT Blue_Cube StackArea .))
+                                                                      (SUBNODES (. (TASK (TYPE METHOD)(TASK-ID 1122)(TASK-NAME ApplyFirstOperations)(ACTORS (. PR2_ROBOT .))(PARAMETERS (. PR2_ROBOT Blue_Cube .))(SUBNODES (. (TASK (TYPE ACTION)(TASK-ID 1125)(TASK-NAME Pick)(ACTORS (. PR2_ROBOT .))(PARAMETERS (. PR2_ROBOT Blue_Cube .))(SUBNODES (.  .)))(TASK (TYPE METHOD)(TASK-ID 1126)(TASK-NAME ApplyOperation)(ACTORS (. PR2_ROBOT .))(PARAMETERS (. PR2_ROBOT Blue_Cube Glue .))(SUBNODES (. (TASK (TYPE ACTION)(TASK-ID 1128)(TASK-NAME Place)(ACTORS (. PR2_ROBOT .))(PARAMETERS (. PR2_ROBOT Blue_Cube GluingArea .))(SUBNODES (.  .)))(TASK (TYPE ACTION)(TASK-ID 1129)(TASK-NAME Apply)(ACTORS (. PR2_ROBOT .))(PARAMETERS (. PR2_ROBOT Blue_Cube Glue .))(SUBNODES (.  .)))(TASK (TYPE ACTION)(TASK-ID 1130)(TASK-NAME Pick)(ACTORS (. PR2_ROBOT .))(PARAMETERS (. PR2_ROBOT Blue_Cube .))(SUBNODES (.  .))) .))) .)))(TASK (TYPE ACTION)(TASK-ID 1124)(TASK-NAME PlaceOnStack)(ACTORS (. PR2_ROBOT .))(PARAMETERS (. PR2_ROBOT Blue_Cube StackArea .))(SUBNODES (.  .))) .)))(TASK (TYPE METHOD)(TASK-ID 1121)(TASK-NAME BuildStack)(ACTORS (. HERAKLES_HUMAN1 PR2_ROBOT .))(PARAMETERS (. StackArea .))(SUBNODES (. (TASK (TYPE METHOD)(TASK-ID 1131)(TASK-NAME Handle)(ACTORS (. HERAKLES_HUMAN1 .))(PARAMETERS (. HERAKLES_HUMAN1 Green_Cube StackArea .))(SUBNODES (. (TASK (TYPE METHOD)(TASK-ID 1133)(TASK-NAME ApplyFirstOperations)(ACTORS (. HERAKLES_HUMAN1 .))(PARAMETERS (. HERAKLES_HUMAN1 Green_Cube .))(SUBNODES (. (TASK (TYPE ACTION)(TASK-ID 1136)(TASK-NAME Pick)(ACTORS (. HERAKLES_HUMAN1 .))(PARAMETERS (. HERAKLES_HUMAN1 Green_Cube .))(SUBNODES (.  .)))(TASK (TYPE METHOD)(TASK-ID 1137)(TASK-NAME ApplyOperation)(ACTORS (. HERAKLES_HUMAN1 .))(PARAMETERS (. HERAKLES_HUMAN1 Green_Cube Smoothen .))(SUBNODES (. (TASK (TYPE ACTION)(TASK-ID 1142)(TASK-NAME HandleOperation)(ACTORS (. HERAKLES_HUMAN1 .))(PARAMETERS (. HERAKLES_HUMAN1 Green_Cube Smoothen SmoothingArea .))(SUBNODES (.  .))) .)))(TASK (TYPE METHOD)(TASK-ID 1138)(TASK-NAME ApplyFirstOperations)(ACTORS (. HERAKLES_HUMAN1 .))(PARAMETERS (. HERAKLES_HUMAN1 Green_Cube .))(SUBNODES (. (TASK (TYPE METHOD)(TASK-ID 1143)(TASK-NAME ApplyOperation)(ACTORS (. HERAKLES_HUMAN1 .))(PARAMETERS (. HERAKLES_HUMAN1 Green_Cube Stickers .))(SUBNODES (. (TASK (TYPE ACTION)(TASK-ID 1145)(TASK-NAME HandleOperation)(ACTORS (. HERAKLES_HUMAN1 .))(PARAMETERS (. HERAKLES_HUMAN1 Green_Cube Stickers StickersArea .))(SUBNODES (.  .))) .))) .))) .)))(TASK (TYPE ACTION)(TASK-ID 1135)(TASK-NAME PlaceOnStack)(ACTORS (. HERAKLES_HUMAN1 .))(PARAMETERS (. HERAKLES_HUMAN1 Green_Cube StackArea .))(SUBNODES (.  .))) .)))(TASK (TYPE METHOD)(TASK-ID 1132)(TASK-NAME BuildStack)(ACTORS (. PR2_ROBOT .))(PARAMETERS (. StackArea .))(SUBNODES (. (TASK (TYPE METHOD)(TASK-ID 1146)(TASK-NAME Handle)(ACTORS (. PR2_ROBOT .))(PARAMETERS (. PR2_ROBOT Red_Cube StackArea .))(SUBNODES (. (TASK (TYPE METHOD)(TASK-ID 1148)(TASK-NAME ApplyFirstOperations)(ACTORS (. PR2_ROBOT .))(PARAMETERS (. PR2_ROBOT Red_Cube .))(SUBNODES (. (TASK (TYPE ACTION)(TASK-ID 1151)(TASK-NAME Pick)(ACTORS (. PR2_ROBOT .))(PARAMETERS (. PR2_ROBOT Red_Cube .))(SUBNODES (.  .)))(TASK (TYPE METHOD)(TASK-ID 1152)(TASK-NAME ApplyOperation)(ACTORS (. PR2_ROBOT .))(PARAMETERS (. PR2_ROBOT Red_Cube Clean .))(SUBNODES (. (TASK (TYPE ACTION)(TASK-ID 1154)(TASK-NAME Place)(ACTORS (. PR2_ROBOT .))(PARAMETERS (. PR2_ROBOT Red_Cube CleaningArea .))(SUBNODES (.  .)))(TASK (TYPE ACTION)(TASK-ID 1155)(TASK-NAME Apply)(ACTORS (. PR2_ROBOT .))(PARAMETERS (. PR2_ROBOT Red_Cube Clean .))(SUBNODES (.  .)))(TASK (TYPE ACTION)(TASK-ID 1156)(TASK-NAME Pick)(ACTORS (. PR2_ROBOT .))(PARAMETERS (. PR2_ROBOT Red_Cube .))(SUBNODES (. .))) .))) .)))(TASK (TYPE METHOD)(TASK-ID 1149)(TASK-NAME ApplySecondOperations)(ACTORS (. PR2_ROBOT .))(PARAMETERS (. PR2_ROBOT Red_Cube .))(SUBNODES (. (TASK (TYPE METHOD)(TASK-ID 1157)(TASK-NAME ApplyOperation)(ACTORS (. PR2_ROBOT .))(PARAMETERS (. PR2_ROBOT Red_Cube Polish .))(SUBNODES (. (TASK (TYPE ACTION)(TASK-ID 1159)(TASK-NAME Place)(ACTORS (. PR2_ROBOT .))(PARAMETERS (. PR2_ROBOT Red_Cube PolishingArea .))(SUBNODES (.  .)))(TASK (TYPE ACTION)(TASK-ID 1160)(TASK-NAME Apply)(ACTORS (. PR2_ROBOT .))(PARAMETERS (. PR2_ROBOT Red_Cube Polish .))(SUBNODES (.  .)))(TASK (TYPE ACTION)(TASK-ID 1161)(TASK-NAME Pick)(ACTORS (. PR2_ROBOT .))(PARAMETERS (. PR2_ROBOT Red_Cube .))(SUBNODES (. .))) .))) .)))(TASK (TYPE ACTION)(TASK-ID 1150)(TASK-NAME PlaceOnStack)(ACTORS (. PR2_ROBOT .))(PARAMETERS (. PR2_ROBOT Red_Cube StackArea .))(SUBNODES (.  .)))
+                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                .))) .))) .))) .))).)
+                  )
+
+
+                                   (LINK-LIST (. (LINK 1120 1121)(LINK 1122 1124)(LINK 1125 1126)(LINK 1128 1129)(LINK 1129 1130)(LINK 1131 1132)(LINK 1133 1135)(LINK 1136 1137)(LINK 1137 1138)(LINK 1148 1149)(LINK 1149 1150)(LINK 1151 1152)(LINK 1154 1155)(LINK 1155 1156)(LINK 1159 1160)(LINK 1160 1161) .)))))
+
+
+
+
+(!(== (VAL @treePlan)
+
+(TREE (TASK-LIST @taskList) (LINK-LIST @linkList))
+    ))
+
+(!(= @root (CAR @taskList)))
+(!(PlannerInterface.parseHatpTree @root @parsedTree))
+(!(= @actionsToMonitor (. .)))
+(!(PlanManager.analyzePlanTree @parsedTree @actionsToMonitor))
+(!(PlanManager.monitorPlan HERAKLES_HUMAN1 @actionsToMonitor))
+; (!(== (VAL @plan) 
+; 	(HATP-REP 
+;     (REQ-ID @id)
+;     (REPORT @report)
+;  	  (STREAMS 
+; 			(ACTION-LIST @actionList)
+; 			(LINK-LIST @linkList)
+; 		)
+;  	(TREE
+; 		(TASK-LIST @taskList)
+; 		(LINK-LIST @linkList)
+; 		)
+;  	)
+; 	))
+
+)
+)
+
+(defop |testPlanMonitoring|
+	:invocation(!(Tester.testPlanMonitoring))
+	:body (
+		(!(PRINT "asd"))
+		)
+	)
+
+
+
  (defop |testRecursion|
-   :invocation(!(Tester.testRecursion @i))
-   :body (
-          (!(PRINT @i))
-          (IF(?(< @i 5))
-             (!(Tester.testRecursion (+ @i 1)))
-             )
-          )
+	 :invocation(!(Tester.testRecursion @i))
+	 :body (
+					(!(PRINT @i))
+					(IF(?(< @i 5))
+						 (!(Tester.testRecursion (+ @i 1)))
+						 )
+					)
 
-   )
+	 )
 
  (defop |testPlanAttention|
-   :invocation(!(Tester.testPlanAttentional))
-   :body (
-          (!(PlannerInterface.init))
-          (=>(PlannerInterface.getPlan HandleSurface  (. ASSEMBLY_SURFACE_1 .) ))  ;;we ask for a plan
-          (^(PlannerInterface.report @report))
-          (~>(PlannerInterface.report (VAL @report)))
-          (IF(?(EQUAL @report OK))
-             (^(PlannerInterface.result @plan))
-             (~>(PlannerInterface.result (VAL @plan)))
-             (!(= @robot (CAR @plan)))
-             (!(= @plan (CDR @plan)))
-             (!(= @human (CAR @plan)))
-
-             (!(SEND-MESSAGE seed_plan_listener (PlanManager.planResult @robot)))
-             )
-          )
-
-   )
+	 :invocation(!(Tester.testPlanAttentional))
+	 :body (
+					(!(PlannerInterface.init))
+					(=>(PlannerInterface.getPlan HandleSurface  (. ASSEMBLY_SURFACE_1 .) ))  ;;we ask for a plan
+					(^(PlannerInterface.report @report))
+					(~>(PlannerInterface.report (VAL @report)))
+					(IF(?(EQUAL @report OK))
+						 (^(PlannerInterface.result @plan))
+						 (~>(PlannerInterface.result (VAL @plan)))
+						 (!(= @PR2_ROBOT (CAR @plan)))
+						 (!(= @plan (CDR @plan)))
+						 (!(= @human (CAR @plan)))
+
+
+						 (!(SEND-MESSAGE seed_plan_listener (PlanManager.planResult @PR2_ROBOT)))
+						 )
+					)
+
+	 )
 
 
  (defop |testMapSwitch|
-   :invocation (!(Tester.testMapSwitch))
-   :body (
-          (!(= @plan (. 0 1 2 3 .)))
-
-          (!(= @currentNode (CAR @plan)))
-          (!(= @plan (CDR @plan)))
-          (WHILE(?(~(NULL @plan)))
-                (!(= @nextNode (CAR @plan)))
-                (!(= @plan (CDR @plan)))
-                (!(SEND-MESSAGE spencer_map_server (spencer_map_server.request switchMap @currentNode @nextNode)))
-                (^(spencer_map_server.switchMap.report @report))
-                (!(SEND-MESSAGE spencer_map_server (spencer_map_server.request getCenter @nextNode)))
-                (^(spencer_map_server.getCenter.report @report))
-                (^(spencer_map_server.getCenter.result @x @y))
-
-                (!(BaseActions.getFreeId @moveId))
-                (!(ReportManager.sub BaseActions.report @moveId))
-                (=>(BaseActions.action move (. (. @x @y 0 .) .)))
-                (!(DatabaseInterface.addMonitor (AGENT-STATEMENT SPENCER_ROBOT pr2_robot isAt @nextNode) (Monitor.atNextLocation)))
-                (^(Monitor.atNextLocation))
-                (=>(BaseActions.stop @moveId))
-                (^(BaseActions.report (VAL @moveId) @report))
-                (~>(BaseActions.report (VAL @moveId) (VAL @report)))
-                (~>(Monitor.atNextLocation))
-                )
-
-          )
-   )
+	 :invocation (!(Tester.testMapSwitch))
+	 :body (
+					(!(= @plan (. 0 1 2 3 .)))
+
+					(!(= @currentNode (CAR @plan)))
+					(!(= @plan (CDR @plan)))
+					(WHILE(?(~(NULL @plan)))
+								(!(= @nextNode (CAR @plan)))
+								(!(= @plan (CDR @plan)))
+								(!(SEND-MESSAGE spencer_map_server (spencer_map_server.request switchMap @currentNode @nextNode)))
+								(^(spencer_map_server.switchMap.report @report))
+								(!(SEND-MESSAGE spencer_map_server (spencer_map_server.request getCenter @nextNode)))
+								(^(spencer_map_server.getCenter.report @report))
+								(^(spencer_map_server.getCenter.result @x @y))
+
+								(!(BaseActions.getFreeId @moveId))
+								(!(ReportManager.sub BaseActions.report @moveId))
+								(=>(BaseActions.action move (. (. @x @y 0 .) .)))
+								(!(DatabaseInterface.addMonitor (AGENT-STATEMENT SPENCER_PR2_ROBOT pr2_PR2_ROBOT isAt @nextNode) (Monitor.atNextLocation)))
+								(^(Monitor.atNextLocation))
+								(=>(BaseActions.stop @moveId))
+								(^(BaseActions.report (VAL @moveId) @report))
+								(~>(BaseActions.report (VAL @moveId) (VAL @report)))
+								(~>(Monitor.atNextLocation))
+								)
+
+					)
+	 )
 
  (defop |testEstimateIntentions|
-   :invocation(!(Tester.testEstimate))
-   :body (
-          (!(Controller.initAll))
-          (!(FakeExecution.lmp))
-          (!(Softmotion.getFreeId @smId))
-          (=>(Softmotion.request moveHead -0.2 0.1 @smId))
-          (^(Softmotion.report (VAL @smId) @report))
+	 :invocation(!(Tester.testEstimate))
+	 :body (
+					(!(Controller.initAll))
+					(!(FakeExecution.lmp))
+					(!(Softmotion.getFreeId @smId))
+					(=>(Softmotion.request moveHead -0.2 0.1 @smId))
+					(^(Softmotion.report (VAL @smId) @report))
 
-          (!(SEND-MESSAGE EstimateIntentions (EstimateIntentions.start (. EatCookies DrinkWater FillCookies .) (. human_take_waterBottle human_take_glass human_open_cookieBox human_move_fridge .) (. BOTTLE GLASS COOKIE_BOX FRIDGE .) (. HotDay SnackTime .) )))
-                                        ;         (!(SEND-MESSAGE EstimateIntentions (EstimateIntentions.start (. ReadBook PrepareDinner ListenToMusic UseTelephone .) (. human_move_table human_move_nightstand human_move_library human_move_sofa .) (. TABLE NIGHSTAND LIBRARY SOFA .) (. AfterWork DinnerTime .) )))
+					(!(SEND-MESSAGE EstimateIntentions (EstimateIntentions.start (. EatCookies DrinkWater FillCookies .) (. human_take_waterBottle human_take_glass human_open_cookieBox human_move_fridge .) (. BOTTLE GLASS COOKIE_BOX FRIDGE .) (. HotDay SnackTime .) )))
+																				;         (!(SEND-MESSAGE EstimateIntentions (EstimateIntentions.start (. ReadBook PrepareDinner ListenToMusic UseTelephone .) (. human_move_table human_move_nightstand human_move_library human_move_sofa .) (. TABLE NIGHSTAND LIBRARY SOFA .) (. AfterWork DinnerTime .) )))
 
-          (^(EstimateIntentions.rosResult @intention @iprob @action @aprob @q))
-          (!(FakeExecution.giveDrink))
-          )
+					(^(EstimateIntentions.rosResult @intention @iprob @action @aprob @q))
+					(!(FakeExecution.giveDrink))
+					)
 
-   )
+	 )
 
 (defop |testSpencer|
-  :invocation(!(Tester.testSpencer))
-  :body (
-         (!(Controller.initAll))
-         (=>(ExecutionManager.execute guideGroup 0 goal 0))
-         )
-  )
+	:invocation(!(Tester.testSpencer))
+	:body (
+				 (!(Controller.initAll))
+				 (=>(ExecutionManager.execute guideGroup 0 goal 0))
+				 )
+	)
 
 (defop |testRegisterChanges|
-  :invocation(!(Tester.testRegisterChanges))
-  :body (
-         (!(Controller.initAll))
-         (!(AgentActionMonitor.startMonitoringAgent HERAKLES_HUMAN1))
-         )
-  )
+	:invocation(!(Tester.testRegisterChanges))
+	:body (
+				 (!(Controller.initAll))
+				 (!(AgentActionMonitor.startMonitoringAgent HERAKLES_HUMAN1))
+				 )
+	)
 
 (defop |testInference|
-  :invocation(!(Tester.testInference))
-  :body (
-         (!(Controller.initAll))
-         (!(AgentActionMonitor.calculateInferencesForAgents (. HERAKLES_HUMAN1 .)))
-         )
+	:invocation(!(Tester.testInference))
+	:body (
+				 (!(Controller.initAll))
+				 (!(AgentActionMonitor.calculateInferencesForAgents (. HERAKLES_HUMAN1 .)))
+				 )
 
-  )
+	)
 
 (defop |testInferenceOnPickPlace|
-  :invocation(!(Tester.testInferenceOnPickPlace))
-  :body (
-         (!(Controller.initAll))
+	:invocation(!(Tester.testInferenceOnPickPlace))
+	:body (
+				 (!(Controller.initAll))
 
-         (!(AgentActionMonitor.calculateInferencesForAgents (. HERAKLES_HUMAN1 .)))
-         (=>(ExecutionManager.execute take GLUE_BOTTLE RIGHT 0))
-         (^(ExecutionManager.report 0 @report))
-         (=>(ExecutionManager.execute handover GIVE GLUE_BOTTLE HERAKLES_HUMAN1 1))
-         (^(ExecutionManager.report 1 @report))
+				 (!(AgentActionMonitor.calculateInferencesForAgents (. HERAKLES_HUMAN1 .)))
+				 (=>(ExecutionManager.execute take GLUE_BOTTLE RIGHT 0))
+				 (^(ExecutionManager.report 0 @report))
+				 (=>(ExecutionManager.execute handover GIVE GLUE_BOTTLE HERAKLES_HUMAN1 1))
+				 (^(ExecutionManager.report 1 @report))
 
-         )
-  )
+				 )
+	)
 
 (defop |testPickGive|
-  :invocation(!(Tester.testPickGive))
-  :body (
-         (!(Controller.initAll))
-         (=>(ExecutionManager.execute take LOTR_TAPE RIGHT 0))
-          (^(ExecutionManager.report 0 @report))
-
-          (=>(ExecutionManager.execute simpleHandover GIVE LOTR_TAPE HERAKLES_HUMAN1 1))
-          (^(ExecutionManager.report 1 @report))
-          )
+	:invocation(!(Tester.testPickGive))
+	:body (
+				 (!(Controller.initAll))
+				 (=>(ExecutionManager.execute take LOTR_TAPE RIGHT 0))
+					(^(ExecutionManager.report 0 @report))
+
+					(=>(ExecutionManager.execute simpleHandover GIVE LOTR_TAPE HERAKLES_HUMAN1 1))
+					(^(ExecutionManager.report 1 @report))
+					)
 )
 
  (defop |testSendMessage|
-   :invocation(!(Tester.testSendMessage))
-   :body (
-          (!(= @report "OK"))
-          (!(SEND-MESSAGE asd (AttentionalInterface.report @report)))
-          )
-   )
+	 :invocation(!(Tester.testSendMessage))
+	 :body (
+					(!(= @report "OK"))
+					(!(SEND-MESSAGE asd (AttentionalInterface.report @report)))
+					)
+	 )
 
 
  (defop |testReportManager|
-   :invocation(!(Tester.testReportManager))
-   :body (
-          (!(ReportManager.sub ExecutionManager.report 0))
-          ;; (!(ReportManager.sub ExecutionManager.report 0))
-          ;; (!(ReportManager.unsub ExecutionManager.report 0))
-          ;; (!(ReportManager.unsub ExecutionManager.report 0))
+	 :invocation(!(Tester.testReportManager))
+	 :body (
+					(!(ReportManager.sub ExecutionManager.report 0))
+					;; (!(ReportManager.sub ExecutionManager.report 0))
+					;; (!(ReportManager.unsub ExecutionManager.report 0))
+					;; (!(ReportManager.unsub ExecutionManager.report 0))
 
-          (!(ReportManager.publish ExecutionManager.report 0 OK))
+					(!(ReportManager.publish ExecutionManager.report 0 OK))
 
-          )
-   )
+					)
+	 )
  (defop |testGuide| 
-   :invocation (!(Tester.testGuide @agent))
-   :body (
-	  (!(Controller.initAll))
-	  (!(ExecutionManager.getFreeId @approachId))
-	  (=>(ExecutionManager.execute approachPerson @agent @approachId))
-	  (^(ExecutionManager.report (VAL @approachId) @report))
-	  (~>(ExecutionManager.report (VAL @approachId) @report))
-
-	  (^(ELAPSED-TIME (TIME) 6))
-	  (!(ExecutionManager.getFreeId @guideId))
-	  (=>(ExecutionManager.execute startGuide @guideId))
-	  (^(ExecutionManager.report (VAL @guideId) @report))
-	  )
-   )
+	 :invocation (!(Tester.testGuide @agent))
+	 :body (
+		(!(Controller.initAll))
+		(!(ExecutionManager.getFreeId @approachId))
+		(=>(ExecutionManager.execute approachPerson @agent @approachId))
+		(^(ExecutionManager.report (VAL @approachId) @report))
+		(~>(ExecutionManager.report (VAL @approachId) @report))
+
+		(^(ELAPSED-TIME (TIME) 6))
+		(!(ExecutionManager.getFreeId @guideId))
+		(=>(ExecutionManager.execute startGuide @guideId))
+		(^(ExecutionManager.report (VAL @guideId) @report))
+		)
+	 )
 
  (defop |testGoBase|
-   :invocation(!(Tester.testGoBase))
-   :body (
-	  (!(Controller.initAll))
-	  (=>(BaseActions.action move (. (. 0 0 0 .) .) 0))
-	  (^(BaseActions.report 0 @report))
-	  )
-   )
+	 :invocation(!(Tester.testGoBase))
+	 :body (
+		(!(Controller.initAll))
+		(=>(BaseActions.action move (. (. 0 0 0 .) .) 0))
+		(^(BaseActions.report 0 @report))
+		)
+	 )
 
  (defop |testSpencerGo|
-   :invocation(!(Tester.testSpencerGo))
-   :body (
-	  (!(Controller.initAll))
-	  (=>(BaseActions.action move (. (. 2 0 -90 .) .) 0))
-	  (^(BaseActions.report 0 @report))
-	  (~>(BaseActions.report 0 @report))
-          (^(ELAPSED-TIME (TIME) 5))
-	  (=>(BaseActions.action move (. (. -2 0 90 .) .) 1))
+	 :invocation(!(Tester.testSpencerGo))
+	 :body (
+		(!(Controller.initAll))
+		(=>(BaseActions.action move (. (. 2 0 -90 .) .) 0))
+		(^(BaseActions.report 0 @report))
+		(~>(BaseActions.report 0 @report))
+					(^(ELAPSED-TIME (TIME) 5))
+		(=>(BaseActions.action move (. (. -2 0 90 .) .) 1))
 ;          (=>(BaseActions.action move (. (. -4.8 8 -90 .) .) 1))
-          (^(BaseActions.report 1 @report))
-          (~>(BaseActions.report 1 @report))
-	  )
-   )
+					(^(BaseActions.report 1 @report))
+					(~>(BaseActions.report 1 @report))
+		)
+	 )
  (defop |testGtpGoto|
-   :invocation (!(Tester.testGtpGoto))
-   :body (
-	  (!(Controller.initAll))
-	  (=>(GtpActions.action travelTo NO_NAME (. 2.5 2 0 .) 0))
-	  )
-   )
+	 :invocation (!(Tester.testGtpGoto))
+	 :body (
+		(!(Controller.initAll))
+		(=>(GtpActions.action travelTo NO_NAME (. 2.5 2 0 .) 0))
+		)
+	 )
 
 (defop |testRosMoveHead| 
-   :invocation(!(TestRosMoveHead))
-   :body (
-	  (!(SEND-MESSAGE HeadBridge (moveHead pan 1)))
-	  (^(HeadBridge.response @response))
+	 :invocation(!(TestRosMoveHead))
+	 :body (
+		(!(SEND-MESSAGE HeadBridge (moveHead pan 1)))
+		(^(HeadBridge.response @response))
 			 
-	  )
-   )
+		)
+	 )
 
  (defop |testGtpPlan|
-   :invocation(!(Tester.testGtpPlan))
-   :body (
-	  (!(Controller.initAll))
-	  
-	  (=>(Mhp.request initGtp 0))
-	  (^(Mhp.report 0 @any))
-	  (=>(Mhp.request fetchEnvironment 1))
-
-	  (^(Mhp.report 1 @any))
-	  (=>(Mhp.request addGtpAgent mainAgent PR2_ROBOT 2))
-	  (^(Mhp.report 2 @any))
-	  (=>(Mhp.request addGtpObject mainObject WALLE_TAPE 3))
-	  (^(Mhp.report 3 @any))
-	  (=>(Mhp.request addGtpData hand right 4))
-	  (^(Mhp.report 4 @any))
-	  (=>(Mhp.request planGtpTask pick 5))
-	  (^(Mhp.report 5 @any))
-	  )
-   )
+	 :invocation(!(Tester.testGtpPlan))
+	 :body (
+		(!(Controller.initAll))
+		
+		(=>(Mhp.request initGtp 0))
+		(^(Mhp.report 0 @any))
+		(=>(Mhp.request fetchEnvironment 1))
+
+		(^(Mhp.report 1 @any))
+		(=>(Mhp.request addGtpAgent mainAgent PR2_PR2_ROBOT 2))
+		(^(Mhp.report 2 @any))
+		(=>(Mhp.request addGtpObject mainObject WALLE_TAPE 3))
+		(^(Mhp.report 3 @any))
+		(=>(Mhp.request addGtpData hand right 4))
+		(^(Mhp.report 4 @any))
+		(=>(Mhp.request planGtpTask pick 5))
+		(^(Mhp.report 5 @any))
+		)
+	 )
 
 
  (defop |testGtpTake|
-   :invocation(!(Tester.testGtpTake))
-   :body (
-	  (!(Controller.initAll))
-	  (=>(GtpActions.action pick BLUE_CUBE RIGHT 0))
-	  (^(GtpActions.report 0 @report))
-	  (~>(GtpActions.report @id @report))
-	  
-	  (=>(GtpActions.action place BLUE_CUBE TABLE_4 PLACEMAT_BLUE (. .) RIGHT 1))
-	  (^(GtpActions.report 1 @report))
-	  (~>(GtpActions.report @id @report))
-	  )
-   )
+	 :invocation(!(Tester.testGtpTake))
+	 :body (
+		(!(Controller.initAll))
+		(=>(GtpActions.action pick BLUE_CUBE RIGHT 0))
+		(^(GtpActions.report 0 @report))
+		(~>(GtpActions.report @id @report))
+		
+		(=>(GtpActions.action place BLUE_CUBE TABLE_4 PLACEMAT_BLUE (. .) RIGHT 1))
+		(^(GtpActions.report 1 @report))
+		(~>(GtpActions.report @id @report))
+		)
+	 )
  
  (defop |testGtpPlace|
-   :invocation(!(Tester.testGtpPlace))
-   :body (
-	  (=>(GtpActions.action place BLUE_CUBE TABLE_4 PLACEMAT_BLUE (. .) RIGHT 1))
-	  (^(GtpActions.report 1 @report))
-	  (~>(GtpActions.report @id @report))
-	  )
-   )
+	 :invocation(!(Tester.testGtpPlace))
+	 :body (
+		(=>(GtpActions.action place BLUE_CUBE TABLE_4 PLACEMAT_BLUE (. .) RIGHT 1))
+		(^(GtpActions.report 1 @report))
+		(~>(GtpActions.report @id @report))
+		)
+	 )
 (defop |testPlanTake|
-  :invocation(!(Tester.testPlanTake))
-  :body (
+	:invocation(!(Tester.testPlanTake))
+	:body (
 	 (!(Controller.initAll))
 	 (!(Connector.setPlanManager))
-	 (=>(PlanManager.goal TakeObject (. PR2_ROBOT GREY_TAPE .)))
+	 (=>(PlanManager.goal TakeObject (. PR2_PR2_ROBOT GREY_TAPE .)))
 	 (=>(PlanManager.newGoal TRUE))
 
 	 )
-  )
+	)
 
 (defop |testBaseActions|
-  :invocation(!(Tester.testBaseActions))
-  :body (
+	:invocation(!(Tester.testBaseActions))
+	:body (
 	 (!(BaseActions.init))
 	 (!(BaseActions.getFreeId @id))
 	 (=>(BaseActions.action move (. (. 1.5 2 0 .) .) @id ))
 	 )
-  )
+	)
 
  (defop |testSpeak|
-   :invocation(!(Tester.testSpeak))
-   :body (
-	  (!(Acapela.init))
+	 :invocation(!(Tester.testSpeak))
+	 :body (
+		(!(Acapela.init))
 
-	  (!(Acapela.say "Hello."))
-	  (^(ELAPSED-TIME (TIME) 1))
+		(!(Acapela.say "Hello."))
+		(^(ELAPSED-TIME (TIME) 1))
 (!(Acapela.say "I think you want to clean the table. Let's see if I can help."))
-	  (^(ELAPSED-TIME (TIME) 1))
+		(^(ELAPSED-TIME (TIME) 1))
 (!(Acapela.say "Let me think of a plan."))
-	  (^(ELAPSED-TIME (TIME) 1))
+		(^(ELAPSED-TIME (TIME) 1))
 (!(Acapela.say "Okay, this is the plan"))
-	  (^(ELAPSED-TIME (TIME) 1))
+		(^(ELAPSED-TIME (TIME) 1))
 (!(Acapela.say "You want to do it in a different way? Let's see If I can help."))
-	  (^(ELAPSED-TIME (TIME) 1))
+		(^(ELAPSED-TIME (TIME) 1))
 (!(Acapela.say "Okay. I wait for further instructions"))
-	  (^(ELAPSED-TIME (TIME) 1))
+		(^(ELAPSED-TIME (TIME) 1))
 (!(Acapela.say "Let me think of another plan"))
-	  (^(ELAPSED-TIME (TIME) 1))
+		(^(ELAPSED-TIME (TIME) 1))
 (!(Acapela.say "First, I take the lord of the rings tape and give it to you."))
-	  (^(ELAPSED-TIME (TIME) 1))
+		(^(ELAPSED-TIME (TIME) 1))
 (!(Acapela.say "Then, you throw it in the pink trashbin."))
-	  (^(ELAPSED-TIME (TIME) 1))
+		(^(ELAPSED-TIME (TIME) 1))
 (!(Acapela.say "After that, I take the walle tape and give it to you."))
-	  (^(ELAPSED-TIME (TIME) 1))
+		(^(ELAPSED-TIME (TIME) 1))
 (!(Acapela.say "To conclude, you throw it in the pink trashbin."))
-	  (^(ELAPSED-TIME (TIME) 1))
+		(^(ELAPSED-TIME (TIME) 1))
 (!(Acapela.say "First you take the lord of the rings tape and then you give it to me. To conclude i throw it in the pink trashbin."))
-	  (^(ELAPSED-TIME (TIME) 1))
+		(^(ELAPSED-TIME (TIME) 1))
 (!(Acapela.say "I take the lord of the rings tape"))
-	  (^(ELAPSED-TIME (TIME) 1))
+		(^(ELAPSED-TIME (TIME) 1))
 (!(Acapela.say "I take the walle tape"))
-	  (^(ELAPSED-TIME (TIME) 1))
+		(^(ELAPSED-TIME (TIME) 1))
 (!(Acapela.say "I give it to you"))
-	  (^(ELAPSED-TIME (TIME) 1))
+		(^(ELAPSED-TIME (TIME) 1))
 (!(Acapela.say "I give you the walle tape"))
-	  (^(ELAPSED-TIME (TIME) 1))
+		(^(ELAPSED-TIME (TIME) 1))
 (!(Acapela.say "I give you the lord of the rings tape"))
-	  (^(ELAPSED-TIME (TIME) 1))
+		(^(ELAPSED-TIME (TIME) 1))
 (!(Acapela.say "I throw it in the pink trash bin"))
-	  (^(ELAPSED-TIME (TIME) 1))
+		(^(ELAPSED-TIME (TIME) 1))
 (!(Acapela.say "I throw the walle tape in the pink trash bin"))
-	  (^(ELAPSED-TIME (TIME) 1))
+		(^(ELAPSED-TIME (TIME) 1))
 (!(Acapela.say "Take the walle tape"))
-	  (^(ELAPSED-TIME (TIME) 1))
+		(^(ELAPSED-TIME (TIME) 1))
 (!(Acapela.say "Take the lord of the rings tape"))
-	  (^(ELAPSED-TIME (TIME) 1))
+		(^(ELAPSED-TIME (TIME) 1))
 (!(Acapela.say "Give me the lord of the rings tape"))
-	  (^(ELAPSED-TIME (TIME) 1))
+		(^(ELAPSED-TIME (TIME) 1))
 (!(Acapela.say "Give it to me"))
-	  (^(ELAPSED-TIME (TIME) 1))
+		(^(ELAPSED-TIME (TIME) 1))
 (!(Acapela.say "Throw it in the pink trashbin"))
-	  (^(ELAPSED-TIME (TIME) 1))
+		(^(ELAPSED-TIME (TIME) 1))
 (!(Acapela.say "Throw the walle tape in the pink trashbin"))
-	  (^(ELAPSED-TIME (TIME) 1))
+		(^(ELAPSED-TIME (TIME) 1))
 (!(Acapela.say "Throw the lord of the rings tape in the pink trashbin"))
-	  (^(ELAPSED-TIME (TIME) 1))
+		(^(ELAPSED-TIME (TIME) 1))
 (!(Acapela.say "I can't seem to reach it"))
-	  (^(ELAPSED-TIME (TIME) 1))
+		(^(ELAPSED-TIME (TIME) 1))
 )
 )
 
  (defop |testGetActionString|
-   :invocation(!(Tester.testGetActionString))
-   :body (
-	  (!(= @actionName handover))
-	  (!(= @actionParameters (. WALLE_TAPE HERAKLES_HUMAN1 PR2_ROBOT .)))
-	  (!(PlanManager.getActionString @actionName @actionParameters "I " 0 @oldObject @followsHandover @actionString))
-	  (!(PlanManager.getActionString @actionName @actionParameters "I " 0 @oldObject @followsHandover @actionString))
-	  (!(PlanManager.getActionString @actionName @actionParameters "I " 0 @oldObject @followsHandover @actionString))
-	  )
-   )
+	 :invocation(!(Tester.testGetActionString))
+	 :body (
+		(!(= @actionName handover))
+		(!(= @actionParameters (. WALLE_TAPE HERAKLES_HUMAN1 PR2_PR2_ROBOT .)))
+		(!(PlanManager.getActionString @actionName @actionParameters "I " 0 @oldObject @followsHandover @actionString))
+		(!(PlanManager.getActionString @actionName @actionParameters "I " 0 @oldObject @followsHandover @actionString))
+		(!(PlanManager.getActionString @actionName @actionParameters "I " 0 @oldObject @followsHandover @actionString))
+		)
+	 )
  (defop |testTellPlan|
-   :invocation(!(Tester.testTellPlan))
-   :body (
-	  (!(Controller.initAll))
-	  (=>(PlanManager.goal Clean (. TABLE_4 .)))
-	  (?(PlanManager.goal @goal @parameters))
-	  (=>(PlannerInterface.getPlan (VAL @goal) (VAL @parameters)))   ;;we ask for a plan
-	  (^(PlannerInterface.report @report))
-	  (~>(PlannerInterface.report (VAL @report)))
-	  (IF(?(EQUAL @report OK))
-	     (^(PlannerInterface.result @plan))
-	     (~>(PlannerInterface.result (VAL @plan)))
-	     (!(PlanManager.tellPlan @plan))
-			       
-	     )
+	 :invocation(!(Tester.testTellPlan))
+	 :body (
+		(!(Controller.initAll))
+		(=>(PlanManager.goal Clean (. TABLE_4 .)))
+		(?(PlanManager.goal @goal @parameters))
+		(=>(PlannerInterface.getPlan (VAL @goal) (VAL @parameters)))   ;;we ask for a plan
+		(^(PlannerInterface.report @report))
+		(~>(PlannerInterface.report (VAL @report)))
+		(IF(?(EQUAL @report OK))
+			 (^(PlannerInterface.result @plan))
+			 (~>(PlannerInterface.result (VAL @plan)))
+			 (!(PlanManager.tellPlan @plan))
+						 
+			 )
 			 
-	  )
-   )
+		)
+	 )
 
  (defop |testWeirdError|
-   :invocation(!(Tester.testWeirdError))
-   :body (
-	  (!(= @stoppable TRUE))
-	  (IF(?(&(ExecutionManager.stop 0) (EQUAL @stoppable TRUE)))
-	     (!(PRINT "OK"))
-	     )
-	  
-	  )
-   )
+	 :invocation(!(Tester.testWeirdError))
+	 :body (
+		(!(= @stoppable TRUE))
+		(IF(?(&(ExecutionManager.stop 0) (EQUAL @stoppable TRUE)))
+			 (!(PRINT "OK"))
+			 )
+		
+		)
+	 )
  
 
  (defop |testGenericAddDb|
-   :invocation(!(Tester.testGenericAddDb))
-   :body (
-	  ;;doesn't work
-	  (!(= $fact (Softmotion.stop 3)))
-	  (=> ($fact))
-	  )
-   )
+	 :invocation(!(Tester.testGenericAddDb))
+	 :body (
+		;;doesn't work
+		(!(= $fact (Softmotion.stop 3)))
+		(=> ($fact))
+		)
+	 )
  (defop |testReturn|
-   :invocation(!(Tester.testReturn))
-   :body (
-	  (!(Controller.initAll))
-	  
-	  (!(= @id 3))
-	  (!(ArmActions.getFreeId @id))
-	  (!(PRINT @id))
-	  (!(ArmActions.getFreeId @id))
-	  (!(PRINT @id))
-	  (!(ArmActions.getFreeId @id))
-	  (!(PRINT @id))
-	  (!(ArmActions.getFreeId @id))
-	  (!(PRINT @id))
-	  (!(ArmActions.getFreeId @id))
-	  (!(PRINT @id))
-	  (!(ArmActions.getFreeId @id))
-	  (!(PRINT @id))
-	  )
-   )
+	 :invocation(!(Tester.testReturn))
+	 :body (
+		(!(Controller.initAll))
+		
+		(!(= @id 3))
+		(!(ArmActions.getFreeId @id))
+		(!(PRINT @id))
+		(!(ArmActions.getFreeId @id))
+		(!(PRINT @id))
+		(!(ArmActions.getFreeId @id))
+		(!(PRINT @id))
+		(!(ArmActions.getFreeId @id))
+		(!(PRINT @id))
+		(!(ArmActions.getFreeId @id))
+		(!(PRINT @id))
+		(!(ArmActions.getFreeId @id))
+		(!(PRINT @id))
+		)
+	 )
 
  (defop |testConsTail|
-   :invocation(!(Tester.testConsTail))
-   :body (
-	  (!(= @queue (. .)))
-	  (!(= @element (. a .)))
-	  
-	  (!(= @newQueue (CONS-TAIL (VAL @element) @queue)))
-	  (!(PRINT @newQueue))
-	  
-	  )
-   )
+	 :invocation(!(Tester.testConsTail))
+	 :body (
+		(!(= @queue (. .)))
+		(!(= @element (. a .)))
+		
+		(!(= @newQueue (CONS-TAIL (VAL @element) @queue)))
+		(!(PRINT @newQueue))
+		
+		)
+	 )
 
  (defop |testTablet|
-   :invocation(!(Tester.testTablet))
-   :body (
-	  (!(Controller.initAll))
-	  (=>(TabletConnector.shouldRun TRUE))
-	  (!(TabletConnector.getCommand))
-	  )
-   )
+	 :invocation(!(Tester.testTablet))
+	 :body (
+		(!(Controller.initAll))
+		(=>(TabletConnector.shouldRun TRUE))
+		(!(TabletConnector.getCommand))
+		)
+	 )
  (defop |testStringCat|
-   :invocation(!(Tester.testStringCat))
-   :body (
-	  (!(= @a "take" ))
-	  (!(= @b "object"))
-	  (!(= @c (TERM-STRING-CAT @a ".asd")))
-	  (!(PRINT @c))
-	  )
-   )
+	 :invocation(!(Tester.testStringCat))
+	 :body (
+		(!(= @a "take" ))
+		(!(= @b "object"))
+		(!(= @c (TERM-STRING-CAT @a ".asd")))
+		(!(PRINT @c))
+		)
+	 )
  (defop |testDatabaseMonitor|
-   :invocation (!(Tester.testDbMonitor))
-   :body (
+	 :invocation (!(Tester.testDbMonitor))
+	 :body (
 ;	  (!(DatabaseInterface.addMonitor (Prova a @var) (event) @result))
 ;	  (!(DatabaseInterface.add (Prova a b) @result))
 
 
-	  )
-   )
+		)
+	 )
  (defop |testMonitorSpheres|
-   :invocation (!(Tester.testMonitorSpheres))
-   :body (
-	  (!(Controller.initAll))
+	 :invocation (!(Tester.testMonitorSpheres))
+	 :body (
+		(!(Controller.initAll))
 
 (!(AgentActionMonitor.calculateInferencesForAgents (. HERAKLES_HUMAN1 .)))
 ;(=>(AgentActionMonitor.startMonitorSphereLoop))
@@ -462,25 +582,25 @@
 ;	  (^(ELAPSED-TIME (TIME) 1))
 ;	  (!(AgentActionMonitor.cleanAgentMonitorSpheres HERAKLES_HUMAN1))
 
-	  
-	  )
-   )
+		
+		)
+	 )
 
 (defop |testPlan|
-  :invocation(!(Tester.testPlan))
-  :body (
-         (!(Controller.initAll))
-         (!(AgentActionMonitor.cleanMonitorSpheres))
-         (!(AgentActionMonitor.calculateInferencesForAgents (. HERAKLES_HUMAN1 .)))
-         (!(AgentActionMonitor.startMonitoringAgent HERAKLES_HUMAN1 ))
-         (=>(PlanManager.goal HandleSurface (. ASSEMBLY_SURFACE_1 .)))
-     ;;(=>(PlanManager.goal TravelTo (. HERAKLES_HUMAN1 STOCK_TABLE .)))
-     ;(=>(PlanManager.goal HandleSurface (. ASSEMBLY_SURFACE_1 .)))
-                                         (=>(PlanManager.newGoal TRUE))
-
-                                         (=>(PlanManager.managePlans))
+	:invocation(!(Tester.testPlan))
+	:body (
+				 (!(Controller.initAll))
+				 (!(AgentActionMonitor.cleanMonitorSpheres))
+				 (!(AgentActionMonitor.calculateInferencesForAgents (. HERAKLES_HUMAN1 .)))
+				 (!(AgentActionMonitor.startMonitoringAgent HERAKLES_HUMAN1 ))
+				 (=>(PlanManager.goal HandleSurface (. ASSEMBLY_SURFACE_1 .)))
+		 ;;(=>(PlanManager.goal TravelTo (. HERAKLES_HUMAN1 STOCK_TABLE .)))
+		 ;(=>(PlanManager.goal HandleSurface (. ASSEMBLY_SURFACE_1 .)))
+																				 (=>(PlanManager.newGoal TRUE))
+
+																				 (=>(PlanManager.managePlans))
 	 )
-  )
+	)
  
  ;; (defop |testPlan| 
  ;;   :invocation(!(Tester.testPlan))
@@ -490,7 +610,7 @@
  ;; 	  (=>(PlanManager.goal provaGoal))
  ;; 	  (=>(PlannerInterface.report OK))
  ;; 	  (!(= @actionTake (. take (. GREY_TAPE NO_NAME NO_NAME 300 .) .)))
-	  
+		
  ;; 	  (!(= @action1 (. (VAL @actionTake) 1 (. .) .)))
  ;; 	  (!(= @actionThrow (. throw (. GREY_TAPE TABLE_4 PINK_TRASHBIN 300 .) .)))
  ;; 	  (!(= @action2 (. (VAL @actionThrow) 2 (. 1 .) .)))
@@ -502,92 +622,92 @@
  ;;   )
 
  (defop |testPlace|
-   :invocation(!(Tester.testPlace))
-   :body (
+	 :invocation(!(Tester.testPlace))
+	 :body (
 ;	  (!(Controller.initAll))
-	  (=>(ExecutionManager.execute place (. BRACKET_1 STOCK_TABLE .) 2))
-	  )
-   )
+		(=>(ExecutionManager.execute place (. BRACKET_1 STOCK_TABLE .) 2))
+		)
+	 )
 
  (defop |testPlaceAfterTake|
-   :invocation(!(Tester.testPlaceAfterTake))
-   :body (
-	  (=>(ExecutionManager.execute placeSandra LOTR_TAPE TABLE_4 PLACEMAT_RED 3))
-	  )
-   )
+	 :invocation(!(Tester.testPlaceAfterTake))
+	 :body (
+		(=>(ExecutionManager.execute placeSandra LOTR_TAPE TABLE_4 PLACEMAT_RED 3))
+		)
+	 )
 
  (defop |testArmActions|
-   :invocation(!(Tester.testArmActions))
-   :documentation "PLACE OBJECT HAS NOT BEEN TESTED "
-   :body (
-	  (!(ArmActions.init))
-	  (!(Controller.initAll))
-	  (=>(Robot.armInAir RIGHT TRUE))
+	 :invocation(!(Tester.testArmActions))
+	 :documentation "PLACE OBJECT HAS NOT BEEN TESTED "
+	 :body (
+		(!(ArmActions.init))
+		(!(Controller.initAll))
+		(=>(PR2_ROBOT.armInAir RIGHT TRUE))
 
 
 ;	  (!(PRINT "MovetoX"))
 ;	  (=>(ArmActions.action moveToX RIGHT 3.3 2.65 1.2 1))
 ;	  (^(ArmActions.report 1 @report))
 ;	  (~>(ArmActions.report 1 @report))
-	  (!(Tester.breakpoint))
-	  (!(PRINT "MoveToQ"))
-	  (=>(ArmActions.action moveToQ RIGHT NO_NAME NO_NAME 0 0 0 0 0 0 0 1))
-	  (^(ArmActions.report 1 @report))
-  	  (~>(ArmActions.report 1 @report))
-	  
-	  (!(PRINT "MoveToObject"))
-	  (=>(ArmActions.action moveToObject RIGHT GREY_TAPE 1))
-	  (^(ArmActions.report 1 @report))
-	  (~>(ArmActions.report 1 @report))
+		(!(Tester.breakpoint))
+		(!(PRINT "MoveToQ"))
+		(=>(ArmActions.action moveToQ RIGHT NO_NAME NO_NAME 0 0 0 0 0 0 0 1))
+		(^(ArmActions.report 1 @report))
+			(~>(ArmActions.report 1 @report))
+		
+		(!(PRINT "MoveToObject"))
+		(=>(ArmActions.action moveToObject RIGHT GREY_TAPE 1))
+		(^(ArmActions.report 1 @report))
+		(~>(ArmActions.report 1 @report))
 	
-	  (!(PRINT "EscapeObject"))
-	  (=>(ArmActions.action escapeObject RIGHT GREY_TAPE 1))
-	  (^(ArmActions.report 1 @report))
-	  (~>(ArmActions.report 1 @report))
+		(!(PRINT "EscapeObject"))
+		(=>(ArmActions.action escapeObject RIGHT GREY_TAPE 1))
+		(^(ArmActions.report 1 @report))
+		(~>(ArmActions.report 1 @report))
 
 	 ; (=>(ArmActions.action gotoPlaceObject RIGHT GREY_TAPE TABLE_4 NO_NAME 1))
-	  ;(^(ArmActions.report 1 @report))
+		;(^(ArmActions.report 1 @report))
 
-	  (!(PRINT "MoveToRest"))
-	  (=>(ArmActions.action moveToPose REST RIGHT 0 1))
-	  (^(ArmActions.report 1 @report))
-	  (~>(ArmActions.report 1 @report))
+		(!(PRINT "MoveToRest"))
+		(=>(ArmActions.action moveToPose REST RIGHT 0 1))
+		(^(ArmActions.report 1 @report))
+		(~>(ArmActions.report 1 @report))
 
-	  (!(PRINT "MoveToReady"))
-	  (=>(ArmActions.action moveToPose READY RIGHT 0 1))
-	  (^(ArmActions.report 1 @report))
-	  (~>(ArmActions.report 1 @report))	  
+		(!(PRINT "MoveToReady"))
+		(=>(ArmActions.action moveToPose READY RIGHT 0 1))
+		(^(ArmActions.report 1 @report))
+		(~>(ArmActions.report 1 @report))	  
 
 
-	  (!(PRINT "MoveToExtended"))
-	  (=>(ArmActions.action moveToPose EXTENDED RIGHT 0 1))
-	  (^(ArmActions.report 1 @report))
-	  (~>(ArmActions.report 1 @report))
-	  )
-   )
+		(!(PRINT "MoveToExtended"))
+		(=>(ArmActions.action moveToPose EXTENDED RIGHT 0 1))
+		(^(ArmActions.report 1 @report))
+		(~>(ArmActions.report 1 @report))
+		)
+	 )
 
 (defop |testGripperActions|
-  :invocation(!(Tester.testGripperActions))
-  :body (
+	:invocation(!(Tester.testGripperActions))
+	:body (
 
-	  (=>(ArmActions.action closeGripper RIGHT 1))
-	  (^(ArmActions.report 1 @report))
+		(=>(ArmActions.action closeGripper RIGHT 1))
+		(^(ArmActions.report 1 @report))
 
 
-	  (=>(ArmActions.action openGripper RIGHT 1))
-	  (^(ArmActions.report 1 @report))
+		(=>(ArmActions.action openGripper RIGHT 1))
+		(^(ArmActions.report 1 @report))
 
-	  (=>(ArmActions.action openGripperOnPressure RIGHT 1))
-	  (^(ArmActions.report 1 @report))
+		(=>(ArmActions.action openGripperOnPressure RIGHT 1))
+		(^(ArmActions.report 1 @report))
 
-	  (=>(ArmActions.action stopOpenGripperOnPressure RIGHT 1))
-	  (^(ArmActions.report 1 @report))
+		(=>(ArmActions.action stopOpenGripperOnPressure RIGHT 1))
+		(^(ArmActions.report 1 @report))
 	 )
-  )
+	)
 
 (defop |testHeadActions|
-  :invocation(!(Tester.testHeadActions))
-  :body (
+	:invocation(!(Tester.testHeadActions))
+	:body (
 	 (!(HeadActions.init))
 	 (!(Controller.initAll))
 	(!(PRINT "INIT FAITES !!!!!!!!!!!!!!!!!!!!!"))
@@ -619,217 +739,217 @@
 				(!(PRINT "FAILED"))
 		)
 	 )
-  )
+	)
  
  (defop |testString|
-   :invocation(!(Tester.testString))
-   :body (
-	  (!(= @a MonitorQueue.priorityQueue))
-	  (!(= @b (TERM-STRING-CAT @a "Sem")))
-	  (!(PRINT @b))
-	  (!(SEM-CREATE (VAL @b) 1 SEM-FIFO))
-	  (!(SEM-P (VAL @b)))
-	  (!(SEM-V (VAL @b)))
-	  )
-   )
+	 :invocation(!(Tester.testString))
+	 :body (
+		(!(= @a MonitorQueue.priorityQueue))
+		(!(= @b (TERM-STRING-CAT @a "Sem")))
+		(!(PRINT @b))
+		(!(SEM-CREATE (VAL @b) 1 SEM-FIFO))
+		(!(SEM-P (VAL @b)))
+		(!(SEM-V (VAL @b)))
+		)
+	 )
  (defop |testGenomInterface|
-   :invocation(!(Tester.testGenomInterface))
-   :body (
-	  (=>(Softmotion.request useGripper RRELEASE 1))
-	  (^(Softmotion.report 1 @report))
-	  (!(PRINT @report))
-	  )
-   )
+	 :invocation(!(Tester.testGenomInterface))
+	 :body (
+		(=>(Softmotion.request useGripper RRELEASE 1))
+		(^(Softmotion.report 1 @report))
+		(!(PRINT @report))
+		)
+	 )
  (defop |testObservations|
-   :invocation(!(Tester.testObservations))
-   :documentation
-   :body (
-	  (?(Spark.robotTorso @rTorso))
-	 (?(Spark.robotName @sparkRobotName))
+	 :invocation(!(Tester.testObservations))
+	 :documentation
+	 :body (
+		(?(Spark.PR2_ROBOTTorso @rTorso))
+	 (?(Spark.PR2_ROBOTName @sparkPR2_ROBOTName))
 
-	  
+		
 	 (?(Spark.freeId @sparkId))
-	 (=>(Spark.request getJointAbsPose (VAL @sparkRobotName) (VAL @rTorso) (VAL @sparkId)))
+	 (=>(Spark.request getJointAbsPose (VAL @sparkPR2_ROBOTName) (VAL @rTorso) (VAL @sparkId)))
 	 (!(ExecutionManager.handleReport Spark.report @sparkId @executionId))
-	 (?(Spark.result (VAL @sparkId) @robotTorsoX @robotTorsoY @robotTorsoZ @robotTorsoYaw @robotTorsoPitch @robotTorsoRoll))
-	 (~>(Spark.result (VAL @sparkId) (VAL @robotTorsoX) (VAL @robotTorsoY) (VAL @robotTorsoZ) (VAL @robotTorsoYaw) (VAL @robotTorsoPitch) (VAL @robotTorsoRoll)))
+	 (?(Spark.result (VAL @sparkId) @PR2_ROBOTTorsoX @PR2_ROBOTTorsoY @PR2_ROBOTTorsoZ @PR2_ROBOTTorsoYaw @PR2_ROBOTTorsoPitch @PR2_ROBOTTorsoRoll))
+	 (~>(Spark.result (VAL @sparkId) (VAL @PR2_ROBOTTorsoX) (VAL @PR2_ROBOTTorsoY) (VAL @PR2_ROBOTTorsoZ) (VAL @PR2_ROBOTTorsoYaw) (VAL @PR2_ROBOTTorsoPitch) (VAL @PR2_ROBOTTorsoRoll)))
 	 (=>(ExecutionManager.oldArmPosition unknown))
 	 (=>(ExecutionManager.oldDistance outOfRange))
 	 (=>(ExecutionManager.oldOrientation unknown))
 	 (!(= @i 0))
 	 (WHILE(?(~(EQUAL @i 10)))
 					;Set the starting state variables. We need to get the first row of observations to set the state variable inRange
-	       (!(ExecutionManager.getHumanObservations HERAKLES_HUMAN1 @robotTorsoX @robotTorsoY @robotTorsoZ 1 @armPosition @distance @orientation))
-	       (^(ELAPSED-TIME (TIME) 1))
-	       (!(= @i (+ @i 1)))
-	       )
+				 (!(ExecutionManager.getHumanObservations HERAKLES_HUMAN1 @PR2_ROBOTTorsoX @PR2_ROBOTTorsoY @PR2_ROBOTTorsoZ 1 @armPosition @distance @orientation))
+				 (^(ELAPSED-TIME (TIME) 1))
+				 (!(= @i (+ @i 1)))
+				 )
+	 )
 	 )
-   )
  (defop |testMonitorHead|
-   :invocation(!(Tester.testMonitorHead))
-   :body (
-	  (?(Spark.humanHead @head))
-	  (!(MonitorManager.init))
-	  (!(MonitorManager.monitorTarget HERAKLES_HUMAN1 @head (. (. (fact) .) (. .) .) (. (. .) (. .) .) 1 1)) 
-		    
-	  )
-   )
+	 :invocation(!(Tester.testMonitorHead))
+	 :body (
+		(?(Spark.humanHead @head))
+		(!(MonitorManager.init))
+		(!(MonitorManager.monitorTarget HERAKLES_HUMAN1 @head (. (. (fact) .) (. .) .) (. (. .) (. .) .) 1 1)) 
+				
+		)
+	 )
 
  (defop |testGive|
-   :invocation(!(Tester.testGive))
-   :documentation " "
-   :body (
-	  (!(Controller.initAll))
-	  (=>(Robot.hasObject RIGHT WALLE_TAPE))
-	  (=>(ExecutionManager.execute handover GIVE WALLE_TAPE HERAKLES_HUMAN1 1))
-
-	    
-	  )
-   )
+	 :invocation(!(Tester.testGive))
+	 :documentation " "
+	 :body (
+		(!(Controller.initAll))
+		(=>(PR2_ROBOT.hasObject RIGHT WALLE_TAPE))
+		(=>(ExecutionManager.execute handover GIVE WALLE_TAPE HERAKLES_HUMAN1 1))
+
+			
+		)
+	 )
 
  (defop |testGrab|
-   :invocation(!(Tester.testGrab))
-   :documentation " "
-   :body (
-	  (!(Controller.initAll))
-	  ;; (!(Spark.getFreeId @sparkId))
-	  ;; (=>(Spark.request placeObjectForSimu (VAL @object) 0 0 0 0 0 0 1 @sparkId)) 
-	  ;; (!(ExecutionManager.handleReport Spark.report @sparkId @executionId))
-
-	  (!(Spark.getFreeId @sparkId))
-	  (=>(Spark.request setObjectInHand HERAKLES_HUMAN1 LOTR_TAPE RIGHT TRUE (VAL @sparkId)))
-	  (!(ExecutionManager.handleReport Spark @sparkId @executionId TRUE NO_NAME))
-
-	  (=>(ExecutionManager.execute handover GRAB LOTR_TAPE HERAKLES_HUMAN1 1))
-
-	    
-	  )
-   )
+	 :invocation(!(Tester.testGrab))
+	 :documentation " "
+	 :body (
+		(!(Controller.initAll))
+		;; (!(Spark.getFreeId @sparkId))
+		;; (=>(Spark.request placeObjectForSimu (VAL @object) 0 0 0 0 0 0 1 @sparkId)) 
+		;; (!(ExecutionManager.handleReport Spark.report @sparkId @executionId))
+
+		(!(Spark.getFreeId @sparkId))
+		(=>(Spark.request setObjectInHand HERAKLES_HUMAN1 LOTR_TAPE RIGHT TRUE (VAL @sparkId)))
+		(!(ExecutionManager.handleReport Spark @sparkId @executionId TRUE NO_NAME))
+
+		(=>(ExecutionManager.execute handover GRAB LOTR_TAPE HERAKLES_HUMAN1 1))
+
+			
+		)
+	 )
  (defop |testFailed|
-   :invocation(!(Tester.testFailed))
-   :documentation " "
-   :body (
-	  (!(Tester.supportTestFailed))
-	  (^ (fact))
-	  )
-   )
+	 :invocation(!(Tester.testFailed))
+	 :documentation " "
+	 :body (
+		(!(Tester.supportTestFailed))
+		(^ (fact))
+		)
+	 )
 
  (defop |supportTestFailed|
-   :invocation(!(Tester.supportTestFailed))
-   :documentation " "
-   :body (
-	  (!(FAILED))
-	  )
-   )
+	 :invocation(!(Tester.supportTestFailed))
+	 :documentation " "
+	 :body (
+		(!(FAILED))
+		)
+	 )
  (defop |testGeneric|
-   :invocation (!(Tester.testGeneric))
-   :documentation " "
-   :body (
+	 :invocation (!(Tester.testGeneric))
+	 :documentation " "
+	 :body (
 	 ;works if fact with no || or && and wait or if with variable and not VAL. 
-	  ;weirder and weirder. If we have a composed term it works with VAL...
-	  (!(= @a (fact)))
-	  (IF(?(VAL @a))
-	     (!(PRINT "ok"))
-	     )
-	  ;(!(Tester.testGeneric2 FALSE))
-	  )
-   )
+		;weirder and weirder. If we have a composed term it works with VAL...
+		(!(= @a (fact)))
+		(IF(?(VAL @a))
+			 (!(PRINT "ok"))
+			 )
+		;(!(Tester.testGeneric2 FALSE))
+		)
+	 )
  (defop |testGeneric2|
-   :invocation (!(Tester.testGeneric2 @a))
-   :documentation ""
-   :body (
-	  (^ (|| (fact) (VAL @a )))
-	     (!(PRINT "ok"))
-	     
-	     )
-   )
+	 :invocation (!(Tester.testGeneric2 @a))
+	 :documentation ""
+	 :body (
+		(^ (|| (fact) (VAL @a )))
+			 (!(PRINT "ok"))
+			 
+			 )
+	 )
  (defop |testWhile|
-   :invocation(!(Tester.testWhile))
-   :body (
-	  (!(= @a 0))
-	  (WHILE(?(~(fact (VAL @a))))
+	 :invocation(!(Tester.testWhile))
+	 :body (
+		(!(= @a 0))
+		(WHILE(?(~(fact (VAL @a))))
 		(!(= @a (+ @a 1)))
 		)
-	  )
-   )
+		)
+	 )
 
  (defop |testTake|
-   :invocation (!(Tester.testTake))
-   :documentation ""
-   :body (
-	  (!(Controller.initAll))
+	 :invocation (!(Tester.testTake))
+	 :documentation ""
+	 :body (
+		(!(Controller.initAll))
 
-      (=>(ExecutionManager.execute take (. BRACKET_1 RIGHT .) 0 ))
+			(=>(ExecutionManager.execute take (. BRACKET_1 RIGHT .) 0 ))
 
-	  )
-   )
+		)
+	 )
 (defop |testTakeThrow|
-  :invocation(!(Tester.testTakeThrow))
-  :documentation " "
-  :body (
-	  (!(Controller.initAll))
-	  (?(Spark.freeId @sparkId))
-	  (=>(Spark.request setGraspedObject GREY_TAPE 0 0 (VAL @sparkId)))
-	  (!(ExecutionManager.handleReport Spark.report @sparkId @executionId))
-
-	  (?(Spark.freeId @sparkId))
-	  (=>(Spark.request setInferrenceForObject GREY_TAPE 0 PR2_ROBOT 0 SPARK_PRECISE_ROBOT_HAND 1.0 (VAL @sparkId)))  
-	  (!(ExecutionManager.handleReport Spark.report @sparkId @executionId))
-	  
-	  (=>(ExecutionManager.execute take GREY_TAPE RIGHT 1))
-	  
-	  (^(ExecutionManager.report (VAL @executionId) @report))
-	  
-	  (=>(ExecutionManager.throw GREY_TAPE PINK_TRASHBIN 2))
-	  )
-  )
+	:invocation(!(Tester.testTakeThrow))
+	:documentation " "
+	:body (
+		(!(Controller.initAll))
+		(?(Spark.freeId @sparkId))
+		(=>(Spark.request setGraspedObject GREY_TAPE 0 0 (VAL @sparkId)))
+		(!(ExecutionManager.handleReport Spark.report @sparkId @executionId))
+
+		(?(Spark.freeId @sparkId))
+		(=>(Spark.request setInferrenceForObject GREY_TAPE 0 PR2_PR2_ROBOT 0 SPARK_PRECISE_PR2_ROBOT_HAND 1.0 (VAL @sparkId)))  
+		(!(ExecutionManager.handleReport Spark.report @sparkId @executionId))
+		
+		(=>(ExecutionManager.execute take GREY_TAPE RIGHT 1))
+		
+		(^(ExecutionManager.report (VAL @executionId) @report))
+		
+		(=>(ExecutionManager.throw GREY_TAPE PINK_TRASHBIN 2))
+		)
+	)
 
 (defop |testThrow|
-  :invocation(!(Tester.testThrow))
-  :body (
+	:invocation(!(Tester.testThrow))
+	:body (
 	 (!(Controller.initAll))
 	 ;; (?(Spark.freeId @sparkId))
 	 ;; (=>(Spark.request placeObjectForSimu GREY_TAPE 0 0 0 0 0 0 1 (VAL @sparkId)))
 	 ;; (!(ExecutionManager.handleReport Spark.report @sparkId 1))
-	  
-	 ;;  (?(Spark.robotHand RIGHT @sparkHand))
+		
+	 ;;  (?(Spark.PR2_ROBOTHand RIGHT @sparkHand))
 	 ;;  (?(Spark.freeId @sparkId))
 	 ;;  (=>(Spark.request setGraspedObject GREY_TAPE 1 (VAL @sparkHand) (VAL @sparkId)))
 	 ;;  (!(ExecutionManager.handleReport Spark.report @sparkId 1))
-	  
+		
 	 ;;  (?(Spark.freeId @sparkId))
-	 ;;  (=>(Spark.request setInferrenceForObject GREY_TAPE 1 PR2_ROBOT (VAL @sparkHand) SPARK_PRECISE_ROBOT_HAND 1.0 (VAL @sparkId)))  
+	 ;;  (=>(Spark.request setInferrenceForObject GREY_TAPE 1 PR2_PR2_ROBOT (VAL @sparkHand) SPARK_PRECISE_PR2_ROBOT_HAND 1.0 (VAL @sparkId)))  
 	 ;;  (!(ExecutionManager.handleReport Spark.report @sparkId 1))
 
-	  (=>(Robot.hasObject RIGHT LOTR_TAPE))
+		(=>(PR2_ROBOT.hasObject RIGHT LOTR_TAPE))
 
-	 ;; (=>(Robot.armPosition RIGHT TABLE_4))
+	 ;; (=>(PR2_ROBOT.armPosition RIGHT TABLE_4))
 	 
 	 (=>(ExecutionManager.execute throw LOTR_TAPE PINK_TRASHBIN 1))
 	 )
-  )
+	)
 
  (defop |testLispList|
-   :invocation (!(Tester.testLispList))
-   :documentation " "
-   :body (
-	  (!(= @a (. a b .)))
-	  (!(= @c (CAR @a)))
-	  (!(PRINT @c))
-	  (!(= @b (LAST @a)))
-	  (!(PRINT @b))
-	  )
-   )
+	 :invocation (!(Tester.testLispList))
+	 :documentation " "
+	 :body (
+		(!(= @a (. a b .)))
+		(!(= @c (CAR @a)))
+		(!(PRINT @c))
+		(!(= @b (LAST @a)))
+		(!(PRINT @b))
+		)
+	 )
 
  (defop |testUnification|
-   :invocation (!(Tester.testUnification))
-   :documentation ""
-   :body (
+	 :invocation (!(Tester.testUnification))
+	 :documentation ""
+	 :body (
 ;	  (!(= @var (action a parameters b) ))
-	  ;; (!(= @var2 (. a b c d .)))	
-	  ;; (!(== (VAL @var2) (. @primo @secondo @terzo @quarto .)))
-	  ;; (!(PRINT @primo))
-	  ;; (!(PRINT @terzo))
+		;; (!(= @var2 (. a b c d .)))	
+		;; (!(== (VAL @var2) (. @primo @secondo @terzo @quarto .)))
+		;; (!(PRINT @primo))
+		;; (!(PRINT @terzo))
 ;; 	  (! (== (VAL @var) (action @actionName parameters @parameters)))
 ;; 	     (! (== @action (ACTION-NAME @action-name) (ACTOR @action-actor) (START-TIME @start-time) (END-TIME @end-time) (PARAMETERS @actionParameters)))
 ;; ;	  (IF(! (== $ACTION (ACTION (ACTION-ID $ACTION-ID) (ACTION-NAME $ACTION-NAME) (ACTOR $ACTOR) (START-TIME $START-TIME) (END-TIME $END-TIME) (PARAMETERS $ActionParams))))
@@ -839,9 +959,9 @@
 ;; 	  (!(PRINT @parameters))
 
 
-	  (!(= @x 3))
-	  (!(= @y 3))
-	  (!(= @z 3))
+		(!(= @x 3))
+		(!(= @y 3))
+		(!(= @z 3))
 
 	 (!(= @ax (- @x 0.2)))
 	 (!(= @ay (+ @y 0.2)))
@@ -853,143 +973,143 @@
 	 (!(= @dy (- @y 0.2)))
 
 	 (!(= @list (. @ax @by @z @cx @cy @z @dx @dy @z .)))
-	  )
-   )
+		)
+	 )
 
  (defop |breakpoint|
-   :invocation (!(Tester.breakpoint))
-   :documentation "hack to implement breakpoints. The system waits for 5 seconds when it reaches one so you have the time to press halt =) "
-   :body (
-	  (!(PRINT "breakpoint reached"))
-	  (^(ELAPSED-TIME(TIME) 5))
-	  )
-   )
+	 :invocation (!(Tester.breakpoint))
+	 :documentation "hack to implement breakpoints. The system waits for 5 seconds when it reaches one so you have the time to press halt =) "
+	 :body (
+		(!(PRINT "breakpoint reached"))
+		(^(ELAPSED-TIME(TIME) 5))
+		)
+	 )
  (defop |testQueue|
-   :invocation (!(Tester.testQueue))
-   :documentation "test the standard operations of the queue"
-   :body (
-	  (!(Queue.init Tester.queue))
-	  (!(Queue.push fact Tester.queue))
-	  (!(Queue.push otherFact Tester.queue))
-	  (!(Queue.head @head Tester.queue))
-	  (!(PRINT @head))
-	  (!(Queue.pop Tester.queue))
-	  (!(Queue.head @head Tester.queue))
-	  (!(PRINT @head))
-	  )
-   )
+	 :invocation (!(Tester.testQueue))
+	 :documentation "test the standard operations of the queue"
+	 :body (
+		(!(Queue.init Tester.queue))
+		(!(Queue.push fact Tester.queue))
+		(!(Queue.push otherFact Tester.queue))
+		(!(Queue.head @head Tester.queue))
+		(!(PRINT @head))
+		(!(Queue.pop Tester.queue))
+		(!(Queue.head @head Tester.queue))
+		(!(PRINT @head))
+		)
+	 )
 
 (defop |testPickPlace|
-  :invocation (!(Tester.testPickPlace))
-  :body (
+	:invocation (!(Tester.testPickPlace))
+	:body (
 	 (!(Controller.initAll))
 	 (?(Spark.freeId @sparkId))
 	 (=>(Spark.request setGraspedObject BLUE_CUBE2 0 0 (VAL @sparkId)))
 ;	 (!(ExecutionManager.handleReport Spark.report @sparkId @executionId))
 
 	 (?(Spark.freeId @sparkId))
-	 (=>(Spark.request setInferrenceForObject BLUE_CUBE2 0 PR2_ROBOT 0 SPARK_PRECISE_ROBOT_HAND 1.0 (VAL @sparkId)))  
+	 (=>(Spark.request setInferrenceForObject BLUE_CUBE2 0 PR2_PR2_ROBOT 0 SPARK_PRECISE_PR2_ROBOT_HAND 1.0 (VAL @sparkId)))  
 ;	 (!(ExecutionManager.handleReport Spark.report @sparkId @executionId))
 	 
 	 (=>(ExecutionManager.execute take BLUE_CUBE2 RIGHT 10))
 	 (^(ExecutionManager.report 10 @report))
 	 (IF(?(EQUAL @report OK))
-	 	(=>(ExecutionManager.execute place BLUE_CUBE2 TABLE_4 PLACEMAT_GREEN 20))
+		(=>(ExecutionManager.execute place BLUE_CUBE2 TABLE_4 PLACEMAT_GREEN 20))
 		)
 	 )
-  )
+	)
 
  (defop |testPriorityQueue|
-   :invocation(!(Tester.testPriorityQueue))
-   :documentation "thest the standard operations of the priority queue"
-   :body (
-	  (!(PriorityQueue.init Tester.priorityQueue))
-	  (!(PriorityQueue.push (. fact 3 .) Tester.priorityQueue))   ;inserimento coda vuota
-	  (?(Tester.priorityQueue @queue))
-	  (!(PRINT @queue))
-	  (!(PriorityQueue.push (. secondFact 6 .) Tester.priorityQueue))  ;inserimento in coda
-	  (?(Tester.priorityQueue @queue))
- 	  (!(PRINT @queue))
-	  (!(PriorityQueue.push (. thirdFact 1 .) Tester.priorityQueue))  ;inserimento in testa
-	  (?(Tester.priorityQueue @queue))
-	  (!(PRINT @queue))
+	 :invocation(!(Tester.testPriorityQueue))
+	 :documentation "thest the standard operations of the priority queue"
+	 :body (
+		(!(PriorityQueue.init Tester.priorityQueue))
+		(!(PriorityQueue.push (. fact 3 .) Tester.priorityQueue))   ;inserimento coda vuota
+		(?(Tester.priorityQueue @queue))
+		(!(PRINT @queue))
+		(!(PriorityQueue.push (. secondFact 6 .) Tester.priorityQueue))  ;inserimento in coda
+		(?(Tester.priorityQueue @queue))
+		(!(PRINT @queue))
+		(!(PriorityQueue.push (. thirdFact 1 .) Tester.priorityQueue))  ;inserimento in testa
+		(?(Tester.priorityQueue @queue))
+		(!(PRINT @queue))
 	 ; (!(= @queue (. (. thirdFact 1 .) (. fact 3 .) (. secondFact 5 .) .)))
 	 ; (=> (Tester.priorityQueue @queue))
-	  (!(PriorityQueue.push (. fourthFact 4 .) Tester.priorityQueue)) ;inserimento secondo posto
-	  (?(Tester.priorityQueue @queue))
-	  (!(PRINT @queue))
-	  (!(PriorityQueue.pop Tester.priorityQueue ))
-	  (!(PriorityQueue.pop Tester.priorityQueue))
-	  (!(PriorityQueue.head Tester.priorityQueue @head))
-	  (!(PRINT @head))
+		(!(PriorityQueue.push (. fourthFact 4 .) Tester.priorityQueue)) ;inserimento secondo posto
+		(?(Tester.priorityQueue @queue))
+		(!(PRINT @queue))
+		(!(PriorityQueue.pop Tester.priorityQueue ))
+		(!(PriorityQueue.pop Tester.priorityQueue))
+		(!(PriorityQueue.head Tester.priorityQueue @head))
+		(!(PRINT @head))
+	 )
 	 )
-   )
 
  (defop |testLists|
-   :invocation(!(Tester.testLists))
-   :documentation
-   :body (
-	  (!(= @lista (. factc facte facta .)))
-	  (!(= @listb (. factf factb factz .)))
-	  (!(= @uniona (LIST-UNION @lista @listb)))
-	  (!(= @unionb (LIST-UNION @listb @lista)))
-	  (!(PRINT @uniona))
-	  (!(PRINT @unionb))
-	  )
-   )
+	 :invocation(!(Tester.testLists))
+	 :documentation
+	 :body (
+		(!(= @lista (. factc facte facta .)))
+		(!(= @listb (. factf factb factz .)))
+		(!(= @uniona (LIST-UNION @lista @listb)))
+		(!(= @unionb (LIST-UNION @listb @lista)))
+		(!(PRINT @uniona))
+		(!(PRINT @unionb))
+		)
+	 )
 
  (defop |testMonitorManager|
-   :invocation (!(Tester.testMonitorManager))
-   :documentation
-   :body (
-	  (!(Controller.initAll))
-	  (!(= @sparkRobotName PR2_ROBOT))
-	  (!(= @executionId 1))
-	  (!(= @object GREY_TAPE))
-	  
-	  (!(= @monitorSuccessConditions (. (. (ExecutionManager.report 1 OK) .) (. .) .)))
-	  (!(= @monitorFailureConditions  (. (.(ExecutionManager.report 1 FAILURE) .) (. .) .)))
-	  (!(= @monitorSuccessConditions2 (. (. (ExecutionManager.report 2 OK) .) (. .) .)))
+	 :invocation (!(Tester.testMonitorManager))
+	 :documentation
+	 :body (
+		(!(Controller.initAll))
+		(!(= @sparkPR2_ROBOTName PR2_PR2_ROBOT))
+		(!(= @executionId 1))
+		(!(= @object GREY_TAPE))
+		
+		(!(= @monitorSuccessConditions (. (. (ExecutionManager.report 1 OK) .) (. .) .)))
+		(!(= @monitorFailureConditions  (. (.(ExecutionManager.report 1 FAILURE) .) (. .) .)))
+		(!(= @monitorSuccessConditions2 (. (. (ExecutionManager.report 2 OK) .) (. .) .)))
 					
 					;start the monitoring
-      (!(MonitorManager.monitorTarget WALLE_TAPE "NO_NAME" (VAL @monitorSuccessConditions) (VAL @monitorFailureConditions) MEDIUM 1))
+			(!(MonitorManager.monitorTarget WALLE_TAPE "NO_NAME" (VAL @monitorSuccessConditions) (VAL @monitorFailureConditions) MEDIUM 1))
 
-	  (!(MonitorManager.monitorTarget TABLE_4 "NO_NAME" (VAL @monitorSuccessConditions2) (VAL @monitorFailureConditions) HIGH 2))
-	  
+		(!(MonitorManager.monitorTarget TABLE_4 "NO_NAME" (VAL @monitorSuccessConditions2) (VAL @monitorFailureConditions) HIGH 2))
+		
 
-	  )
-   )
+		)
+	 )
 
  (defop |testCondition|
-   :invocation (!(Tester.testCondition))
-   :documentation
-   :body (
-	  (!(= @fact (fact a)))
-	  (!(= @factb (fact b)))
-	  (!(= @conditions (. @fact @factb .)))
-	  (!(= @failed FALSE))
-	  (=> (fact a))
-	  (=> (fact b))
-
-	  )
-   )
+	 :invocation (!(Tester.testCondition))
+	 :documentation
+	 :body (
+		(!(= @fact (fact a)))
+		(!(= @factb (fact b)))
+		(!(= @conditions (. @fact @factb .)))
+		(!(= @failed FALSE))
+		(=> (fact a))
+		(=> (fact b))
+
+		)
+	 )
 
  (defop |TestFindList|
-   :invocation(!(Tester.testFindList))
-   :documentation " "
-   :body (
-
-	  (!(DatabaseInterface.findList (fact @f) (. @f .) @result))
-	  (IF(?(~(NULL @result)))
-
-	     (WHILE(?(~(NULL @result)))
-		   (!(= @fact (CAR(CAR @result))))
-		   (!(PRINT @fact))
-		   (!(= @result (CDR @result)))
-		   )
-	     )
-
-	  )
-   )
+	 :invocation(!(Tester.testFindList))
+	 :documentation " "
+	 :body (
+
+		(!(DatabaseInterface.findList (fact @f) (. @f .) @result))
+		(IF(?(~(NULL @result)))
+
+			 (WHILE(?(~(NULL @result)))
+			 (!(= @fact (CAR(CAR @result))))
+			 (!(PRINT @fact))
+			 (!(= @result (CDR @result)))
+			 )
+			 )
+
+		)
+	 )
  
 )
diff --git a/supervisor/configuration/#Pr2.db# b/supervisor/configuration/#Pr2.db#
deleted file mode 100644
index 4d1522d..0000000
--- a/supervisor/configuration/#Pr2.db#
+++ /dev/null
@@ -1,19 +0,0 @@
-(
-(Robot.name PR2_ROBOT)
-(Module.isActive mhp TRUE)
-(Module.isActive softmotion TRUE)
-(Module.isActive gtp TRUE)
-(Module.isActive viman TRUE)
-(Module.isActive spark TRUE)
-(Module.isActive acapela FALSE)
-(Module.isActive navigation TRUE)
-(Module.isActive waypoints FALSE)
-(Module.isActive pathPlanner FALSE)
-
-(Robot.joints HEAD)
-(Robot.joints BASE)
-(Robot.joints LEFT_ARM)
-(Robot.joints RIGHT_ARM)
-
-
-)
diff --git a/supervisor/domains/GregIcsrActions.db b/supervisor/domains/GregIcsrActions.db
index fb06b6c..7da7913 100644
--- a/supervisor/domains/GregIcsrActions.db
+++ b/supervisor/domains/GregIcsrActions.db
@@ -8,15 +8,71 @@
 
  (Actions.nParameters applyOperation 2)
  (Actions.nParameters placeOnStack 3)
+ (Actions.nParameters applyOperation 2)
+ (Actions.nParameters buildStack 0)
+ (Actions.nParameters handle 3)
+ (Actions.nParameters applyFirstOperations 2)
+ (Actions.nParameters applySecondOperations 2)
+ (Actions.nParameters applyOperationMethod 2)
+
 
  (PlannerInterface.action hatp Pick take)
  (PlannerInterface.action hatp Place place)
  (PlannerInterface.action hatp PlaceOnStack placeOnStack)
  (PlannerInterface.action hatp Apply applyOperation)
+ (PlannerInterface.action hatp BuildStack buildStack)
+ (PlannerInterface.action hatp Handle handle)
+ (PlannerInterface.action hatp ApplyFirstOperations applyFirstOperations)
+ (PlannerInterface.action hatp ApplySecondOperations applySecondOperations)
+ (PlannerInterface.action hatp ApplyOperation applyOperationMethod)
+
  (PlannerInterface.parameterLinks hatp Pick (. 0 1 .))
  (PlannerInterface.parameterLinks hatp Place (. 0 1 2 .))
  (PlannerInterface.parameterLinks hatp PlaceOnStack (. 0 1 2 .))
- (PlannerInterface.parameterLinks hatp Apply (. 0 1  .))
+ (PlannerInterface.parameterLinks hatp Apply (. 0 1 .))
+ (PlannerInterface.parameterLinks hatp BuildStack (. 0 .))
+ (PlannerInterface.parameterLinks hatp Handle (. 0 1 2 .))
+ (PlannerInterface.parameterLinks hatp ApplyFirstOperations (. 0 1 .))
+ (PlannerInterface.parameterLinks hatp ApplySecondOperations (. 0 1 .))
+ (PlannerInterface.parameterLinks hatp ApplyOperation (. 0 1 2 .))
+ 
+
+ (Actions.monitorInformation pick (. (SUBJECT TYPE ID 0 PREDICATE hasInHand VALUE TYPE ID 1) .) 60 )
+ (Actions.monitorInformation place (. (SUBJECT TYPE ID 1 PREDICATE isOn VALUE TYPE ID 2) .) 60)
+ (Actions.monitorInformation placeOnStack (. (SUBJECT TYPE ID 1 PREDICATE isOn VALUE TYPE SYMBOL StackArea) .) 60)
+ (Actions.monitorInformation applyOperation (. (SUBJECT TYPE ID 1 PREDICATE isDone VALUE TYPE SYMBOL true) .) 60)
+ (Actions.monitorInformation buildStack (. (SUBJECT TYPE SYMBOL Green_Cube  PREDICATE isOn VALUE TYPE SYMBOL StackArea ) 
+ 	                                       (SUBJECT TYPE SYMBOL Red_Cube  PREDICATE isOn  VALUE TYPE SYMBOL StackArea) 
+ 	                                       (SUBJECT TYPE SYMBOL Blue_Cube PREDICATE isOn  VALUE TYPE SYMBOL STACK_AREA) .) )
+ (Actions.monitorInformation handle (. (SUBJECT TYPE ID 1 PREDICATE isOnStack VALUE TYPE SYMBOL TRUE)
+ 									    .) 60)
+ (Actions.monitorInformation applyOperationMethod (. (SUBJECT TYPE ID 1 PREDICATE isDone VALUE TYPE SYMBOL true) .) 60)
+
+
+ (Actions.monitorInformationParameters applyFirstOperations (. 1 .))
+ (Actions.monitorInformationParameters applySecondOperations (. 1 .))
+ (Actions.monitorInformation applyFirstOperations  (. Green_Cube .) (. (SUBJECT TYPE SYMBOL Smoothen PREDICATE isDone VALUE TYPE SYMBOL true) .) 60)
+ (Actions.monitorInformation applyFirstOperations (. Red_Cube .)(.(SUBJECT TYPE SYMBOL Polish PREDICATE isDone VALUE TYPE SYMBOL true) .) 60)
+ (Actions.monitorInformation applyFirstOperations (. Blue_Cube .)(. (SUBJECT TYPE SYMBOL Clean PREDICATE isDone VALUE TYPE SYMBOL true) .) 60)
+ (Actions.monitorInformation applySecondOperations (. Red_Cube .)(. (SUBJECT TYPE
+  SYMBOL Glue_Red PREDICATE isDone VALUE TYPE SYMBOL true) .) 60)
+ (Actions.monitorInformation applySecondOperations (. Green_Cube .)(. (SUBJECT TYPE SYMBOL Glue_Green PREDICATE isDone VALUE TYPE SYMBOL true) .) 60)
+
+
+ (Actions.knowledgeParametersType take (. TYPE .))
+ (Actions.knowledgeParametersType place (. TYPE TYPE .))
+ (Actions.knowledgeParametersType placeOnStack (. CLASS CLASS .))
+ (Actions.knowledgeParametersType apply (. VALUE .))
+ (Actions.knowledgeParametersType buildStack (. .))
+ (Actions.knowledgeParametersType handle (. VALUE TYPE .))
+ (Actions.knowledgeParametersType applyFirstOperations (. VALUE .))
+ (Actions.knowledgeParametersType applySecondOperations (. VALUE .))
+ (Actions.knowledgeParametersType applyOperationMethod (. VALUE CLASS  .))
+
+
+
+
+
 
 (Acapela.translation take "take")
 (Acapela.translation place "place")
diff --git a/supervisor/domains/GregIcsrActions.opf b/supervisor/domains/GregIcsrActions.opf
index 83cca78..c9b726c 100644
--- a/supervisor/domains/GregIcsrActions.opf
+++ b/supervisor/domains/GregIcsrActions.opf
@@ -202,4 +202,7 @@
              )
           )
    )
+
+
+
  )
diff --git a/supervisor/domains/SaphariIcsrActions.db b/supervisor/domains/SaphariIcsrActions.db
index 5224a22..f94c3ef 100644
--- a/supervisor/domains/SaphariIcsrActions.db
+++ b/supervisor/domains/SaphariIcsrActions.db
@@ -16,15 +16,15 @@
 
 
  (PlannerInterface.action hatp TravelTo go)
-(PlannerInterface.action hatp Handover handover)
+ (PlannerInterface.action hatp Handover handover)
  (PlannerInterface.action hatp Pick take)
  (PlannerInterface.action hatp Place place)
-  (PlannerInterface.action hatp Clean clean)
-  (PlannerInterface.action hatp Glue glue)
-    (PlannerInterface.action hatp AttachBracket attachBracket)
-    (PlannerInterface.action hatp StartPointing pointTo)
-(PlannerInterface.action hatp StopPointing undefined)
-(PlannerInterface.action hatp CarryTo go)
+ (PlannerInterface.action hatp Clean clean)
+ (PlannerInterface.action hatp Glue glue)
+ (PlannerInterface.action hatp AttachBracket attachBracket)
+ (PlannerInterface.action hatp StartPointing pointTo)
+ (PlannerInterface.action hatp StopPointing undefined)
+ (PlannerInterface.action hatp CarryTo go)
 
 
 (PlannerInterface.parameterLinks hatp Pick (. 0 1 .))
diff --git a/supervisor/mainPr2.inc b/supervisor/mainPr2.inc
index 6d42e41..63a18b0 100644
--- a/supervisor/mainPr2.inc
+++ b/supervisor/mainPr2.inc
@@ -83,11 +83,14 @@ load opf "supervisor/robot/ReportManager.opf"
 include "supervisor/domains/Actions.sym"
 
 load opf "supervisor/domains/Actions.opf"
-load opf "supervisor/domains/SaphariIcsrActions.opf"
+;load opf "supervisor/domains/SaphariIcsrActions.opf"
+load opf "supervisor/domains/GregIcsrActions.opf"
 
 load db "supervisor/domains/Actions.db"
-load db "supervisor/domains/SaphariIcsrObjects.db"
-load db "supervisor/domains/SaphariIcsrActions.db"
+;load db "supervisor/domains/SaphariIcsrObjects.db"
+;load db "supervisor/domains/SaphariIcsrActions.db"
+load db "supervisor/domains/GregIcsrObjects.db"
+load db "supervisor/domains/GregIcsrActions.db"
 
 load db "supervisor/utilities/POMDP.db"
 
@@ -101,4 +104,5 @@ load opf "supervisor/utilities/Queue.opf"
 load opf "supervisor/utilities/Timer.opf"
 load opf "supervisor/utilities/POMDP.opf"
 
-
+load opf "supervisor/robot/Verbalization.opf"
+load db "supervisor/robot/Verbalization.db"
\ No newline at end of file
diff --git a/supervisor/modules/.#Acapela.db b/supervisor/modules/.#Acapela.db
deleted file mode 120000
index 920dd17..0000000
--- a/supervisor/modules/.#Acapela.db
+++ /dev/null
@@ -1 +0,0 @@
-mfiore@adagio.6452:1432106843
\ No newline at end of file
diff --git a/supervisor/robot/#PlanManager.opf# b/supervisor/robot/#PlanManager.opf#
deleted file mode 100644
index af284ea..0000000
--- a/supervisor/robot/#PlanManager.opf#
+++ /dev/null
@@ -1,757 +0,0 @@
-;; -*-Lisp-*-
-;;author: Michelangelo Fiore
-;;this files contains procedures to manage plans in the supervision 
-
-(
-
-
-
- (defop |addGoal|
-   :invocation(!(PlanManager.addGoal @goal @parameters))
-   :body (
-          (=>(PlanManager.goal @goal @parameters))
-          (=>(PlanManager.newGoal TRUE))
-
-          )
-
-   )
- (defop |managePlans|
-   :invocation(PlanManager.managePlans)
-   :documentation "this is the main procedure of the Plan Manager. It's constantly running, receiving goals from the higher level, asking the planner for plans, breaking them into actions and sending those to the appropriate modules for execution"
-   :body (
-	  (=>(PlanManager.isRunning TRUE))
-
-	  ;;get constants for op
-	  (?(PlanManager.maxPlanningTime @maxPlanningTime))  
-	  (?(PlanManager.maxPlanningFailures @maxPlanningFailures))
-	  (!(= @maxPlanningFailures 3))
-	  (?(PlanManager.timeToRetry @timeToRetry))
-	  (?(Robot.name @robotName))
-
-      (WHILE(?(PlanManager.shouldRun TRUE))
-		;;wait for a new goal or for a stop
-            (^(|| (PlanManager.newGoal TRUE) (PlanManager.shouldRun FALSE) (AgentActionMonitor.unexpectedAction @agent)))
-            (IF(?(PlanManager.shouldRun FALSE))
-               (!(FAILED))
-
-               ELSEIF(?(PlanManager.newGoal TRUE))
-               (=>(PlanManager.newGoal FALSE)) ;we are treating the goal so it's no longer new
-               (?(PlanManager.goal @goal @parameters))
-
-               ELSEIF(?(AgentActionMonitor.unexpectedAction @agent))
-               (~>(AgentActionMonitor.unexpectedAction @agente))
-               (PlanManager.chooseGoal @goal @parameters)
-               )
-
-            (!(PlanManager.tellGoal @goal @parameters))
-            (!(= @planningFailures 0))
-            (!(= @status notStarted))
-                                        ;we loop until the plan is completed or we have reached the maximum number of failures
-
-		   (WHILE(?(& 
-			    (~(EQUAL @status completed)) 
-			    (< @planningFailures @maxPlanningFailures)
-			    ))
-
-                 (IF(?(PlanManager.planningModality @agent ROBOT))  ;if robot plans he warns the user that it is planning
-                    (IF(?(EQUAL @planningFailures 0))
-			       (!(Acapela.say "Let me think of a plan..."))
-			       ELSE
-			       (!(Acapela.say "Let me think of another plan.."))
-			       )
-                    (^(ELAPSED-TIME (TIME) 1))
-                    )
-
-
-                 (=>(PlannerInterface.getPlan (VAL @goal) (VAL @parameters)))   ;;we ask for a plan
-                 (^(PlannerInterface.report @report))
-                 (~>(PlannerInterface.report (VAL @report)))
-
-                 (IF(?(EQUAL @report ACHIEVED))
-                    (!(= @status completed))
-			    
-                    ELSEIF(?(EQUAL @report NOPLAN))
-                    (!(= @planningFailures (+ @planningFailures 1)))
-
-                    ELSEIF(?(EQUAL @report OK))
-                    (^(PlannerInterface.result @plan))
-                    (~>(PlannerInterface.result (VAL @plan)))
-			    
-                    (IF(?(&(PlanManager.planningModality ROBOT) (PlanManager.shouldTellPlan TRUE)))  ;if the robot is leader for an agent it will verbalize the plan
-                       (!(PlanManager.tellPlan @plan))
-                       (!(Acapela.say "Let's start!"))
-                       )
-
-                    (IF(?(PlanManager.humanActionManagement TASK))
-                       (!(PlanManager.analyzeTree @planTree))
-                       (=>(PlanManager.monitorPlan))
-                       )
-
-                    (WHILE(?(~(NULL @plan)))
-                                        ;get agent
-                          (!(= @anAgent (CAR @plan)))
-                          (!(= @plan (CDR @plan)))
-                          (!(== (VAL @anAgent) (. @agentName @agentType @agentActions  .)))
-                          (!(ReportManager.sub PlanManager.agentReport  @agentName))
-                          (=>(PlanManager.isSub PlanManager.agentReport @agentName))
-
-
-                          (IF(?(EQUAL @agentType HUMAN))
-                             (IF(?(PlanManager.humanActionManagement LEAF))
-                                (=>(PlanManager.manageHumanActions (VAL @agentName) (VAL @agentActions) ))
-                                )
-                             (=>(PlanManager.isManagingHuman (VAL @agentName)))
-                             ELSEIF(?(EQUAL @agentType ROBOT))
-                             (IF(?(EQUAL @agentName @robotName))
-                                (IF(?(PlanManager.selfActionManagement SEED))
-                                   (=>(PlanManager.manageRobotActionsSeed (VAL @agentActions)))
-                                   ELSE
-                                   (=>(PlanManager.manageRobotActions (VAL @agentActions)))33333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333330222222222222222222222222222222222222222222222222222222222
-
-                                   ..........................................................++
-
-                                   +
-                                   +++++++999999999988
-                                   )
-                          )
-	    
-			    
-                ;;we wait for the report of an agent, for something unexpected to happen or for a stop request.
-
-                    (^(|| (PlanManager.agentReport @agent @report)  (PlanManager.stop) (AgentActionMonitor.unexpectedAction @agent)))
-			    
-                    (IF(?(AgentActionMonitor.unexpectedAction @agent))
-                       (!(PlanManager.chooseGoal @goal @parameters))
-
-                       (IF(?(PlanManager.planningModality (VAL @agent) ROBOT))   ;if robot was planning we switch to adapt and inform the user
-                          (!(Acapela.say "Do you want to do it in a different way? Let's see if I can help..."))
-                          (=>(PlanManager.planningModality (VAL @agent) ADAPTS))
-                          )
-
-                       (WHILE(?(PlanManager.isManagingAgent @anAgent))
-                             (=>(PlanManager.stopAgent (VAL @anAgent)))
-                             (^(PlanManager.agentReport (VAL @anAgent) @report))
-                             )
-                       ELSEIF(?(PlanManager.stop))
-                       (WHILE(?(PlanManager.isManagingAgent @anAgent))
-                             (=>(PlanManager.stopAgent (VAL @anAgent)))
-                             (^(PlanManager.agentReport (VAL @anAgent) @report))
-                             )
-                       (!(= @planningFailures @maxPlanningFailures))
-
-                       ELSEIF(?(PlanManager.agentReport @anAgent "FAILURE"))  ;if one of the agents fail we stop the other agent and replan
-                       (WHILE(?(PlanManager.isManagingAgent @otherAgent))
-                             (=>(PlanManager.stopAgent (VAL @otherAgent)))
-                             (^(PlanManager.agentReport (VAL @otherAgent) @report))
-                             )
-                       (!(= @planningFailures (+ @planningFailures 1)))
-
-                       ELSEIF(?(PlanManager.agentReport @anAgent "OK"))   ;if one of the agents completes we wait for the other agent positive report
-                       (WHILE(?(PlanManager.isManagingAgent @otherAgent))
-                             (^(|| (PlanManager.agentReport (VAL @otherAgent) @report) (PlanManager.stop) (AgentActionMonitor.unexpectedAction @agent)))
-
-                             (IF(?(PlanManager.agentReport (VAL @otherAgent) "FAILURE"))
-                                (!(= @planningFailures (+ @planningFailures 1)))
-
-                                ELSEIF(?(PlanManager.stop))
-                                (IF(?(PlanManager.isManagingAgent (VAL @otherAgent)))
-                                   (=>(PlanManager.stopAgent @otherAgent))
-                                   (^(PlanManager.agentReport (VAL @otherAgent) @report))
-                                   )
-                                (!(= @planningFailures @maxPlanningFailures))
-
-                                ELSEIF(?(AgentActionMonitor.unexpectedAction @agent))
-                                (!(PRINT "Unexpected Action. Replanning"))
-                                (!(PlanManager.chooseGoal @goal @parameters))
-                                (IF(?(PlanManager.isManagingAgent (VAL @otherAgent)))
-                                   (=>(PlanManager.stopAgent @otherAgent))
-                                   (^(PlanManager.agentReport (VAL @otherAgent) @report))
-                                   )
-                                )
-                             )
-                       )
-                    (!(= @status completed))
-                    (WHILE(?(PlanManager.agentReport @agent @report))
-                          (~>(PlanManager.agentReport (VAL @agent) (VAL @report)))
-                          (IF(?(~(EQUAL @report "OK")))
-                             (!(= @status notCompleted))
-                             )
-				    
-                          )
-                    (IF(?(EQUAL @status notCompleted))
-                       (^(ELAPSED-TIME (TIME) @timeToRetry))
-                       )
-                    (!(PlanManager.clean))
-                    )
-                 )
-           (IF(?(EQUAL @status completed))
-              (=>(PlanManager.report "OK"))
-              (!(Acapela.say "Task completed"))
-
-              ELSE
-              (!(Acapela.say "Abandoning Task"))
-              (=>(PlanManager.report FAILED))
-              )
-           )
-
-      (~>(PlanManager.isRunning TRUE))
-      )
-   )
-
- (defop |clean|
-   :invocation (!(PlanManager.clean))
-   :documentation "used to clean facts at the end of a plan"
-   :body (
-
-          (WHILE(?(PlanManager.actionReport @action @report))
-                (~>(PlanManager.actionReport (VAL @action) (VAL @report)))
-                )
-
-          (WHILE(?(PlanManager.isSub PlanManager.agentReport @agent))
-                (!(ReportManager.unsub PlanManager.agentReport (VAL @agent)))
-                (~>(PlanManager.isSub PlanManager.agentReport (VAL @agent)))
-                )
-          (WHILE(?(PlanManager.actionReport @link @report))
-                (~>(PlanManager.actionReport (VAL @link) (VAL @report)))
-                )
-          (WHILE(?(PlanManager.stopAgent @agent))
-                (~>(PlanManager.stopAgent (VAL @agent)))
-                )
-          (WHILE(?(AgentActionMonitor.unexpectedAction @agent))
-                (~>(AgentActionMonitor.unexpectedAction @agent))
-                )
-
-          (~>(PlanManager.stop))
-
-          )
-
-   )
-
-
-
- (defop |manageRobotactionsSeed|
-   :invocation(PlanManager.manageRobotActionsSeed @actions)
-   :body (
-          (?(PlanManager.seedBridge @seedName))
-          (!(SEND-MESSAGE @seedName @actions))
-
-          (!(= @seedReport (TERM-STRING-CAT @seedName ".report")))
-          (!(= @seedReport (MAKE-ATOM @seedReport)))
-
-          (?(Robot.name @robotName))
-
-          (!(= @done FALSE))
-          (WHILE(?(EQUAL @done FALSE))
-                (=>(PlanManager.isManagingAgent robot))
-
-                (!(SEND-MESSAGE @seedName (Seed.getAction)))
-                (^(@seedReport @seedAction @seedActionParameters @actionId @done))
-                                        ;execute action
-                (!(ExecutionManager.getFreeId @executionId))
-                (!(ReportManager.sub ExecutionManager.report @executionId))
-
-                (=>(ExecutionManager.execute @seedAction @seedActionParameters @executionId))
-                (^(|| (ExecutionManager.report (VAL @executionId) @report) (PlanManager.stopAgent robot)))
-
-                (IF(?(ExecutionManager.report (VAL @executionId) @report))
-                   (!(ReportManager.unsub ExecutionManager.report @executionId))
-                   (IF(?(~(EQUAL @report "OK")))
-                      (=>(PlanManager.agentReport robot "FAILURE"))
-                      (~>(PlanManager.isManagingAgent robot))
-                      (!(FAILED))
-                      )
-
-                   (IF(?(~(EQUAL @actionId -1)))
-                      (=>( PlanManager.actionReport @actionId "OK"))
-                      )
-
-                   ELSE
-                   (=>(ExecutionManager.stop @executionId))
-                   (^(ExecutionManager.report (VAL @executionId) @report))
-                   (!(ReportManager.unsub ExecutionManager.report @executionId))
-                   (=>(PlanManager.agentReport robot "STOPPED"))
-                   (~>(PlanManager.isManagingAgent robot))
-                   (!(FAILED))
-                   )
-                )
-          )
-   (!(ReportManager.publish PlanManager.agentReport robot "OK"))
-
-
-   (~>(PlanManager.isManagingAgent robot))
-   )
-
- ;; (defop |analyzeTree|
-   ;;   :invocation(!(PlanManager.analyzePlanTree @tree))
-   ;;   :body (
-
-   ;;          )
-   ;;   )
-
-  ;;  (defop |monitorPlan|
-  ;;     :invocation (!(PlanManager.monitorPlan @agent @taskList))
-  ;;     :body (
-  ;;            (WHILE(?(&(~(NULL @taskList )) (PlanMonitor.stop (VAL @agent))))
-  ;;                  (!(= @task (CAR @taskList)))
-  ;;                  (!(= @taskList (CDR @taskList)))
-  ;;                  (!(== (VAL @taskList) (. @actionName @actionId @actionParameters .)))
-  ;;                  (=>(Actions.waitForPostconditions @actionName @actionParameters @actionId))
-  ;;                  (^(&(Actions.actionReport (VAL @actionId) @report) (PlanMonitor.stop (VAL @agent))))
-  ;;                  (IF(?(Actions.actionReport (VAL @actionId) (VAL @report)))
-  ;;                     (~>(Actions.actionReport (VAL @actionId) (VAL @report)))
-  ;;                     (IF(?(EQUAL @report "OK"))
-  ;;                        (=>(PlanManager.actionReport (VAL @actionId) "OK"))
-
-  ;;                        ELSE
-  ;;                        (=>(PlanManager.actionReport (VAL @actionId) "FAILURE"))
-  ;;                        )
-  ;;                     )
-  ;;                  )
-  ;;            (IF(?(PlanMonitor.stop (VAL @agent)))
-  ;;               (~>(PlanMonitor.stop (VAL @agent)))
-  ;;               (=>(PlanManager.agentReport (VAL @agentName) "STOPPED"))
-
-  ;;               ELSE
-  ;;               (=>(PlanManager.agentReport (VAL @agentName) "OK"))
-  ;;               )
-  ;;            (~>(PlanManager.isManagingAgent (VAL @agent)))
-  ;;            )
-  ;;     )
-
-  (defop |manageHumanActions|
-    :invocation (PlanManager.manageHumanActions @agent @actions)
-    :documentation "Procedure to handle the human actions into a plan. When the agent has an empty action list it just reports an okay. "
-    :body (
-           (!(= @oldObject NULL)) ;;this is just used for the getactionstring procedure, which gives different strings when we are doing more than one action with the same object.
-
-           (IF(?(~(NULL @actions)))
-              (=>(PlanManager.isManagingAgent @agent))
-              (!(= @tempActions (VAL @actions)))
-              ;;loop until every action has been executed or we receive a stop command
-              (WHILE(?(&
-                       (~(NULL @actions))
-                       (~(PlanManager.agentReport (VAL @agent) @report))
-                       ))
-                     (!(= @action (CAR @actions)))
-                    (!(= @actions (CDR @actions)))
-                    (!(== (VAL @action) (. @actionToExecute @actionId @actionLinks .)))
-
-                    ;;wait until the linked action is completed or there is a problem
-                    (WHILE(?(~(NULL @actionLinks)))
-                          (!(= @currentLink (CAR @actionLinks)))
-                          (!(= @actionLinks (CDR @actionLinks)))
-                          (^(|| (PlanManager.actionReport (VAL @currentLink) @report) (PlanManager.stopAgent (VAL @agent))))
-
-                          (IF(?(PlanManager.stopAgent (VAL @agent))) ;;problem: we received a stop
-                             (~>(PlanManager.stopAgent (VAL @agent)))
-                             (!(AgentActionMonitor.cancelActions (VAL @agent)))
-                             (=>(PlanManager.agentReport @agent "STOPPED"))
-                             (~>(PlanManager.isManagingAgent (VAL @agent)))
-                             (!(FAILED))
-                             )
-                          (IF(?(~(EQUAL @report "OK")))  ;problem: the linked action failed
-                             (=>(PlanManager.agentReport (VAL @agent) "FAILURE"))
-                             (~>(PlanManager.isManagingAgent (VAL @agent)))
-
-                             (!(FAILED))
-                             )
-                          )
-                    (!(== (VAL @actionToExecute) (. @actionName @actionParameters .)))
-
-                    (!(PlanManager.getActionString @actionName @actionParameters 0 @oldObject @followsHandover @actionString))
-                    (IF(?(PlanManager.planningModality (VAL @agents) ROBOT))  ;if robot plans then he tells the human he should execute the action
-                       (!(Acapela.say @actionString))
-                       )
-                    (!(PRINT "HUMAN: "))
-                    (!(PRINT @actionString))
-                    (!(PRINT @actionId))
-
-                    ;;movement actions and other actions are handled differently for now. Should change when we switch to TOASTER completely
-                    (IF(?(Action.type (VAL @actionName) MOVEMENT))
-                       (!(= @location (CAR(CDR @actionParameters))))
-                       (=>(AgentActionMonitor.monitorMove @agent @location @actionId))
-
-                       ELSE
-                       ;;necessary to understand which sphere is linked with the action
-                       (?(Actions.monitorParameter (VAL @actionName) @n))
-                       (!(= @i 0))
-                       (!(= @tempActionParameters (VAL @actionParameters)))
-                       (WHILE(?(~(> (VAL @i) (VAL @n))))
-                             (!(= @target (CAR @tempActionParameters)))
-                             (!(= @tempActionParameters (CDR @tempActionParameters)))
-                             (!(= @i (+ (VAL @i) 1)))
-                             )
-
-                       ;;get the corresponding sphereId (this should exist since inferences are calculated independently from this module)
-                       (!(AgentActionMonitor.getSphereId (VAL @agent) (VAL @target) (VAL @actionName) @sphereId))
-
-                       ;;monitor the action
-                       (=>(AgentActionMonitor.monitorAction @agent @actionId @actionName @actionParameters @sphereId))
-                       )
-                    (^(|| (AgentActionMonitor.actionCompleted (VAL @agent) (VAL @actionId))
-                       (PlanManager.stopAgent (VAL @agent))))  ;wait until we complete the action or we have a stopAgent (unexpectedAction is handled in planmanager)
-
-                    (IF(?(AgentActionMonitor.actionCompleted (VAL @agent) (VAL @actionId)))
-                       (~>(AgentActionMonitor.actionCompleted (VAL @agent) (VAL @actionId)))
-                       (=>(PlanManager.actionReport @actionId "OK"))
-		      
-                       ELSEIF(?(PlanManager.stopAgent (VAL @agent)))
-                       (~>(PlanManager.stopAgent (VAL @agent)))
-                       (=>(PlanManager.agentReport @agent "STOPPED"))
-                       (~>(PlanManager.isManagingAgent (VAL @agent)))
-
-                       (!(FAILED))
-		      )
-		   
-		   )
-              (=>(PlanManager.agentReport @agent "OK"))
-              (~>(PlanManager.isManagingAgent (VAL @agent)))
-              )
-           )
-    )
- (defop |manageRobotActions|
-   :invocation(PlanManager.manageRobotActions @actions)
-   :documentation "Manages the execution of the robot actions"
-   :body (
-          (!(= @oldObject NULL))
-          (?(Robot.name @robotName))
-
-          (WHILE(?(~ (NULL @actions)) )
-                (=>(PlanManager.isManagingAgent robot))
-            (!(= @currentAction (CAR @actions)))
-            (!(= @actions (CDR @actions)))
-		
-            (!(== (VAL @currentAction) (. @actionToExecute @actionId @actionLinks .)))
-            ;;wait for previous linked actions to be completed or to fail
-
-
-            (WHILE(?(~(NULL @actionLinks)))
-                  (!(= @currentLink (CAR @actionLinks)))
-                  (IF(?(~(PlanManager.actionReport (VAL @currentLink) @report)))
-                     (!(PRINT "Robot waits for action"))
-                     (!(PRINT @currentLink))
-                     )
-                  (^(|| (PlanManager.actionReport (VAL @currentLink) @report)
-                     (PlanManager.stopAgent robot)))
-
-                  (IF(?(PlanManager.stopAgent robot))
-                     (=>(PlanManager.agentReport robot "STOPPED"))
-                     (~>(PlanManager.isManagingAgent robot))
-                     (!(FAILED))
-                     )
-                  (IF(?(~(PlanManager.actionReport (VAL @currentLink) "OK")))
-                     (=>(PlanManager.agentReport robot "FAILURE"))
-                     (~>(PlanManager.isManagingAgent robot))
-                     (!(FAILED))
-                     )
-                  (!(= @actionLinks (CDR @actionLinks)))
-                  )
-            (!(== (VAL @actionToExecute) (. @actionName @actionParameters .)))
-
-            (IF(?(EQUAL @actionName undefined))
-               (=>(PlanManager.actionReport (VAL @actionId) "OK"))
-
-               ELSE
-                                        ;verbalize action
-               (!(PlanManager.getActionString @actionName @actionParameters 0 @oldObject @followsHandover @actionString))
-               (!(Acapela.say @actionString))
-               (!(PRINT "ROBOT: "))
-               (!(PRINT @actionString))
-                                        ;execute action
-               (!(ExecutionManager.getFreeId @executionId))
-               (!(ReportManager.sub ExecutionManager.report @executionId))
-
-
-
-               (!(= @actionParameters (CDR @actionParameters))) ;cut the agent parameter
-
-               (=>(ExecutionManager.execute @actionName @actionParameters @executionId))
-               (^(|| (ExecutionManager.report (VAL @executionId) @report) (PlanManager.stopAgent robot)))
-               (IF(?(ExecutionManager.report (VAL @executionId) @report))
-                  (!(ReportManager.unsub ExecutionManager.report @executionId))
-                  (IF(?(||(~(EQUAL @report "OK")) (EQUAL @toReplan TRUE)))
-                     (=>(PlanManager.agentReport robot "FAILURE"))
-                     (~>(PlanManager.isManagingAgent robot))
-                     (!(FAILED))
-                     )
-
-                  (=>( PlanManager.actionReport @actionId "OK"))
-
-
-                  ELSE
-                  (=>(ExecutionManager.stop @executionId))
-                  (^(ExecutionManager.report (VAL @executionId) @report))
-                  (!(ReportManager.unsub ExecutionManager.report @executionId))
-                  (=>(PlanManager.agentReport robot "STOPPED"))
-                  (~>(PlanManager.isManagingAgent robot))
-                  (!(FAILED))
-                  )
-               )
-            )
-          (!(ReportManager.publish PlanManager.agentReport robot "OK"))
-
-
-          (~>(PlanManager.isManagingAgent robot))
-          )
-   
-   )
-
- (defop |manageOtherRobotActions|
-   :invocation(PlanManager.manageOtherRobotActions @robot @actions)
-   :documentation "manages actions for other robot agents"
-   :body (
-          (?(Connector.robot (VAL @robot) @robotKernel))
-          (?(Connector.robot SELF @selfKernel))
-          (IF(?(~(NULL @actions)))
-             (=>(PlanManager.isManagingAgent @robot))
-             (WHILE(?(~ (NULL @actions)) )
-                   (!(= @currentAction (CAR @actions)))
-                   (!(= @actions (CDR @actions)))
-
-                   (!(== (VAL @currentAction) (. @actionToExecute @actionId @actionLinks .)))
-                   ;;wait for previous linked actions to be completed or to fail
-		  
-		  (WHILE(?(~(NULL @actionLinks))) 
-			(!(= @currentLink (CAR @actionLinks)))
-			(^(|| (PlanManager.actionReport (VAL @currentLink) @report)
-			   (PlanManager.stopAgent robot)))
-
-			(IF(?(PlanManager.stopAgent (VAL @robot)))
-               (=>(PlanManager.agentReport (VAL @robot) "STOPPED"))
-			   (~>(PlanManager.isManagingAgent (VAL @robot)))
-			   (!(FAILED))
-			   )
-            (IF(?(~(PlanManager.actionReport (VAL @currentLink) "OK")))
-               (=>(PlanManager.agentReport (VAL @robot) "FAILURE"))
-			   (~>(PlanManager.isManagingAgent (VAL @robot)))
-			   (!(FAILED))
-			   )
-			(!(= @actionLinks (CDR @actionLinks)))
-			)
-		  (!(== (VAL @actionToExecute) (. @actionName @actionParameters .)))
-
-		  (IF(?(PlanManager.planningModality (VAL @robot) ROBOT))
-		     (!(SEND-MESSAGE @robotKernel @selfKernel (Connector.command order @currentAction)))
-		     )
-		  (^(|| (PlanManager.actionReport (VAL @actionId) @report) (PlanManager.stopAgent (VAL robot))))
-		  (IF(?(PlanManager.stopAgent (VAL @robot)))
-		     (~>(PlanManager.stopAgent (VAL @robot)))
-             (=>(PlanManager.agentReport (VAL @robot) "STOPPED"))
-		     (~>(PlanManager.isManagingAgent (VAL @robot)))
-		     (!(FAILED))
-             ELSEIF(?(~(EQUAL @report "OK")))
-		     (=>(PlanManager.agentReport (VAL @robot) FAILED))
-		     (~>(PlanManager.isManagingAgent (VAL @robot)))
-		     (!(FAILED))
-		     )
-		  
-		  )
-	    )
-     (=>(PlanManager.agentReport (VAL @robot) "OK"))
-	 (~>(PlanManager.isManagingAgent (VAL @robot)))
-	 )
-  )
-  
- 
-  
-
-(defop |tellGoal|
-  :invocation(!(PlanManager.tellGoal @goal @parameters))
-  :documentation "Returns a text string containing a suitable verbalization for a goal"
-  :body (
-	 (IF(?(EQUAL @goal Clean))
-	    (IF(?(PlanManager.takeInitiative TRUE))
-	       (!(Acapela.say "We will clean the table together."))
-	       (^(ELAPSED-TIME (TIME) 1))
-	      
-	       ELSE
-	       (!(Acapela.say "I think you want to clean the table. Let's see if I can help..."))
-	       (^(ELAPSED-TIME (TIME) 1))
-	       )
-	    )
-	 
-	 )
-  )
-(defop |getActionString|
-  :invocation(!(PlanManager.getActionString @actionName @actionParameters @nAction $oldObject $followsHandover $string))
-  :documentation "Returns a text string containing a suitable verbalization for an action
-                  @actionName name of the action to verbalize
-                  @actionParameters parameters of the action
-                  @subject -I - or -You -
-                  @nAction 1 or 2. Number of actions verbalized in a row. The second one doesn't have the subject.
-                  $oldobject object of the last action. If it's the same as the current object the robot will say -it- and not objectName. Modified with the current object at the end of the op
-                  $followsHandover TRUE if last action was an handover. Modified to TRUE if this action was an handover and to FALSE otherwise
-                  $string  output message string"
-  :body (
-         (!(= @message ""))
-
-
-         (IF(?(Actions.nParameters (VAL @actionName) 2))
-            (!(== (VAL @actionParameters) (. @agent @object .)))
-
-            ELSE
-            (!(== (VAL @actionParameters) (. @agent @object @otherObject .)))
-            )
-
-         (IF(?(EQUAL @object $oldObject))
-            (!(= @translatedObject "it "))
-            ELSE
-            (?(Acapela.translation (VAL @object) @translatedObject))
-            (!(= @translatedObject (TERM-STRING-CAT "the " @translatedObject " ")))
-            )
-         (!(= $oldObject @object))
-
-         (?(Acapela.translation (VAL @agent) @translatedAgent))
-         (?(Acapela.translation (VAL @actionName) @translatedAction))
-
-         (IF(?(Action.nParameters (VAL @actionName) 2))
-            (!(= @message (TERM-STRING-CAT @translatedAgent " " @translatedAction " " @translatedObject)))
-
-            ELSEIF(?(Action.nParameters (VAL @actionName) 3))
-            (?(Robot.name @robotName))
-            (IF(?(EQUAL @robotName @otherObject))
-               (!(= @translatedOtherObject "me"))
-
-               ELSE
-               (?(Acapela.translation (VAL @otherObject) @translatedOtherObject))
-               )
-            (!(= @message (TERM-STRING-CAT @translatedAgent " " @translatedAction " " @translatedObject)))
-
-            )
-         (!(= $string @message))
-
-	 )
-  )
-
-
- (defop |tellPlan|
-   :invocation(!(PlanManager.tellPlan @plan))
-   :documentation "Verbalizes a plan using acapela"
-   :body (
-	  (!(= @robotActions (. .)))
-	  (!(= @humansActions (. .)))
-	  (WHILE(?(~(NULL @plan))) 
-					;get agent
-		(!(= @anAgent (CAR @plan)))
-		(!(= @plan (CDR @plan)))
-		(!(== (VAL @anAgent) (. @agentName @agentType @agentActions  .)))
-		(IF(?(EQUAL @agentType HUMAN))
-		   (!(= @humanActions @agentActions))
-		   
-		   ELSEIF(?(EQUAL @agentType ROBOT))
-		   (!(= @robotActions @agentActions))
-		   )
-		)
-	  
-
-
-
-	  
-	  (!(Acapela.say "Okay... this is the plan"))
-	  (!(= @first TRUE))
-	  ;; the idea here is looping on the actions of robot and human, calling each time the op tellPossibleActions. This op tells all actions that don't have pre-requisite actions not completed. So the robot will
-	  ;; say "i do this and this, then you do that" and so on.
-	  (WHILE(?(|| (~(NULL @robotActions)) (~(NULL @humanActions))))
-
-		(!(PlanManager.tellPossibleActions PR2_ROBOT @robotActions @first))
-		(!(PlanManager.tellPossibleActions human @humanActions @first))
-		
-		)	  
-	  (^(ELAPSED-TIME (TIME) 1))
-	  )
-   )
-
-(defop |tellPossibleActions|
-  :invocation(!(PlanManager.tellPossibleActions @agentName $agentActions $first))
-  :documentation "Verabalizes all possible sequential actions (before the agent needs to wait for another agent's action
-                  @agentName PR2_ROBOT or anyother. If it's PR2_ROBOT the robot will say -i do this- if not -you do this-
-                  $agentActions the list of actions. This will be modified here
-                  $first . TRUE if this is the first action to be verbalized. Will be placed false automatically by this methoid. The first action will be told in a  different way from the others."
-  :body (
-
-	 (!(= @hasUndefined FALSE))      ;;this is needed because we don't verbalize undefined actions.
-	 (!(= @followsHandover FALSE))   ;;the problem is that handover is a joint action but it's considered as a "robot action" and so the treatmant of it and of following actions is a little different.
-	 (!(= @n 0))                    ;;this is a count on the number of actions told. If we have only one undefined action we will not verbalize the plan.
-
-	 (IF(?(~(NULL $agentActions)))
-	    (!(= @actionsTold FALSE))               ;;when this goes true we will go out of the method
-	    (IF(?(EQUAL @agentName PR2_ROBOT))      
-	       (!(= @subject "I "))   
-	       (!(= @subject2 "you "))             ;;used for joint actions (i give you)
-	       ELSE
-	       (!(= @subject "you "))
-	       (!(= @subject2 "me "))
-	       )
-	    (IF(?(EQUAL $first TRUE))
-	       (!(Acapela.getSentence startSentence @message))
-	       ELSE
-	       (!(Acapela.getSentence continueSentence @message))
-	       )
-
-	    (!(= @nAction 0))  ;;this will range from 0 to 2. The robot will say actions in groups of 2 (I do this and this. Then I do this and that.) 0 is used just for the first action. After that nAction is set to 1 and the robot will say "and i do this" . At this point the value will become 2 and the robot will start a new sentece, returning to 1 after saying the first action in this new sentence.
-	    
-	    (!(= @oldObject NULL)) ;;if two following actions have the same object the robot will say "it" instead of the objectName
-	    (WHILE(?(&(EQUAL @actionsTold FALSE) (~(NULL $agentActions))))
-		  (!(= @currentAgentAction (CAR $agentActions)))
-		  (!(== (VAL @currentAgentAction) (. @agentAction @actionId @agentLinks .)))
-		  (!(== (VAL @agentAction) (. @actionName @actionParameters .)))
-		
-		  ;;check that every link has been verified.
-		  (WHILE(?(& (~(NULL @agentLinks)) (EQUAL @actionsTold FALSE)))
-			(!(= @currentLink (CAR @agentLinks)))
-			(!(= @agentLinks (CDR @agentLinks)))
-			(IF(?(~(PlanManager.actionTold (VAL @currentLink))))
-			   (!(= @actionsTold TRUE))   ;;if a link hasn't been verified we stop
-			   )		      
-			)
-		  (IF(?(EQUAL @actionsTold FALSE))
-		     (!(= $agentActions (CDR $agentActions)))
-
-		     (IF(?(EQUAL @actionName undefined))	
-			(=>(PlanManager.actionTold @actionId))
-			(!(= @hasUndefined TRUE))	
-		     
-			ELSE
-			(!(= @n (+ @n 1)))
-			(IF(?(EQUAL @nAction 0))
-			   (!(= @nAction 1))
-
-			   ELSE
-			   (IF(?(EQUAL @nAction 1))  ;we concatenate to the previous action
-			      (!(= @message (TERM-STRING-CAT @message "and ")))
-			      (!(= @nAction 2))
-			      
-			      ELSEIF(?(EQUAL @nAction 2))  ;we start a new sentence, which will be different from the first sentence of the agent. For example it could be "Moving on, i will do this".
-			      (!(Acapela.getSentence continueSentence @continueSentence))
-			      (!(= @message (TERM-STRING-CAT @message ". " @continueSentence)))
-			      (!(= @nAction 1))
-			      )
-			   )
-			(!(PlanManager.getActionString @actionName @actionParameters @subject @nAction @oldObject @followsHandover @actionString))  ;gets a verbalization for the action
-			(!(= @message (TERM-STRING-CAT @message @actionString)))  
-			(=>(PlanManager.actionTold @actionId))
-			)
-		     )
-		  )
-	    (IF(?(> @n 0))  ;;we verbalize the plan only if we have treated more than one actions or if we treated one action and that action is not 'undefined'. 
-	       (!(Acapela.say @message))	       
-	       (!(= $first FALSE))
-	       )
-	    (!(PRINT @message))
-	    
-	    )
-
-
-
-
-
-
-
-
-
-
-
-     )
-  
-  )
-)
diff --git a/supervisor/robot/.#PlanManager.opf b/supervisor/robot/.#PlanManager.opf
deleted file mode 120000
index df5e14f..0000000
--- a/supervisor/robot/.#PlanManager.opf
+++ /dev/null
@@ -1 +0,0 @@
-mfiore@adagio.6760:1432623184
\ No newline at end of file
diff --git a/supervisor/robot/AgentActionMonitor.opf b/supervisor/robot/AgentActionMonitor.opf
index 21a3c5b..4fb2112 100644
--- a/supervisor/robot/AgentActionMonitor.opf
+++ b/supervisor/robot/AgentActionMonitor.opf
@@ -84,7 +84,7 @@
           (!(SEM-P AgentActionMonitor.sem))
           (!(= @sphereId 0))
           ;;we take a random object and agent to set the parameters for the update sphere monitor procedure
-          (?(Object.type @object @type @class))
+          (?(Object.type @object @type PICKABLE))
           (?(Object.type @agent HUMAN AGENT))
           (WHILE(?(< @sphereId 10))   ;from 0 to 10 (indexes of the monitor spheres in spark)
                 (!(Spark.getFreeId @sparkId))
@@ -101,6 +101,7 @@
                 (!(= @sphereId (+ @sphereId 1)))
                 )
           (!(SEM-V AgentActionMonitor.sem))
+          
           )
 
    )
diff --git a/supervisor/robot/DatabaseInterface.opf b/supervisor/robot/DatabaseInterface.opf
index 429947f..4cde266 100644
--- a/supervisor/robot/DatabaseInterface.opf
+++ b/supervisor/robot/DatabaseInterface.opf
@@ -122,13 +122,13 @@ $unboundVariables= lisp-list containing the variables for which we want to find
    )
 )
  (defop |addMonitor|
-   :invocation (!(DatabaseInterface.addMonitor $factToMonitor $event $result))
+   :invocation (!(DatabaseInterface.addMonitor $factsToMonitor $event $result))
    :documentation "this procedure sets up a monitor for a given fact. When this fact is first added to the Database it returns $eventName to the current kernel. $fact and $event are both composed terms"
    :body (
 	  (!(SEM-P DatabaseInterface.sem))
 	  (? (ONTO_NAME $ONTO_NAME))
 	  (? (SUP_NAME $SUP_NAME))
-	  (!(SEND-MESSAGE $ONTO_NAME (Database.addMonitor (VAL $factToMonitor) (VAL $event) $SUP_NAME)))
+	  (!(SEND-MESSAGE $ONTO_NAME (Database.addMonitor (VAL $factsToMonitor) (VAL $event) $SUP_NAME)))
 	  (!(DatabaseInterface.getResult $result))
 	  (!(SEM-V DatabaseInterface.sem))
 	  
diff --git a/supervisor/robot/PlanManager.opf b/supervisor/robot/PlanManager.opf
index b237978..f906df0 100644
--- a/supervisor/robot/PlanManager.opf
+++ b/supervisor/robot/PlanManager.opf
@@ -9,17 +9,17 @@
  (defop |addGoal|
    :invocation(!(PlanManager.addGoal @goal @parameters))
    :body (
-          (=>(PlanManager.goal @goal @parameters))
-          (=>(PlanManager.newGoal TRUE))
+    (=>(PlanManager.goal @goal @parameters))
+    (=>(PlanManager.newGoal TRUE))
 
-          )
+    )
 
    )
  (defop |managePlans|
    :invocation(PlanManager.managePlans)
    :documentation "this is the main procedure of the Plan Manager. It's constantly running, receiving goals from the higher level, asking the planner for plans, breaking them into actions and sending those to the appropriate modules for execution"
    :body (
-          (=>(PlanManager.isRunning TRUE))
+    (=>(PlanManager.isRunning TRUE))
 
           ;;get constants for op
           (?(PlanManager.maxPlanningTime @maxPlanningTime))
@@ -28,13 +28,14 @@
           (?(PlanManager.timeToRetry @timeToRetry))
           (?(Robot.name @robotName))
 
+          (!(Verbalization.greet))
           (WHILE(?(PlanManager.shouldRun TRUE))
                 ;;wait for a new goal or for a stop
                 (^(|| (PlanManager.newGoal TRUE) (PlanManager.shouldRun FALSE) (AgentActionMonitor.unexpectedAction @agent)))
                 (IF(?(PlanManager.shouldRun FALSE))
-                   (!(FAILED))
+                 (!(FAILED))
 
-                   ELSEIF(?(PlanManager.newGoal TRUE))
+                 ELSEIF(?(PlanManager.newGoal TRUE))
                    (=>(PlanManager.newGoal FALSE)) ;we are treating the goal so it's no longer new
                    (?(PlanManager.goal @goal @parameters))
 
@@ -43,73 +44,81 @@
                    (PlanManager.chooseGoal @goal @parameters)
                    )
 
-                (!(PlanManager.tellGoal @goal @parameters))
+                ; (!(PlanManager.tellGoal @goal @parameters))
                 (!(= @planningFailures 0))
                 (!(= @status notStarted))
                                         ;we loop until the plan is completed or we have reached the maximum number of failures
 
-                (WHILE(?(&
-                         (~(EQUAL @status completed))
-                         (< @planningFailures @maxPlanningFailures)
-                         ))
+                                        (WHILE(?(&
+                                         (~(EQUAL @status completed))
+                                         (< @planningFailures @maxPlanningFailures)
+                                         ))
 
                       (IF(?(PlanManager.planningModality @agent ROBOT))  ;if robot plans he warns the user that it is planning
-                         (IF(?(EQUAL @planningFailures 0))
-                            (!(Acapela.say "Let me think of a plan..."))
+                       (IF(?(EQUAL @planningFailures 0))
+                            ; (!(Acapela.say "Let me think of a plan..."))
+                            (!(Verbalization.initPlan))
+
                             ELSE
-                            (!(Acapela.say "Let me think of another plan.."))
+                            ; (!(Acapela.say "Let me think of another plan.."))
+                            (!(Verbalization.verbalizeReplan))
+                            
                             )
-                         (^(ELAPSED-TIME (TIME) 1))
-                         )
+                       (^(ELAPSED-TIME (TIME) 1))
+                       )
 
 
+                      (IF(?(EQUAL @planningFailures 0))
+                        )
                       (=>(PlannerInterface.getPlan (VAL @goal) (VAL @parameters)))   ;;we ask for a plan
                       (^(PlannerInterface.report @report))
                       (~>(PlannerInterface.report (VAL @report)))
 
                       (IF(?(EQUAL @report ACHIEVED))
-                         (!(= @status completed))
+                       (!(= @status completed))
 
-                         ELSEIF(?(EQUAL @report NOPLAN))
-                         (!(= @planningFailures (+ @planningFailures 1)))
+                       ELSEIF(?(EQUAL @report NOPLAN))
+                       (!(= @planningFailures (+ @planningFailures 1)))
 
-                         ELSEIF(?(EQUAL @report OK))
-                         (^(PlannerInterface.result @plan))
-                         (~>(PlannerInterface.result (VAL @plan)))
+                       ELSEIF(?(EQUAL @report OK))
+                       (^(PlannerInterface.result @plan))
+                       (~>(PlannerInterface.result (VAL @plan)))
 
-                         (IF(?(&(PlanManager.planningModality ROBOT) (PlanManager.shouldTellPlan TRUE)))  ;if the robot is leader for an agent it will verbalize the plan
-                            (!(PlanManager.tellPlan @plan))
-                            (!(Acapela.say "Let's start!"))
-                            )
 
-                         (IF(?(PlanManager.humanActionManagement TASK))
-                            (!(PlanManager.analyzeTree @planTree))
-                            (=>(PlanManager.monitorPlan))
-                            )
+                       (!(Verbalization.verbalizePlan))
+                         ; (IF(?(&(PlanManager.planningModality ROBOT) (PlanManager.shouldTellPlan TRUE)))  ;if the robot is leader for an agent it will verbalize the plan
+                            ; (!(PlanManager.tellPlan @plan))
+                            ; (!(Acapela.say "Let's start!"))
+                            ; )
 
-                         (WHILE(?(~(NULL @plan)))
+  (IF(?(PlanManager.humanActionManagement TASK))
+    (!(PlanManager.analyzePlanTree @planTree @monitorActions))
+    (=>(PlanManager.monitorPlan HERAKLES_HUMAN1 @monitorActions))
+    )
+
+  (WHILE(?(~(NULL @plan)))
                                         ;get agent
-                               (!(= @anAgent (CAR @plan)))
-                               (!(= @plan (CDR @plan)))
-                               (!(== (VAL @anAgent) (. @agentName @agentType @agentActions  .)))
-                               (!(ReportManager.sub PlanManager.agentReport  @agentName))
-                               (=>(PlanManager.isSub PlanManager.agentReport @agentName))
+                                        (!(= @anAgent (CAR @plan)))
+                                        (!(= @plan (CDR @plan)))
+                                        (!(== (VAL @anAgent) (. @agentName @agentType @agentActions  .)))
+                                        (!(ReportManager.sub PlanManager.agentReport  @agentName))
+                                        (=>(PlanManager.isSub PlanManager.agentReport @agentName))
 
 
-                               (IF(?(EQUAL @agentType HUMAN))
-                                  (IF(?(PlanManager.humanActionManagement LEAF))
-                                     (=>(PlanManager.manageHumanActions (VAL @agentName) (VAL @agentActions) ))
-                                     )
-                                  (=>(PlanManager.isManagingHuman (VAL @agentName)))
-                                  ELSEIF(?(EQUAL @agentType ROBOT))
-                                  (IF(?(EQUAL @agentName @robotName))
-                                     (IF(?(PlanManager.selfActionManagement SEED))
-                                        (=>(PlanManager.manageRobotActionsSeed (VAL @agentActions)))
-                                        ELSE
-                                        (=>(PlanManager.manageRobotActions (VAL @agentActions)))
-                                        )
-                                     )
-                                  )
+                                        (IF(?(EQUAL @agentType HUMAN))
+                                          (IF(?(PlanManager.humanActionManagement LEAF))
+                                           (=>(PlanManager.manageHumanActions (VAL @agentName) (VAL @agentActions) ))
+                                           )
+                                          (=>(PlanManager.isManagingHuman (VAL @agentName)))
+                                          ELSEIF(?(EQUAL @agentType ROBOT))
+                                          (IF(?(EQUAL @agentName @robotName))
+                                           (IF(?(PlanManager.selfActionManagement SEED))
+                                            (=>(PlanManager.manageRobotActionsSeed (VAL @agentActions)))
+                                            ELSE
+                                            (=>(PlanManager.manageRobotActions (VAL @agentActions)))
+                                            )
+                                           )
+                                          )
 
 
                                ;;we wait for the report of an agent, for something unexpected to happen or for a stop request.
@@ -117,267 +126,495 @@
                                (^(|| (PlanManager.agentReport @agent @report)  (PlanManager.stop) (AgentActionMonitor.unexpectedAction @agent)))
 
                                (IF(?(AgentActionMonitor.unexpectedAction @agent))
-                                  (!(PlanManager.chooseGoal @goal @parameters))
+                                (!(PlanManager.chooseGoal @goal @parameters))
 
                                   (IF(?(PlanManager.planningModality (VAL @agent) ROBOT))   ;if robot was planning we switch to adapt and inform the user
-                                     (!(Acapela.say "Do you want to do it in a different way? Let's see if I can help..."))
+                                     ; (!(Acapela.say "Do you want to do it in a different way? Let's see if I can help..."))
                                      (=>(PlanManager.planningModality (VAL @agent) ADAPTS))
                                      )
 
                                   (WHILE(?(PlanManager.isManagingAgent @anAgent))
-                                        (=>(PlanManager.stopAgent (VAL @anAgent)))
-                                        (^(PlanManager.agentReport (VAL @anAgent) @report))
-                                        )
+                                    (=>(PlanManager.stopAgent (VAL @anAgent)))
+                                    (^(PlanManager.agentReport (VAL @anAgent) @report))
+                                    )
                                   ELSEIF(?(PlanManager.stop))
                                   (WHILE(?(PlanManager.isManagingAgent @anAgent))
-                                        (=>(PlanManager.stopAgent (VAL @anAgent)))
-                                        (^(PlanManager.agentReport (VAL @anAgent) @report))
-                                        )
+                                    (=>(PlanManager.stopAgent (VAL @anAgent)))
+                                    (^(PlanManager.agentReport (VAL @anAgent) @report))
+                                    )
                                   (!(= @planningFailures @maxPlanningFailures))
 
                                   ELSEIF(?(PlanManager.agentReport @anAgent "FAILURE"))  ;if one of the agents fail we stop the other agent and replan
                                   (WHILE(?(PlanManager.isManagingAgent @otherAgent))
-                                        (=>(PlanManager.stopAgent (VAL @otherAgent)))
-                                        (^(PlanManager.agentReport (VAL @otherAgent) @report))
-                                        )
+                                    (=>(PlanManager.stopAgent (VAL @otherAgent)))
+                                    (^(PlanManager.agentReport (VAL @otherAgent) @report))
+                                    )
                                   (!(= @planningFailures (+ @planningFailures 1)))
 
                                   ELSEIF(?(PlanManager.agentReport @anAgent "OK"))   ;if one of the agents completes we wait for the other agent positive report
                                   (WHILE(?(PlanManager.isManagingAgent @otherAgent))
-                                        (^(|| (PlanManager.agentReport (VAL @otherAgent) @report) (PlanManager.stop) (AgentActionMonitor.unexpectedAction @agent)))
-
-                                        (IF(?(PlanManager.agentReport (VAL @otherAgent) "FAILURE"))
-                                           (!(= @planningFailures (+ @planningFailures 1)))
-
-                                           ELSEIF(?(PlanManager.stop))
-                                           (IF(?(PlanManager.isManagingAgent (VAL @otherAgent)))
-                                              (=>(PlanManager.stopAgent @otherAgent))
-                                              (^(PlanManager.agentReport (VAL @otherAgent) @report))
-                                              )
-                                           (!(= @planningFailures @maxPlanningFailures))
-
-                                           ELSEIF(?(AgentActionMonitor.unexpectedAction @agent))
-                                           (!(PRINT "Unexpected Action. Replanning"))
-                                           (!(PlanManager.chooseGoal @goal @parameters))
-                                           (IF(?(PlanManager.isManagingAgent (VAL @otherAgent)))
-                                              (=>(PlanManager.stopAgent @otherAgent))
-                                              (^(PlanManager.agentReport (VAL @otherAgent) @report))
-                                              )
-                                           )
-                                        )
-                                  )
-                               (!(= @status completed))
-                               (WHILE(?(PlanManager.agentReport @agent @report))
-                                     (~>(PlanManager.agentReport (VAL @agent) (VAL @report)))
-                                     (IF(?(~(EQUAL @report "OK")))
-                                        (!(= @status notCompleted))
-                                        )
-
+                                    (^(|| (PlanManager.agentReport (VAL @otherAgent) @report) (PlanManager.stop) (AgentActionMonitor.unexpectedAction @agent)))
+
+                                    (IF(?(PlanManager.agentReport (VAL @otherAgent) "FAILURE"))
+                                     (!(= @planningFailures (+ @planningFailures 1)))
+
+                                     ELSEIF(?(PlanManager.stop))
+                                     (IF(?(PlanManager.isManagingAgent (VAL @otherAgent)))
+                                      (=>(PlanManager.stopAgent @otherAgent))
+                                      (^(PlanManager.agentReport (VAL @otherAgent) @report))
+                                      )
+                                     (!(= @planningFailures @maxPlanningFailures))
+
+                                     ELSEIF(?(AgentActionMonitor.unexpectedAction @agent))
+                                     (!(PRINT "Unexpected Action. Replanning"))
+                                     (!(PlanManager.chooseGoal @goal @parameters))
+                                     (IF(?(PlanManager.isManagingAgent (VAL @otherAgent)))
+                                      (=>(PlanManager.stopAgent @otherAgent))
+                                      (^(PlanManager.agentReport (VAL @otherAgent) @report))
+                                      )
                                      )
-                               (IF(?(EQUAL @status notCompleted))
-                                  (^(ELAPSED-TIME (TIME) @timeToRetry))
-                                  )
-                               (!(PlanManager.clean))
-                               )
-                         )
-                      (IF(?(EQUAL @status completed))
-                         (=>(PlanManager.report "OK"))
-                         (!(Acapela.say "Task completed"))
+)
+)
+(!(= @status completed))
+(WHILE(?(PlanManager.agentReport @agent @report))
+ (~>(PlanManager.agentReport (VAL @agent) (VAL @report)))
+ (IF(?(~(EQUAL @report "OK")))
+  (!(= @status notCompleted))
+  )
+
+ )
+(IF(?(EQUAL @status notCompleted))
+  (^(ELAPSED-TIME (TIME) @timeToRetry))
+  )
+(!(PlanManager.clean))
+)
+)
+(IF(?(EQUAL @status completed))
+ (=>(PlanManager.report "OK"))
+                         ; (!(Acapela.say "Task completed"))
 
                          ELSE
-                         (!(Acapela.say "Abandoning Task"))
+                         ; (!(Acapela.say "Abandoning Task"))
                          (=>(PlanManager.report FAILED))
                          )
-                      )
+)
 
-                (~>(PlanManager.isRunning TRUE))
-                )
-          )
-   )
+(~>(PlanManager.isRunning TRUE))
+)
+)
+)
 
- (defop |clean|
-   :invocation (!(PlanManager.clean))
-   :documentation "used to clean facts at the end of a plan"
-   :body (
+(defop |clean|
+ :invocation (!(PlanManager.clean))
+ :documentation "used to clean facts at the end of a plan"
+ :body (
 
-          (WHILE(?(PlanManager.actionReport @action @report))
-                (~>(PlanManager.actionReport (VAL @action) (VAL @report)))
-                )
+  (WHILE(?(PlanManager.actionReport @action @report))
+    (~>(PlanManager.actionReport (VAL @action) (VAL @report)))
+    )
 
-          (WHILE(?(PlanManager.isSub PlanManager.agentReport @agent))
-                (!(ReportManager.unsub PlanManager.agentReport (VAL @agent)))
-                (~>(PlanManager.isSub PlanManager.agentReport (VAL @agent)))
-                )
-          (WHILE(?(PlanManager.actionReport @link @report))
-                (~>(PlanManager.actionReport (VAL @link) (VAL @report)))
-                )
-          (WHILE(?(PlanManager.stopAgent @agent))
-                (~>(PlanManager.stopAgent (VAL @agent)))
-                )
-          (WHILE(?(AgentActionMonitor.unexpectedAction @agent))
-                (~>(AgentActionMonitor.unexpectedAction @agent))
-                )
+  (WHILE(?(PlanManager.isSub PlanManager.agentReport @agent))
+    (!(ReportManager.unsub PlanManager.agentReport (VAL @agent)))
+    (~>(PlanManager.isSub PlanManager.agentReport (VAL @agent)))
+    )
+  (WHILE(?(PlanManager.actionReport @link @report))
+    (~>(PlanManager.actionReport (VAL @link) (VAL @report)))
+    )
+  (WHILE(?(PlanManager.stopAgent @agent))
+    (~>(PlanManager.stopAgent (VAL @agent)))
+    )
+  (WHILE(?(AgentActionMonitor.unexpectedAction @agent))
+    (~>(AgentActionMonitor.unexpectedAction @agent))
+    )
 
-          (~>(PlanManager.stop))
+  (~>(PlanManager.stop))
 
-          )
+  )
 
-   )
+ )
 
 
 
- (defop |manageRobotactionsSeed|
-   :invocation(PlanManager.manageRobotActionsSeed @actions)
-   :body (
-          (?(PlanManager.seedBridge @seedName))
-          (!(SEND-MESSAGE @seedName @actions))
+(defop |manageRobotactionsSeed|
+ :invocation(PlanManager.manageRobotActionsSeed @actions)
+ :body (
+  (?(PlanManager.seedBridge @seedName))
+  (!(SEND-MESSAGE @seedName @actions))
 
-          (!(= @seedReport (TERM-STRING-CAT @seedName ".report")))
-          (!(= @seedReport (MAKE-ATOM @seedReport)))
+  (!(= @seedReport (TERM-STRING-CAT @seedName ".report")))
+  (!(= @seedReport (MAKE-ATOM @seedReport)))
 
-          (?(Robot.name @robotName))
+  (?(Robot.name @robotName))
 
-          (!(= @done FALSE))
-          (WHILE(?(EQUAL @done FALSE))
-                (=>(PlanManager.isManagingAgent robot))
+  (!(= @done FALSE))
+  (WHILE(?(EQUAL @done FALSE))
+    (=>(PlanManager.isManagingAgent robot))
 
-                (!(SEND-MESSAGE @seedName (Seed.getAction)))
-                (^(@seedReport @seedAction @seedActionParameters @actionId @done))
+    (!(SEND-MESSAGE @seedName (Seed.getAction)))
+    (^(@seedReport @seedAction @seedActionParameters @actionId @done))
                                         ;execute action
-                (!(ExecutionManager.getFreeId @executionId))
-                (!(ReportManager.sub ExecutionManager.report @executionId))
-
-                (=>(ExecutionManager.execute @seedAction @seedActionParameters @executionId))
-                (^(|| (ExecutionManager.report (VAL @executionId) @report) (PlanManager.stopAgent robot)))
-
-                (IF(?(ExecutionManager.report (VAL @executionId) @report))
-                   (!(ReportManager.unsub ExecutionManager.report @executionId))
-                   (IF(?(~(EQUAL @report "OK")))
-                      (=>(PlanManager.agentReport robot "FAILURE"))
-                      (~>(PlanManager.isManagingAgent robot))
-                      (!(FAILED))
-                      )
-
-                   (IF(?(~(EQUAL @actionId -1)))
-                      (=>( PlanManager.actionReport @actionId "OK"))
-                      )
-
-                   ELSE
-                   (=>(ExecutionManager.stop @executionId))
-                   (^(ExecutionManager.report (VAL @executionId) @report))
-                   (!(ReportManager.unsub ExecutionManager.report @executionId))
-                   (=>(PlanManager.agentReport robot "STOPPED"))
-                   (~>(PlanManager.isManagingAgent robot))
-                   (!(FAILED))
-                   )
-                )
+                                        (!(ExecutionManager.getFreeId @executionId))
+                                        (!(ReportManager.sub ExecutionManager.report @executionId))
+
+                                        (=>(ExecutionManager.execute @seedAction @seedActionParameters @executionId))
+                                        (^(|| (ExecutionManager.report (VAL @executionId) @report) (PlanManager.stopAgent robot)))
+
+                                        (IF(?(ExecutionManager.report (VAL @executionId) @report))
+                                         (!(ReportManager.unsub ExecutionManager.report @executionId))
+                                         (IF(?(~(EQUAL @report "OK")))
+                                          (=>(PlanManager.agentReport robot "FAILURE"))
+                                          (~>(PlanManager.isManagingAgent robot))
+                                          (!(FAILED))
+                                          )
+
+                                         (IF(?(~(EQUAL @actionId -1)))
+                                          (=>( PlanManager.actionReport @actionId "OK"))
+                                          )
+
+                                         ELSE
+                                         (=>(ExecutionManager.stop @executionId))
+                                         (^(ExecutionManager.report (VAL @executionId) @report))
+                                         (!(ReportManager.unsub ExecutionManager.report @executionId))
+                                         (=>(PlanManager.agentReport robot "STOPPED"))
+                                         (~>(PlanManager.isManagingAgent robot))
+                                         (!(FAILED))
+                                         )
+)
+
+(!(ReportManager.publish PlanManager.agentReport robot "OK"))
+
+
+(~>(PlanManager.isManagingAgent robot))
+)
+)
+
+(defop |findStart|
+ :invocation(!(PlanManager.findStart @tree $startId))
+ :body (
+  (?(Robot.name @robotName))
+  (!(== (VAL @tree) (TASK
+   (TYPE @taskType)
+   (TASK-ID @taskId)
+   (TASK-NAME @taskName)
+   (ACTORS @actorList)
+   (PARAMETERS @parameters)
+   (SUBNODES @subNodes)
+   )
+  ))
+
+  (IF(?(~(NULL @subNodes)))
+   (!(= @node (CAR @subNodes)))
+   (!(PlanManager.findStart @node $startId))
+
+   ELSE
+   (!(= $startId @taskId))
+   )
+  )
+ )
+
+(defop |findEnd|
+ :invocation(!(PlanManager.findEnd @tree $endId))
+ :body (
+  (?(Robot.name @robotName))
+  (!(== (VAL @tree) (TASK
+   (TYPE @taskType)
+   (TASK-ID @taskId)
+   (TASK-NAME @taskName)
+   (ACTORS @actorList)
+   (PARAMETERS @parameters)
+   (SUBNODES @subNodes)
+   )
+  ))
+
+  (IF(?(~(NULL @subNodes)))
+   (!(= @node (LAST @subNodes)))
+   (!(PlanManager.findEnd @node $endId))
+   ELSE
+   (!(= $endId @taskId))
+   )
+  )
+ )
+
+(defop |addVerbalization|
+ :invocation(!(PlanManager.addVerbalization @tree @taskId))
+ :body (
+;  (!(Tester.breakpoint))
+  (!(PlanManager.findStart @tree @startId))
+  (!(PlanManager.findEnd @tree @endId))
+  (=>(PlanManager.verbalization start (VAL @taskId) @startId))
+  (IF(?(PlanManager.verbalization end (VAL @taskId) @nodeList))
+   (!(= @nodeList (CONS-TAIL (VAL @endId) @nodeList)))
+   (=>(PlanManager.verbalization end (VAL @taskId) @nodeList))
+
+   ELSE
+   (=>(PlanManager.verbalization end (VAL @taskId) (. @endId .)))
+   )
+    (=>(PlanManager.wasRobot TRUE))
+    (~>(PlanManager.lastRobotLeaf @any))
+    (=>(PlanManager.lastRobotLeaf @endId))
+  )
+ )
+(defop |analyzePlanTree|
+ :invocation(!(PlanManager.analyzePlanTree @tree $monitorList))
+ :documentation "For now this doesn't work for actions with more than one human"
+ :body (
+  (?(Robot.name @robotName))
+  (!(== (VAL @tree) (TASK
+   (TYPE @taskType)
+   (TASK-ID @taskId)
+   (TASK-NAME @taskName)
+   (ACTORS @actorList)
+   (PARAMETERS @parameters)
+   (SUBNODES @subNodes)
+   )
+  ))
+
 
-   (!(ReportManager.publish PlanManager.agentReport robot "OK"))
 
 
-   (~>(PlanManager.isManagingAgent robot))
+    (!(= @hasRobot FALSE))
+    (!(= @humanList (. .)))
+    (!(= @tempMonitorList (VAL $monitorList)))
+    (WHILE(?(~(NULL @actorList)))
+      (!(= @actor (CAR @actorList)))
+      (!(= @actorList (CDR @actorList)))
+
+      (IF(?(EQUAL @actor (VAL @robotName)))
+       (!(= @hasRobot TRUE))
+
+       ELSE
+       (!(= @hasHuman TRUE))
+       (!(= @humanList (CONS-TAIL (VAL @actor) @humanList)))
+       )
+      )
+    (IF(?(&(EQUAL @hasRobot TRUE) (EQUAL @hasHuman TRUE)))
+;      (!(PlanManager.addVerbalization @tree @taskId))
+      (WHILE(?(~(NULL @subNodes)))
+       (!(= @subNode (CAR @subNodes)))
+       (!(= @subNodes (CDR @subNodes)))
+       (!(PlanManager.analyzePlanTree @subNode @tempMonitorList))
    )
+
+     ELSEIF(?(EQUAL @hasRobot TRUE))
+     (!(PlanManager.addVerbalization @tree @taskId))
+
+  ELSEIF(?(EQUAL @hasHuman TRUE))
+  (!(= @ok TRUE))
+  (WHILE(?(&(~(NULL @humanList)) (EQUAL @ok TRUE)))
+   (!(= @anHuman (CAR @humanList)))
+   (!(= @humanList (CDR @humanList)))
+
+   (!(= @knowledgeParameters (. .)))
+   (?(Actions.knowledgeParametersType (VAL @taskName) @knowledgeParametersTypes))
+   (IF(?(~(NULL @parameters)))
+     (!(= @tempActionParameters @parameters))
+       (!(= @aParameter (CAR @tempActionParameters)))  ;skip the actor parameter. 
+       (!(= @tempActionParameters (CDR @tempActionParameters)))
+       )
+   (WHILE(?(~(NULL @knowledgeParametersTypes)))
+    (!(= @kpt (CAR @knowledgeParametersTypes)))
+    (!(= @knowledgeParametersTypes (CDR @knowledgeParametersTypes)))
+    (!(= @aParameter (CAR @tempActionParameters)))
+    (!(= @tempActionParameters (CDR @tempActionParameters)))
+
+    (?(Object.type (VAL @aParameter) @class @type))
+    (IF(?(EQUAL @kpt CLASS))
+      (!(= @aKnowledgeParameter @class))
+
+      ELSEIF(?(EQUAL @kpt TYPE))
+      (!(= @aKnowledgeParameter @type))
+
+      ELSE
+      (!(= @aKnowledgeParameter @aParameter))
+      )
+      (!(= @knowledgeParameters (CONS-TAIL (VAL @aKnowledgeParameter) @knowledgeParameters)))
+    )
+
+   (!(DatabaseInterface.find (AGENT-STATEMENT (VAL @robotName) (VAL @anHuman) knows (VAL @taskName) (VAL @knowledgeParameters) PRACTICAL) @result))
+   (IF(?(EQUAL @result (. FALSE .)))
+    (!(= @ok FALSE))
+    )
+   )
+  (IF(?(EQUAL @ok TRUE))  
+  (!(= @tempMonitorList (CONS-TAIL (. (VAL @taskName) (VAL @taskId) (VAL @parameters) .) @tempMonitorList)))
+  (IF(?(PlanManager.wasRobot TRUE))
+    (?(PlanManager.lastRobotLeaf @robotTaskId))
+    (=>(PlanManager.taskLink (VAL @taskId) (VAL @robotTaskId)))
+    )
+
+  ELSE
+   (WHILE(?(~(NULL @subNodes)))
+   (!(= @subNode (CAR @subNodes)))
+   (!(= @subNodes (CDR @subNodes)))
+   (!(PlanManager.analyzePlanTree @subNode @tempMonitorList))
+  )
 )
- ;; (defop |analyzeTree|
-   ;;   :invocation(!(PlanManager.analyzePlanTree @tree))
-   ;;   :body (
-
-   ;;          )
-   ;;   )
-
-  ;;  (defop |monitorPlan|
-  ;;     :invocation (!(PlanManager.monitorPlan @agent @taskList))
-  ;;     :body (
-  ;;            (WHILE(?(&(~(NULL @taskList )) (PlanMonitor.stop (VAL @agent))))
-  ;;                  (!(= @task (CAR @taskList)))
-  ;;                  (!(= @taskList (CDR @taskList)))
-  ;;                  (!(== (VAL @taskList) (. @actionName @actionId @actionParameters .)))
-  ;;                  (=>(Actions.waitForPostconditions @actionName @actionParameters @actionId))
-  ;;                  (^(&(Actions.actionReport (VAL @actionId) @report) (PlanMonitor.stop (VAL @agent))))
-  ;;                  (IF(?(Actions.actionReport (VAL @actionId) (VAL @report)))
-  ;;                     (~>(Actions.actionReport (VAL @actionId) (VAL @report)))
-  ;;                     (IF(?(EQUAL @report "OK"))
-  ;;                        (=>(PlanManager.actionReport (VAL @actionId) "OK"))
-
-  ;;                        ELSE
-  ;;                        (=>(PlanManager.actionReport (VAL @actionId) "FAILURE"))
-  ;;                        )
-  ;;                     )
-  ;;                  )
-  ;;            (IF(?(PlanMonitor.stop (VAL @agent)))
-  ;;               (~>(PlanMonitor.stop (VAL @agent)))
-  ;;               (=>(PlanManager.agentReport (VAL @agentName) "STOPPED"))
-
-  ;;               ELSE
-  ;;               (=>(PlanManager.agentReport (VAL @agentName) "OK"))
-  ;;               )
-  ;;            (~>(PlanManager.isManagingAgent (VAL @agent)))
-  ;;            )
-  ;;     )
-
-  (defop |manageHumanActions|
-    :invocation (PlanManager.manageHumanActions @agent @actions)
-    :documentation "Procedure to handle the human actions into a plan. When the agent has an empty action list it just reports an okay. "
-    :body (
+          (~>(PlanManager.wasRobot TRUE))
+        (~>(PlanManager.lastRobotLeaf @any))
+
+)
+
+(!(= $monitorList @tempMonitorList))
+
+  )
+  )
+
+(defop |getParameter|
+  :invocation(!(PlanManager.getParameter @parameters @n $return))
+  :body (
+        
+    (!(= @i 0))
+    (WHILE(?(~(> @i @n)))
+      (!(= @p (CAR @parameters)))
+      (!(= @parameters (CDR @parameters)))
+
+      (!(= @i (+ @i 1)))
+      )
+    (!(= $return @p))
+    )
+  )
+
+(defop |monitorPlan|
+ :invocation (!(PlanManager.monitorPlan @agent @taskList))
+ :body (
+  (?(Robot.name @robotName))
+  (WHILE(?(&(~(NULL @taskList )) (~(PlanManager.stopAgent (VAL @agent)))))
+    (!(= @task (CAR @taskList)))
+    (!(= @taskList (CDR @taskList)))
+    (!(== (VAL @task) (. @actionName @actionId @actionParameters .)))
+
+    (!(= @monitorParameterList (. .)))
+    (!(= @hasSpecificParameters FALSE))
+    (IF(?(Actions.monitorInformationParameters (VAL @actionName) @monitorParametersId))
+      (!(= @hasSpecificParameters TRUE))
+      (WHILE(?(~(NULL @monitorParametersId)))
+        (!(= @aMonitorParameterId (CAR @monitorParametersId)))
+        (!(= @monitorParametersId (CDR @monitorParametersId)))
+
+        (!(PlanManager.getParameter @actionParameters @aMonitorParameterId @aParameter))
+        (!(= @monitorParameterList (CONS-TAIL (VAL @aParameter) @monitorParameterList)))
+        )
+      )
+    (IF(?(EQUAL @hasSpecificParameters TRUE))
+      (?(Actions.monitorInformation (VAL @actionName) (VAL @monitorParameterList) @taskPostconditions @expectedTime))
+
+      ELSE
+      (?(Actions.monitorInformation (VAL @actionName) @taskPostconditions @expectedTime))  
+      )
+    (!(= @postConditionsFacts (. .)))
+    (WHILE(?(~(NULL @taskPostconditions)))
+      (!(= @aPostcondition (CAR @taskPostconditions)))
+      (!(= @taskPostconditions (CDR @taskPostconditions)))
+
+      (!(== (VAL @aPostcondition) (SUBJECT TYPE @sType @conditionSubject PREDICATE @predicate VALUE TYPE @vType @conditionValue)))
+      (IF(?(EQUAL @sType SYMBOL))
+        (!(= @subject @conditionSubject))
+        
+        ELSE
+        (!(PlanManager.getParameter @actionParameters @conditionSubject @subject))
+        )
+      (IF(?(EQUAL @vType SYMBOL))
+        (!(= @value @conditionValue))
+
+        ELSE
+        (!(PlanManager.getParameter @actionParameters @conditionValue @value))
+        )
+      (!(= @postConditionsFacts (CONS-TAIL (AGENT-STATEMENT (VAL @robotName) (VAL @subject) (VAL @predicate) (VAL @value)) @postConditionsFacts)))     
+
+      )
+
+    (WHILE(?(PlanManager.taskLink (VAL @actionId) @link))
+      (^(||(PlanManager.actionCompleted (VAL @link)) (PlanManager.stopAgent (VAL @agent))))
+      (~>(PlanManager.taskLink (VAL @actionId) (VAL @link)))  
+      )
+
+    (!(DatabaseInterface.addMonitor @postConditionsFacts (PlanManager.taskAchieved) @result))
+
+    (!(Verbalization.verbalizeStartAction @actionId))
+
+    (^(||(PlanManager.taskAchieved) (ELAPSED-TIME (TIME) (VAL @expectedTime) ) (PlanManager.stopAgent (VAL @agent))))
+    (IF(?(PlanManager.taskAchieved))
+      (~>(PlanManager.taskAchieved))
+      (=>(PlanManager.actionReport (VAL @actionId) "OK"))
+      (!(Verbalization.verbalizeEndAction @actionId))
+
+      ELSEIF(?(PlanManager.stopAgent (VAL @agent)))
+      (~>(PlanManager.stopAgent (VAL @agent)))
+      (=>(PlanManager.agentReport (VAL @agentName) "STOPPED"))
+      (!(FAILED))
+      
+      ELSE
+      (=>(PlanManager.agentReport (VAL @agentName) "FAILURE"))
+      (!(FAILED))
+      )
+    )
+  (~>(PlanManager.isManagingAgent (VAL @agent)))
+  )
+  )
+
+(defop |manageHumanActions|
+  :invocation (PlanManager.manageHumanActions @agent @actions)
+  :documentation "Procedure to handle the human actions into a plan. When the agent has an empty action list it just reports an okay. "
+  :body (
            (!(= @oldObject NULL)) ;;this is just used for the getactionstring procedure, which gives different strings when we are doing more than one action with the same object.
 
            (IF(?(~(NULL @actions)))
-              (=>(PlanManager.isManagingAgent @agent))
-              (!(= @tempActions (VAL @actions)))
+            (=>(PlanManager.isManagingAgent @agent))
+            (!(= @tempActions (VAL @actions)))
               ;;loop until every action has been executed or we receive a stop command
               (WHILE(?(&
-                       (~(NULL @actions))
-                       (~(PlanManager.agentReport (VAL @agent) @report))
-                       ))
-                     (!(= @action (CAR @actions)))
-                    (!(= @actions (CDR @actions)))
-                    (!(== (VAL @action) (. @actionToExecute @actionId @actionLinks .)))
+               (~(NULL @actions))
+               (~(PlanManager.agentReport (VAL @agent) @report))
+               ))
+              (!(= @action (CAR @actions)))
+              (!(= @actions (CDR @actions)))
+              (!(== (VAL @action) (. @actionToExecute @actionId @actionLinks .)))
 
                     ;;wait until the linked action is completed or there is a problem
                     (WHILE(?(~(NULL @actionLinks)))
-                          (!(= @currentLink (CAR @actionLinks)))
-                          (!(= @actionLinks (CDR @actionLinks)))
-                          (^(|| (PlanManager.actionReport (VAL @currentLink) @report) (PlanManager.stopAgent (VAL @agent))))
+                      (!(= @currentLink (CAR @actionLinks)))
+                      (!(= @actionLinks (CDR @actionLinks)))
+                      (^(|| (PlanManager.actionReport (VAL @currentLink) @report) (PlanManager.stopAgent (VAL @agent))))
 
                           (IF(?(PlanManager.stopAgent (VAL @agent))) ;;problem: we received a stop
-                             (~>(PlanManager.stopAgent (VAL @agent)))
-                             (!(AgentActionMonitor.cancelActions (VAL @agent)))
-                             (=>(PlanManager.agentReport @agent "STOPPED"))
-                             (~>(PlanManager.isManagingAgent (VAL @agent)))
-                             (!(FAILED))
-                             )
+                           (~>(PlanManager.stopAgent (VAL @agent)))
+                           (!(AgentActionMonitor.cancelActions (VAL @agent)))
+                           (=>(PlanManager.agentReport @agent "STOPPED"))
+                           (~>(PlanManager.isManagingAgent (VAL @agent)))
+                           (!(FAILED))
+                           )
                           (IF(?(~(EQUAL @report "OK")))  ;problem: the linked action failed
-                             (=>(PlanManager.agentReport (VAL @agent) "FAILURE"))
-                             (~>(PlanManager.isManagingAgent (VAL @agent)))
+                           (=>(PlanManager.agentReport (VAL @agent) "FAILURE"))
+                           (~>(PlanManager.isManagingAgent (VAL @agent)))
 
-                             (!(FAILED))
-                             )
+                           (!(FAILED))
+                           )
                           )
-                    (!(== (VAL @actionToExecute) (. @actionName @actionParameters .)))
+(!(== (VAL @actionToExecute) (. @actionName @actionParameters .)))
 
-                    (!(PlanManager.getActionString @actionName @actionParameters 0 @oldObject @followsHandover @actionString))
+(!(PlanManager.getActionString @actionName @actionParameters 0 @oldObject @followsHandover @actionString))
                     (IF(?(PlanManager.planningModality (VAL @agents) ROBOT))  ;if robot plans then he tells the human he should execute the action
-                       (!(Acapela.say @actionString))
-                       )
+                     (!(Acapela.say @actionString))
+                     )
                     (!(PRINT "HUMAN: "))
                     (!(PRINT @actionString))
                     (!(PRINT @actionId))
 
                     ;;movement actions and other actions are handled differently for now. Should change when we switch to TOASTER completely
                     (IF(?(Action.type (VAL @actionName) MOVEMENT))
-                       (!(= @location (CAR(CDR @actionParameters))))
-                       (=>(AgentActionMonitor.monitorMove @agent @location @actionId))
+                     (!(= @location (CAR(CDR @actionParameters))))
+                     (=>(AgentActionMonitor.monitorMove @agent @location @actionId))
 
-                       ELSE
+                     ELSE
                        ;;necessary to understand which sphere is linked with the action
                        (?(Actions.monitorParameter (VAL @actionName) @n))
                        (!(= @i 0))
                        (!(= @tempActionParameters (VAL @actionParameters)))
                        (WHILE(?(~(> (VAL @i) (VAL @n))))
-                             (!(= @target (CAR @tempActionParameters)))
-                             (!(= @tempActionParameters (CDR @tempActionParameters)))
-                             (!(= @i (+ (VAL @i) 1)))
-                             )
+                         (!(= @target (CAR @tempActionParameters)))
+                         (!(= @tempActionParameters (CDR @tempActionParameters)))
+                         (!(= @i (+ (VAL @i) 1)))
+                         )
 
                        ;;get the corresponding sphereId (this should exist since inferences are calculated independently from this module)
                        (!(AgentActionMonitor.getSphereId (VAL @agent) (VAL @target) (VAL @actionName) @sphereId))
@@ -385,286 +622,293 @@
                        ;;monitor the action
                        (=>(AgentActionMonitor.monitorAction @agent @actionId @actionName @actionParameters @sphereId))
                        )
-                    (^(|| (AgentActionMonitor.actionCompleted (VAL @agent) (VAL @actionId))
+(^(|| (AgentActionMonitor.actionCompleted (VAL @agent) (VAL @actionId))
                        (PlanManager.stopAgent (VAL @agent))))  ;wait until we complete the action or we have a stopAgent (unexpectedAction is handled in planmanager)
 
-                    (IF(?(AgentActionMonitor.actionCompleted (VAL @agent) (VAL @actionId)))
-                       (~>(AgentActionMonitor.actionCompleted (VAL @agent) (VAL @actionId)))
-                       (=>(PlanManager.actionReport @actionId "OK"))
-		      
-                       ELSEIF(?(PlanManager.stopAgent (VAL @agent)))
-                       (~>(PlanManager.stopAgent (VAL @agent)))
-                       (=>(PlanManager.agentReport @agent "STOPPED"))
-                       (~>(PlanManager.isManagingAgent (VAL @agent)))
+(IF(?(AgentActionMonitor.actionCompleted (VAL @agent) (VAL @actionId)))
+ (~>(AgentActionMonitor.actionCompleted (VAL @agent) (VAL @actionId)))
+ (=>(PlanManager.actionReport @actionId "OK"))
 
-                       (!(FAILED))
-		      )
-		   
-		   )
-              (=>(PlanManager.agentReport @agent "OK"))
-              (~>(PlanManager.isManagingAgent (VAL @agent)))
-              )
-           )
-    )
- (defop |manageRobotActions|
-   :invocation(PlanManager.manageRobotActions @actions)
-   :documentation "Manages the execution of the robot actions"
-   :body (
-          (!(= @oldObject NULL))
-          (?(Robot.name @robotName))
+ ELSEIF(?(PlanManager.stopAgent (VAL @agent)))
+ (~>(PlanManager.stopAgent (VAL @agent)))
+ (=>(PlanManager.agentReport @agent "STOPPED"))
+ (~>(PlanManager.isManagingAgent (VAL @agent)))
 
-          (WHILE(?(~ (NULL @actions)) )
-                (=>(PlanManager.isManagingAgent robot))
-            (!(= @currentAction (CAR @actions)))
-            (!(= @actions (CDR @actions)))
-		
-            (!(== (VAL @currentAction) (. @actionToExecute @actionId @actionLinks .)))
+ (!(FAILED))
+ )
+
+)
+(=>(PlanManager.agentReport @agent "OK"))
+(~>(PlanManager.isManagingAgent (VAL @agent)))
+)
+)
+)
+(defop |manageRobotActions|
+ :invocation(PlanManager.manageRobotActions @actions)
+ :documentation "Manages the execution of the robot actions"
+ :body (
+  (!(= @oldObject NULL))
+  (?(Robot.name @robotName))
+
+  (WHILE(?(~ (NULL @actions)) )
+    (=>(PlanManager.isManagingAgent robot))
+    (!(= @currentAction (CAR @actions)))
+    (!(= @actions (CDR @actions)))
+
+    (!(== (VAL @currentAction) (. @actionToExecute @actionId @actionLinks .)))
             ;;wait for previous linked actions to be completed or to fail
 
 
             (WHILE(?(~(NULL @actionLinks)))
-                  (!(= @currentLink (CAR @actionLinks)))
-                  (IF(?(~(PlanManager.actionReport (VAL @currentLink) @report)))
-                     (!(PRINT "Robot waits for action"))
-                     (!(PRINT @currentLink))
-                     )
-                  (^(|| (PlanManager.actionReport (VAL @currentLink) @report)
-                     (PlanManager.stopAgent robot)))
+              (!(= @currentLink (CAR @actionLinks)))
+              (IF(?(~(PlanManager.actionReport (VAL @currentLink) @report)))
+               (!(PRINT "Robot waits for action"))
+               (!(PRINT @currentLink))
+               )
+              (^(|| (PlanManager.actionReport (VAL @currentLink) @report)
+               (PlanManager.stopAgent robot)))
 
-                  (IF(?(PlanManager.stopAgent robot))
-                     (=>(PlanManager.agentReport robot "STOPPED"))
-                     (~>(PlanManager.isManagingAgent robot))
-                     (!(FAILED))
-                     )
-                  (IF(?(~(PlanManager.actionReport (VAL @currentLink) "OK")))
-                     (=>(PlanManager.agentReport robot "FAILURE"))
-                     (~>(PlanManager.isManagingAgent robot))
-                     (!(FAILED))
-                     )
-                  (!(= @actionLinks (CDR @actionLinks)))
-                  )
+              (IF(?(PlanManager.stopAgent robot))
+               (=>(PlanManager.agentReport robot "STOPPED"))
+               (~>(PlanManager.isManagingAgent robot))
+               (!(FAILED))
+               )
+              (IF(?(~(PlanManager.actionReport (VAL @currentLink) "OK")))
+               (=>(PlanManager.agentReport robot "FAILURE"))
+               (~>(PlanManager.isManagingAgent robot))
+               (!(FAILED))
+               )
+              (!(= @actionLinks (CDR @actionLinks)))
+              )
             (!(== (VAL @actionToExecute) (. @actionName @actionParameters .)))
 
             (IF(?(EQUAL @actionName undefined))
-               (=>(PlanManager.actionReport (VAL @actionId) "OK"))
+             (=>(PlanManager.actionReport (VAL @actionId) "OK"))
 
-               ELSE
+             ELSE
                                         ;verbalize action
-               (!(PlanManager.getActionString @actionName @actionParameters 0 @oldObject @followsHandover @actionString))
-               (!(Acapela.say @actionString))
-               (!(PRINT "ROBOT: "))
-               (!(PRINT @actionString))
+                                        (!(PlanManager.getActionString @actionName @actionParameters 0 @oldObject @followsHandover @actionString))
+                                        (!(Acapela.say @actionString))
+                                        (!(PRINT "ROBOT: "))
+                                        (!(PRINT @actionString))
                                         ;execute action
-               (!(ExecutionManager.getFreeId @executionId))
-               (!(ReportManager.sub ExecutionManager.report @executionId))
+                                        (!(ExecutionManager.getFreeId @executionId))
+                                        (!(ReportManager.sub ExecutionManager.report @executionId))
 
 
 
                (!(= @actionParameters (CDR @actionParameters))) ;cut the agent parameter
 
+
+               (IF(?(PlanManager.verbalization start @taskId (VAL @actionId)))
+                (!(Verbalization.verbalizeStartAction @taskId))
+                )
                (=>(ExecutionManager.execute @actionName @actionParameters @executionId))
                (^(|| (ExecutionManager.report (VAL @executionId) @report) (PlanManager.stopAgent robot)))
                (IF(?(ExecutionManager.report (VAL @executionId) @report))
-                  (!(ReportManager.unsub ExecutionManager.report @executionId))
-                  (IF(?(||(~(EQUAL @report "OK")) (EQUAL @toReplan TRUE)))
-                     (=>(PlanManager.agentReport robot "FAILURE"))
-                     (~>(PlanManager.isManagingAgent robot))
-                     (!(FAILED))
-                     )
+                (!(ReportManager.unsub ExecutionManager.report @executionId))
+                (IF(?(~(EQUAL @report "OK")))
+                 (=>(PlanManager.agentReport robot "FAILURE"))
+                 (~>(PlanManager.isManagingAgent robot))
+                 (=>(PlanManager.failedAction @actionId))
+                 (!(FAILED))
+                 )
+
+                (=>( PlanManager.actionReport @actionId "OK"))
+                (IF(?(PlanManager.verbalization end @taskId (VAL @actionId)))
+                  (!(Verbalization.verbalizeEndAction @taskId))
+                  )
 
-                  (=>( PlanManager.actionReport @actionId "OK"))
+                ELSE
+                (=>(ExecutionManager.stop @executionId))
+                (^(ExecutionManager.report (VAL @executionId) @report))
+                (!(ReportManager.unsub ExecutionManager.report @executionId))
+                (=>(PlanManager.agentReport robot "STOPPED"))
+                (~>(PlanManager.isManagingAgent robot))
+                (!(FAILED))
+                )
+)
+)
+(!(ReportManager.publish PlanManager.agentReport robot "OK"))
 
 
-                  ELSE
-                  (=>(ExecutionManager.stop @executionId))
-                  (^(ExecutionManager.report (VAL @executionId) @report))
-                  (!(ReportManager.unsub ExecutionManager.report @executionId))
-                  (=>(PlanManager.agentReport robot "STOPPED"))
-                  (~>(PlanManager.isManagingAgent robot))
-                  (!(FAILED))
-                  )
-               )
-            )
-          (!(ReportManager.publish PlanManager.agentReport robot "OK"))
-
+(~>(PlanManager.isManagingAgent robot))
+)
 
-          (~>(PlanManager.isManagingAgent robot))
-          )
-   
-   )
+)
 
- (defop |manageOtherRobotActions|
-   :invocation(PlanManager.manageOtherRobotActions @robot @actions)
-   :documentation "manages actions for other robot agents"
-   :body (
-          (?(Connector.robot (VAL @robot) @robotKernel))
-          (?(Connector.robot SELF @selfKernel))
-          (IF(?(~(NULL @actions)))
-             (=>(PlanManager.isManagingAgent @robot))
-             (WHILE(?(~ (NULL @actions)) )
-                   (!(= @currentAction (CAR @actions)))
-                   (!(= @actions (CDR @actions)))
-
-                   (!(== (VAL @currentAction) (. @actionToExecute @actionId @actionLinks .)))
+(defop |manageOtherRobotActions|
+ :invocation(PlanManager.manageOtherRobotActions @robot @actions)
+ :documentation "manages actions for other robot agents"
+ :body (
+  (?(Connector.robot (VAL @robot) @robotKernel))
+  (?(Connector.robot SELF @selfKernel))
+  (IF(?(~(NULL @actions)))
+   (=>(PlanManager.isManagingAgent @robot))
+   (WHILE(?(~ (NULL @actions)) )
+     (!(= @currentAction (CAR @actions)))
+     (!(= @actions (CDR @actions)))
+
+     (!(== (VAL @currentAction) (. @actionToExecute @actionId @actionLinks .)))
                    ;;wait for previous linked actions to be completed or to fail
-		  
-		  (WHILE(?(~(NULL @actionLinks))) 
-			(!(= @currentLink (CAR @actionLinks)))
-			(^(|| (PlanManager.actionReport (VAL @currentLink) @report)
-			   (PlanManager.stopAgent robot)))
-
-			(IF(?(PlanManager.stopAgent (VAL @robot)))
-               (=>(PlanManager.agentReport (VAL @robot) "STOPPED"))
-			   (~>(PlanManager.isManagingAgent (VAL @robot)))
-			   (!(FAILED))
-			   )
-            (IF(?(~(PlanManager.actionReport (VAL @currentLink) "OK")))
-               (=>(PlanManager.agentReport (VAL @robot) "FAILURE"))
-			   (~>(PlanManager.isManagingAgent (VAL @robot)))
-			   (!(FAILED))
-			   )
-			(!(= @actionLinks (CDR @actionLinks)))
-			)
-		  (!(== (VAL @actionToExecute) (. @actionName @actionParameters .)))
-
-		  (IF(?(PlanManager.planningModality (VAL @robot) ROBOT))
-		     (!(SEND-MESSAGE @robotKernel @selfKernel (Connector.command order @currentAction)))
-		     )
-		  (^(|| (PlanManager.actionReport (VAL @actionId) @report) (PlanManager.stopAgent (VAL robot))))
-		  (IF(?(PlanManager.stopAgent (VAL @robot)))
-		     (~>(PlanManager.stopAgent (VAL @robot)))
-             (=>(PlanManager.agentReport (VAL @robot) "STOPPED"))
-		     (~>(PlanManager.isManagingAgent (VAL @robot)))
-		     (!(FAILED))
-             ELSEIF(?(~(EQUAL @report "OK")))
-		     (=>(PlanManager.agentReport (VAL @robot) FAILED))
-		     (~>(PlanManager.isManagingAgent (VAL @robot)))
-		     (!(FAILED))
-		     )
-		  
-		  )
-	    )
-     (=>(PlanManager.agentReport (VAL @robot) "OK"))
-	 (~>(PlanManager.isManagingAgent (VAL @robot)))
-	 )
-  )
-  
- 
-  
+
+                   (WHILE(?(~(NULL @actionLinks))) 
+                     (!(= @currentLink (CAR @actionLinks)))
+                     (^(|| (PlanManager.actionReport (VAL @currentLink) @report)
+                      (PlanManager.stopAgent robot)))
+
+                     (IF(?(PlanManager.stopAgent (VAL @robot)))
+                       (=>(PlanManager.agentReport (VAL @robot) "STOPPED"))
+                       (~>(PlanManager.isManagingAgent (VAL @robot)))
+                       (!(FAILED))
+                       )
+                     (IF(?(~(PlanManager.actionReport (VAL @currentLink) "OK")))
+                       (=>(PlanManager.agentReport (VAL @robot) "FAILURE"))
+                       (~>(PlanManager.isManagingAgent (VAL @robot)))
+                       (!(FAILED))
+                       )
+                     (!(= @actionLinks (CDR @actionLinks)))
+                     )
+                   (!(== (VAL @actionToExecute) (. @actionName @actionParameters .)))
+
+                   (IF(?(PlanManager.planningModality (VAL @robot) ROBOT))
+                     (!(SEND-MESSAGE @robotKernel @selfKernel (Connector.command order @currentAction)))
+                     )
+                   (^(|| (PlanManager.actionReport (VAL @actionId) @report) (PlanManager.stopAgent (VAL robot))))
+                   (IF(?(PlanManager.stopAgent (VAL @robot)))
+                     (~>(PlanManager.stopAgent (VAL @robot)))
+                     (=>(PlanManager.agentReport (VAL @robot) "STOPPED"))
+                     (~>(PlanManager.isManagingAgent (VAL @robot)))
+                     (!(FAILED))
+                     ELSEIF(?(~(EQUAL @report "OK")))
+                     (=>(PlanManager.agentReport (VAL @robot) FAILED))
+                     (~>(PlanManager.isManagingAgent (VAL @robot)))
+                     (!(FAILED))
+                     )
+
+                   )
+)
+(=>(PlanManager.agentReport (VAL @robot) "OK"))
+(~>(PlanManager.isManagingAgent (VAL @robot)))
+)
+)
+
+
+
 
 (defop |tellGoal|
   :invocation(!(PlanManager.tellGoal @goal @parameters))
   :documentation "Returns a text string containing a suitable verbalization for a goal"
   :body (
-	 (IF(?(EQUAL @goal Clean))
-	    (IF(?(PlanManager.takeInitiative TRUE))
-	       (!(Acapela.say "We will clean the table together."))
-	       (^(ELAPSED-TIME (TIME) 1))
-	      
-	       ELSE
-	       (!(Acapela.say "I think you want to clean the table. Let's see if I can help..."))
-	       (^(ELAPSED-TIME (TIME) 1))
-	       )
-	    )
-	 
-	 )
+    (IF(?(EQUAL @goal Clean))
+     (IF(?(PlanManager.takeInitiative TRUE))
+      (!(Acapela.say "We will clean the table together."))
+      (^(ELAPSED-TIME (TIME) 1))
+
+      ELSE
+      (!(Acapela.say "I think you want to clean the table. Let's see if I can help..."))
+      (^(ELAPSED-TIME (TIME) 1))
+      )
+     )
+
+    )
   )
 (defop |getActionString|
   :invocation(!(PlanManager.getActionString @actionName @actionParameters @nAction $oldObject $followsHandover $string))
   :documentation "Returns a text string containing a suitable verbalization for an action
-                  @actionName name of the action to verbalize
-                  @actionParameters parameters of the action
-                  @subject -I - or -You -
-                  @nAction 1 or 2. Number of actions verbalized in a row. The second one doesn't have the subject.
-                  $oldobject object of the last action. If it's the same as the current object the robot will say -it- and not objectName. Modified with the current object at the end of the op
-                  $followsHandover TRUE if last action was an handover. Modified to TRUE if this action was an handover and to FALSE otherwise
-                  $string  output message string"
+  @actionName name of the action to verbalize
+  @actionParameters parameters of the action
+  @subject -I - or -You -
+  @nAction 1 or 2. Number of actions verbalized in a row. The second one doesn't have the subject.
+  $oldobject object of the last action. If it's the same as the current object the robot will say -it- and not objectName. Modified with the current object at the end of the op
+  $followsHandover TRUE if last action was an handover. Modified to TRUE if this action was an handover and to FALSE otherwise
+  $string  output message string"
   :body (
-         (!(= @message ""))
+   (!(= @message ""))
 
 
-         (IF(?(Actions.nParameters (VAL @actionName) 2))
-            (!(== (VAL @actionParameters) (. @agent @object .)))
+   (IF(?(Actions.nParameters (VAL @actionName) 2))
+    (!(== (VAL @actionParameters) (. @agent @object .)))
 
-            ELSE
-            (!(== (VAL @actionParameters) (. @agent @object @otherObject .)))
-            )
+    ELSE
+    (!(== (VAL @actionParameters) (. @agent @object @otherObject .)))
+    )
 
-         (IF(?(EQUAL @object $oldObject))
-            (!(= @translatedObject "it "))
-            ELSE
-            (?(Acapela.translation (VAL @object) @translatedObject))
-            (!(= @translatedObject (TERM-STRING-CAT "the " @translatedObject " ")))
-            )
-         (!(= $oldObject @object))
+   (IF(?(EQUAL @object $oldObject))
+    (!(= @translatedObject "it "))
+    ELSE
+    (?(Acapela.translation (VAL @object) @translatedObject))
+    (!(= @translatedObject (TERM-STRING-CAT "the " @translatedObject " ")))
+    )
+   (!(= $oldObject @object))
 
-         (?(Acapela.translation (VAL @agent) @translatedAgent))
-         (?(Acapela.translation (VAL @actionName) @translatedAction))
+   (?(Acapela.translation (VAL @agent) @translatedAgent))
+   (?(Acapela.translation (VAL @actionName) @translatedAction))
 
-         (IF(?(Action.nParameters (VAL @actionName) 2))
-            (!(= @message (TERM-STRING-CAT @translatedAgent " " @translatedAction " " @translatedObject)))
+   (IF(?(Action.nParameters (VAL @actionName) 2))
+    (!(= @message (TERM-STRING-CAT @translatedAgent " " @translatedAction " " @translatedObject)))
 
-            ELSEIF(?(Action.nParameters (VAL @actionName) 3))
-            (?(Robot.name @robotName))
-            (IF(?(EQUAL @robotName @otherObject))
-               (!(= @translatedOtherObject "me"))
+    ELSEIF(?(Action.nParameters (VAL @actionName) 3))
+    (?(Robot.name @robotName))
+    (IF(?(EQUAL @robotName @otherObject))
+     (!(= @translatedOtherObject "me"))
 
-               ELSE
-               (?(Acapela.translation (VAL @otherObject) @translatedOtherObject))
-               )
-            (!(= @message (TERM-STRING-CAT @translatedAgent " " @translatedAction " " @translatedObject)))
+     ELSE
+     (?(Acapela.translation (VAL @otherObject) @translatedOtherObject))
+     )
+    (!(= @message (TERM-STRING-CAT @translatedAgent " " @translatedAction " " @translatedObject)))
 
-            )
-         (!(= $string @message))
+    )
+   (!(= $string @message))
 
-	 )
-  )
+   )
+)
 
 
- (defop |tellPlan|
-   :invocation(!(PlanManager.tellPlan @plan))
-   :documentation "Verbalizes a plan using acapela"
-   :body (
-	  (!(= @robotActions (. .)))
-	  (!(= @humansActions (. .)))
-	  (WHILE(?(~(NULL @plan))) 
+(defop |tellPlan|
+ :invocation(!(PlanManager.tellPlan @plan))
+ :documentation "Verbalizes a plan using acapela"
+ :body (
+   (!(= @robotActions (. .)))
+   (!(= @humansActions (. .)))
+   (WHILE(?(~(NULL @plan))) 
 					;get agent
-		(!(= @anAgent (CAR @plan)))
-		(!(= @plan (CDR @plan)))
-		(!(== (VAL @anAgent) (. @agentName @agentType @agentActions  .)))
-		(IF(?(EQUAL @agentType HUMAN))
-		   (!(= @humanActions @agentActions))
-		   
-		   ELSEIF(?(EQUAL @agentType ROBOT))
-		   (!(= @robotActions @agentActions))
-		   )
-		)
-	  
-
-
-
-	  
-	  (!(Acapela.say "Okay... this is the plan"))
-	  (!(= @first TRUE))
+          (!(= @anAgent (CAR @plan)))
+          (!(= @plan (CDR @plan)))
+          (!(== (VAL @anAgent) (. @agentName @agentType @agentActions  .)))
+          (IF(?(EQUAL @agentType HUMAN))
+           (!(= @humanActions @agentActions))
+
+           ELSEIF(?(EQUAL @agentType ROBOT))
+           (!(= @robotActions @agentActions))
+           )
+          )
+
+
+
+
+
+   (!(Acapela.say "Okay... this is the plan"))
+   (!(= @first TRUE))
 	  ;; the idea here is looping on the actions of robot and human, calling each time the op tellPossibleActions. This op tells all actions that don't have pre-requisite actions not completed. So the robot will
 	  ;; say "i do this and this, then you do that" and so on.
 	  (WHILE(?(|| (~(NULL @robotActions)) (~(NULL @humanActions))))
 
-		(!(PlanManager.tellPossibleActions PR2_ROBOT @robotActions @first))
-		(!(PlanManager.tellPossibleActions human @humanActions @first))
-		
-		)	  
+      (!(PlanManager.tellPossibleActions PR2_ROBOT @robotActions @first))
+      (!(PlanManager.tellPossibleActions human @humanActions @first))
+
+      )	  
 	  (^(ELAPSED-TIME (TIME) 1))
 	  )
-   )
+)
 
 (defop |tellPossibleActions|
   :invocation(!(PlanManager.tellPossibleActions @agentName $agentActions $first))
   :documentation "Verabalizes all possible sequential actions (before the agent needs to wait for another agent's action
-                  @agentName PR2_ROBOT or anyother. If it's PR2_ROBOT the robot will say -i do this- if not -you do this-
-                  $agentActions the list of actions. This will be modified here
-                  $first . TRUE if this is the first action to be verbalized. Will be placed false automatically by this methoid. The first action will be told in a  different way from the others."
-  :body (
+    @agentName PR2_ROBOT or anyother. If it's PR2_ROBOT the robot will say -i do this- if not -you do this-
+    $agentActions the list of actions. This will be modified here
+    $first . TRUE if this is the first action to be verbalized. Will be placed false automatically by this methoid. The first action will be told in a  different way from the others."
+    :body (
 
 	 (!(= @hasUndefined FALSE))      ;;this is needed because we don't verbalize undefined actions.
 	 (!(= @followsHandover FALSE))   ;;the problem is that handover is a joint action but it's considered as a "robot action" and so the treatmant of it and of following actions is a little different.
@@ -673,51 +917,51 @@
 	 (IF(?(~(NULL $agentActions)))
 	    (!(= @actionsTold FALSE))               ;;when this goes true we will go out of the method
 	    (IF(?(EQUAL @agentName PR2_ROBOT))      
-	       (!(= @subject "I "))   
+        (!(= @subject "I "))   
 	       (!(= @subject2 "you "))             ;;used for joint actions (i give you)
 	       ELSE
 	       (!(= @subject "you "))
 	       (!(= @subject2 "me "))
 	       )
 	    (IF(?(EQUAL $first TRUE))
-	       (!(Acapela.getSentence startSentence @message))
-	       ELSE
-	       (!(Acapela.getSentence continueSentence @message))
-	       )
+        (!(Acapela.getSentence startSentence @message))
+        ELSE
+        (!(Acapela.getSentence continueSentence @message))
+        )
 
 	    (!(= @nAction 0))  ;;this will range from 0 to 2. The robot will say actions in groups of 2 (I do this and this. Then I do this and that.) 0 is used just for the first action. After that nAction is set to 1 and the robot will say "and i do this" . At this point the value will become 2 and the robot will start a new sentece, returning to 1 after saying the first action in this new sentence.
 	    
 	    (!(= @oldObject NULL)) ;;if two following actions have the same object the robot will say "it" instead of the objectName
 	    (WHILE(?(&(EQUAL @actionsTold FALSE) (~(NULL $agentActions))))
-		  (!(= @currentAgentAction (CAR $agentActions)))
-		  (!(== (VAL @currentAgentAction) (. @agentAction @actionId @agentLinks .)))
-		  (!(== (VAL @agentAction) (. @actionName @actionParameters .)))
-		
+        (!(= @currentAgentAction (CAR $agentActions)))
+        (!(== (VAL @currentAgentAction) (. @agentAction @actionId @agentLinks .)))
+        (!(== (VAL @agentAction) (. @actionName @actionParameters .)))
+
 		  ;;check that every link has been verified.
 		  (WHILE(?(& (~(NULL @agentLinks)) (EQUAL @actionsTold FALSE)))
-			(!(= @currentLink (CAR @agentLinks)))
-			(!(= @agentLinks (CDR @agentLinks)))
-			(IF(?(~(PlanManager.actionTold (VAL @currentLink))))
+       (!(= @currentLink (CAR @agentLinks)))
+       (!(= @agentLinks (CDR @agentLinks)))
+       (IF(?(~(PlanManager.actionTold (VAL @currentLink))))
 			   (!(= @actionsTold TRUE))   ;;if a link hasn't been verified we stop
 			   )		      
-			)
+       )
 		  (IF(?(EQUAL @actionsTold FALSE))
-		     (!(= $agentActions (CDR $agentActions)))
+       (!(= $agentActions (CDR $agentActions)))
 
-		     (IF(?(EQUAL @actionName undefined))	
-			(=>(PlanManager.actionTold @actionId))
-			(!(= @hasUndefined TRUE))	
-		     
-			ELSE
-			(!(= @n (+ @n 1)))
-			(IF(?(EQUAL @nAction 0))
-			   (!(= @nAction 1))
-
-			   ELSE
+       (IF(?(EQUAL @actionName undefined))	
+         (=>(PlanManager.actionTold @actionId))
+         (!(= @hasUndefined TRUE))	
+
+         ELSE
+         (!(= @n (+ @n 1)))
+         (IF(?(EQUAL @nAction 0))
+          (!(= @nAction 1))
+
+          ELSE
 			   (IF(?(EQUAL @nAction 1))  ;we concatenate to the previous action
-			      (!(= @message (TERM-STRING-CAT @message "and ")))
-			      (!(= @nAction 2))
-			      
+         (!(= @message (TERM-STRING-CAT @message "and ")))
+         (!(= @nAction 2))
+
 			      ELSEIF(?(EQUAL @nAction 2))  ;we start a new sentence, which will be different from the first sentence of the agent. For example it could be "Moving on, i will do this".
 			      (!(Acapela.getSentence continueSentence @continueSentence))
 			      (!(= @message (TERM-STRING-CAT @message ". " @continueSentence)))
@@ -728,12 +972,12 @@
 			(!(= @message (TERM-STRING-CAT @message @actionString)))  
 			(=>(PlanManager.actionTold @actionId))
 			)
-		     )
-		  )
+)
+)
 	    (IF(?(> @n 0))  ;;we verbalize the plan only if we have treated more than one actions or if we treated one action and that action is not 'undefined'. 
-	       (!(Acapela.say @message))	       
-	       (!(= $first FALSE))
-	       )
+        (!(Acapela.say @message))	       
+        (!(= $first FALSE))
+        )
 	    (!(PRINT @message))
 	    
 	    )
@@ -748,7 +992,7 @@
 
 
 
-     )
-  
-  )
+)
+
+)
 )
diff --git a/supervisor/robot/PlannerInterface.opf b/supervisor/robot/PlannerInterface.opf
index ded1fa9..b6b4f83 100644
--- a/supervisor/robot/PlannerInterface.opf
+++ b/supervisor/robot/PlannerInterface.opf
@@ -21,6 +21,130 @@
 	  )
    )
 
+
+ (defop |parseHatpTree|
+ 	:invocation(!(PlannerInterface.parseHatpTree @root $parsedTree))
+ 	:body(
+ 		(?(Robot.name @robotName))
+ 		;(!(Tester.breakpoint))
+ 		(!(== (VAL @root) (TASK
+ 			(TYPE @taskType)
+ 			(TASK-ID @taskId)
+ 			(TASK-NAME @hatpTaskName)
+ 			(ACTORS @actorList)
+ 			(PARAMETERS @parameters)
+ 			(SUBNODES @subNodes)
+ 			)
+ 		))
+ 		(IF(?(PlannerInterface.action hatp (VAL @hatpTaskName) @taskName))   
+ 			(?(PlannerInterface.parameterLinks hatp (VAL @hatpTaskName) @parameterLinks))
+ 			(?(Actions.nParameters (VAL @taskName) @n))
+
+ 			(!(= @i 0))
+ 			(!(= @actionParameters (. .)))
+ 			(WHILE(?(< @i @n))
+ 				(!(= @aLink (CAR @parameterLinks)))
+ 				(!(= @parameterLinks (CDR @parameterLinks)))
+
+ 				(!(PlanManager.getParameter @parameters @aLink @aParameter))
+ 				(!(= @actionParameters (CONS-TAIL (VAL @aParameter) @actionParameters)))
+
+ 				(!(= @i (+ @i 1)))
+ 				)
+ 			)
+ 		
+ 		(!(= @subNodesList (. .)))
+ 		(WHILE(?(~(NULL @subNodes)))
+ 			(!(= @node (CAR @subNodes)))
+ 			(!(= @subNodes (CDR @subNodes)))
+ 			(!(PlannerInterface.parseHatpTree @node @subTree))
+
+ 			(!(= @subNodesList (CONS-TAIL (VAL @subTree) @subNodesList)))
+ 			)
+ 		(!(= $parsedTree (TASK
+ 			 (TYPE (VAL @taskType))
+ 			 (TASK-ID (VAL @taskId))
+ 			 (TASK-NAME (VAL @taskName))
+ 			 (ACTORS (VAL @actorList))
+ 			 (PARAMETERS (VAL @parameters))
+ 			 (SUBNODES (VAL @subNodesList))
+ 			)
+
+ 			))
+ 		)
+	)
+	
+ 	(defop |parseStreams|
+ 		:invocation(!(PlannerInterface.parseStreams @actionList @linkList $streamPlan))
+ 		:body (
+ 			(?(Robot.name @robotName))
+ 			(WHILE(?(~(NULL @actionList)))
+ 				(!(= @currentAction (CAR @actionList))) ;get the current action
+ 				(!(= @actionList (CDR @actionList)))
+ 				(!(== (VAL @currentAction) (ACTION 
+ 					(ACTION-ID @actionId)
+ 					(ACTION-NAME @hatpActionName)
+ 					(ACTOR @actor)
+ 					(START-TIME @startTime)
+ 					(END-TIME @endTime)
+ 					(PARAMETERS @parameters)
+ 					)))
+
+           (IF(?(PlannerInterface.action hatp (VAL @hatpActionName) @actionName))    ;convert the action name from the domain name of hatp to the supervisor domain
+
+           	(?(PlannerInterface.parameterLinks hatp (VAL @hatpActionName) @parameterLinks))
+
+              ;;get the size of the parameters
+              (?(Actions.nParameters (VAL @actionName) @n))
+
+              (!(= @i 0))
+              (!(= @actionParameters (. .)))
+              ;;the parameters of the HATP actions can be in a different order (and also a different number) from the parameters used by supervision. The Db contains a mapping of the indexs.
+              ;;We use this mapping now to create a list of parameters in the correct order
+              
+
+
+              (WHILE(?(< @i @n))
+              	(!(= @aLink (CAR @parameterLinks)))
+ 				(!(= @parameterLinks (CDR @parameterLinks)))
+
+ 				(!(PlanManager.getParameter @parameters @aLink @aParameter))
+ 				(!(= @actionParameters (CONS-TAIL (VAL @aParameter) @actionParameters)))
+              	(!(= @i (+ @i 1)))
+              	)
+
+              ;;now we need to scan the LINK-LIST. Since HATP provides a single link list for all the domain while we want that each actions has a list of preconditions we need to scan this list for every action
+		      ;;so we create a backup to update.
+		      (!(= @tempLinkList (VAL @linkList)))                    
+		      (!(= @actionLinks (. .)))
+		      (WHILE(?(~(NULL @tempLinkList)))
+		      	(!(= @currentLink (CAR @tempLinkList)))
+		      	(!(= @tempLinkList (CDR @tempLinkList)))
+			    (!(== (VAL @currentLink) (LINK @id1 @id2)))  ;the format in HATP is @id2 follows @id1
+			    (IF(?(EQUAL @id2 @actionId))   ;if @id2 is the current action
+			       (!(= @actionLinks (CONS-TAIL (VAL @id1) @actionLinks))) ;we add @id1 to the list of preconditions for the aaction
+			       )
+			    )
+		      
+		      
+		      (!(= @action (. (VAL @actionName) (VAL @actionParameters) .)))  
+		      (!(= @completeAction (. (VAL @action) (VAL @actionId) (VAL @actionLinks) .)))
+		      
+		      (IF(?(|| (EQUAL @actor (VAL @robotName)) (EQUAL @actionName handover)))
+		      	(!(= @robotActions (CONS-TAIL (VAL @completeAction) @robotActions)))
+		      	
+		      	ELSE
+		      	(!(= @humanActions (CONS-TAIL (VAL @completeAction) @humanActions)))
+		      	)
+		      
+		      )
+	)
+
+	(!(= $streamPlan (. (VAL @robotName) ROBOT (VAL @robotActions) .) (. HERAKLES_HUMAN1 HUMAN (VAL @humanActions) .)))
+
+	)
+	)
+
  (defop |getHatpPlan|
    :invocation(!(PlannerInterface.getHatpPlan @goal @parameters))
    :documentation "calls HATP to obtain a plan"
@@ -51,75 +175,10 @@
 	     (!(= @robotActions (. .)))  
 	     (!(= @humanActions (. .)))
 	     
-	     (WHILE(?(~(NULL @actionList)))
-
-		   (!(= @currentAction (CAR @actionList))) ;get the current action
-		   (!(= @actionList (CDR @actionList)))
-		   (!(== (VAL @currentAction) (ACTION 
-					       (ACTION-ID @actionId)
-					       (ACTION-NAME @hatpActionName)
-					       (ACTOR @actor)
-					       (START-TIME @startTime)
-					       (END-TIME @endTime)
-					       (PARAMETERS @parameters)
-					       )))
-		   
-           (IF(?(PlannerInterface.action hatp (VAL @hatpActionName) @actionName))    ;convert the action name from the domain name of hatp to the supervisor domain
-
-              (?(PlannerInterface.parameterLinks hatp (VAL @hatpActionName) @parameterLinks))
-
-              ;;get the size of the parameters
-              (?(Actions.nParameters (VAL @actionName) @n))
-
-              (!(= @i 0))
-              (!(= @actionParameters (. .)))
-              ;;the parameters of the HATP actions can be in a different order (and also a different number) from the parameters used by supervision. The Db contains a mapping of the indexs.
-              ;;We use this mapping now to create a list of parameters in the correct order
-              (WHILE(?(< @i @n))
-                    (!(= @parameterLinksCopy @parameterLinks))
-                    (!(= @parametersCopy @parameters))
-                    (WHILE(?(~(NULL @parameterLinksCopy)))
-                          (!(= @aLink (CAR @parameterLinksCopy)))
-                          (!(= @parameterLinksCopy (CDR @parameterLinksCopy)))
-                          (!(= @aParameter (CAR @parametersCopy)))
-                          (!(= @parametersCopy (CDR @parametersCopy)))
-
-                          (IF(?(EQUAL @aLink @i))
-                             (!(= @actionParameters (CONS-TAIL (VAL @aParameter) @actionParameters)))
-                             )
-                          )
-                    (!(= @i (+ @i 1)))
-                    )
-
-              ;;now we need to scan the LINK-LIST. Since HATP provides a single link list for all the domain while we want that each actions has a list of preconditions we need to scan this list for every action
-		      ;;so we create a backup to update.
-		      (!(= @tempLinkList (VAL @linkList)))                    
-		      (!(= @actionLinks (. .)))
-		      (WHILE(?(~(NULL @tempLinkList)))
-			    (!(= @currentLink (CAR @tempLinkList)))
-			    (!(= @tempLinkList (CDR @tempLinkList)))
-			    (!(== (VAL @currentLink) (LINK @id1 @id2)))  ;the format in HATP is @id2 follows @id1
-			    (IF(?(EQUAL @id2 @actionId))   ;if @id2 is the current action
-			       (!(= @actionLinks (CONS-TAIL (VAL @id1) @actionLinks))) ;we add @id1 to the list of preconditions for the aaction
-			       )
-			    )
-		      
-		   
-		      (!(= @action (. (VAL @actionName) (VAL @actionParameters) .)))  
-		      (!(= @completeAction (. (VAL @action) (VAL @actionId) (VAL @actionLinks) .)))
-
-              (IF(?(|| (EQUAL @actor (VAL @robotName)) (EQUAL @actionName handover)))
-			   (!(= @robotActions (CONS-TAIL (VAL @completeAction) @robotActions)))
-			 
-			   ELSE
-			   (!(= @humanActions (CONS-TAIL (VAL @completeAction) @humanActions)))
-			   )
-			 
-			 )
-	     )
+	 
 		   
 	     )
-	     (=>(PlannerInterface.result (. (. PR2_ROBOT ROBOT (VAL @robotActions) .) (. HERAKLES_HUMAN1 HUMAN (VAL @humanActions) .) .)))  ;we have a result
+	     (=>(PlannerInterface.result (.  .)))  ;we have a result
 	     )
 	  )
    )
diff --git a/supervisor/robot/Verbalization.db b/supervisor/robot/Verbalization.db
new file mode 100644
index 0000000..bc24ad0
--- /dev/null
+++ b/supervisor/robot/Verbalization.db
@@ -0,0 +1,3 @@
+(
+(Verbalization.bridgeName verbalization_oprs_bridge)
+)
\ No newline at end of file
diff --git a/supervisor/robot/Verbalization.opf b/supervisor/robot/Verbalization.opf
new file mode 100644
index 0000000..53ccba0
--- /dev/null
+++ b/supervisor/robot/Verbalization.opf
@@ -0,0 +1,52 @@
+;; -*-Lisp-*-
+;;author: Michelangelo Fiore
+;;this files contains procedures to manage plans in the supervision 
+
+(
+
+(defop	|Greet|
+	:invocation(!(Verbalization.greet))
+	:body (
+		(?(Verbalization.bridgeName @bridgeName))
+		(!(SEND-MESSAGE @bridgeName (Verbalization.request init_speech)))
+
+		)
+	)
+(defop |InitPlan|
+	:invocation(!(Verbalization.initPlan))
+	:body (
+		(?(Verbalization.bridgeName @bridgeName))
+		(!(SEND-MESSAGE @bridgeName (Verbalization.request init_plan)))
+		)
+	)
+(defop |VerbalizeCurrentPlan|
+	:invocation(!(Verbalization.verbalizePlan))
+	:body (
+		(?(Verbalization.bridgeName @bridgeName))
+		(!(SEND-MESSAGE @bridgeName (Verbalization.request verbalize_current_plan)))
+		)
+	)
+(defop |VerbalizeReplan|
+	:invocation(!(Verbalization.verbalizeReplan))
+	:body (
+		(?(Verbalization.bridgeName @bridgeName))
+		(!(SEND-MESSAGE @bridgeName (Verbalization.request replan)))
+		)
+
+	)
+(defop |VerbalizeStartAction|
+	:invocation(!(Verbalization.verbalizeStartAction @actionId))
+	:body (
+		(?(Verbalization.bridgeName @bridgeName))
+		(!(SEND-MESSAGE @bridgeName (Verbalization.request init_execution @actionId)))
+		)
+
+	)
+(defop |VerbalizeEndAction|
+	:invocation(!(Verbalization.verbalizeEndAction @actionId))
+	:body (
+		(?(Verbalization.bridgeName @bridgeName))
+		(!(SEND-MESSAGE @bridgeName (Verbalization.request end_execution @actionId)))
+		)
+	)
+)