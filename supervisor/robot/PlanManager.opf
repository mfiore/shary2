;; -*-Lisp-*-
;;author: Michelangelo Fiore
;;this files contains procedures to manage plans in the supervision 

(



 (defop |addGoal|
   :invocation(!(PlanManager.addGoal @goal @parameters))
   :body (
          (=>(PlanManager.goal @goal @parameters))
          (=>(PlanManager.newGoal TRUE))

          )

   )
 (defop |managePlans|
   :invocation(PlanManager.managePlans)
   :documentation "this is the main procedure of the Plan Manager. It's constantly running, receiving goals from the higher level, asking the planner for plans, breaking them into actions and sending those to the appropriate modules for execution"
   :body (
          (=>(PlanManager.isRunning TRUE))

          ;;get constants for op
          (?(PlanManager.maxPlanningTime @maxPlanningTime))
          (?(PlanManager.maxPlanningFailures @maxPlanningFailures))
          (!(= @maxPlanningFailures 3))
          (?(PlanManager.timeToRetry @timeToRetry))
          (?(Robot.name @robotName))

          (WHILE(?(PlanManager.shouldRun TRUE))
                ;;wait for a new goal or for a stop
                (^(|| (PlanManager.newGoal TRUE) (PlanManager.shouldRun FALSE) (AgentActionMonitor.unexpectedAction @agent)))
                (IF(?(PlanManager.shouldRun FALSE))
                   (!(FAILED))

                   ELSEIF(?(PlanManager.newGoal TRUE))
                   (=>(PlanManager.newGoal FALSE)) ;we are treating the goal so it's no longer new
                   (?(PlanManager.goal @goal @parameters))

                   ELSEIF(?(AgentActionMonitor.unexpectedAction @agent))
                   (~>(AgentActionMonitor.unexpectedAction @agente))
                   (!(PlanManager.chooseGoal @goal @parameters))
                   )

                                        ; (!(PlanManager.tellGoal @goal @parameters))
                (!(= @planningFailures 0))
                (!(= @status notStarted))
                                        ;we loop until the plan is completed or we have reached the maximum number of failures

                (WHILE(?(&
                         (~(EQUAL @status completed))
                         (< @planningFailures @maxPlanningFailures)
                         ))

              ;  (!(Tester.breakpoint))
                      (IF(?(PlanManager.planningModality ROBOT))  ;if robot plans he warns the user that it is planning
                         (IF(?(EQUAL @planningFailures 0))
                                        ; (!(Acapela.say "Let me think of a plan..."))
                            (!(Verbalization.initPlan))


                            ELSE
                                        ; (!(Acapela.say "Let me think of another plan.."))
                            (!(Verbalization.verbalizeReplan))
                            
                            )
                         (^(ELAPSED-TIME (TIME) 1))
                         )


                ;      (IF(?(EQUAL @planningFailures 0))
                 ;        )
                      (=>(PlannerInterface.getPlan (VAL @goal) (VAL @parameters)))   ;;we ask for a plan
                      (^(PlannerInterface.report @report))
                      (~>(PlannerInterface.report (VAL @report)))

                      (IF(?(EQUAL @report ACHIEVED))
                         (!(= @status completed))

                         ELSEIF(?(EQUAL @report NOPLAN))
                         (!(= @planningFailures (+ @planningFailures 1)))

                         ELSEIF(?(EQUAL @report OK))
                         (^(PlannerInterface.result @plan @planTree))
                         (~>(PlannerInterface.result (VAL @plan)))

              
                        (IF(?(EQUAL @planningFailures 0))
                         (!(Verbalization.greet))

                        )       


                         (!(Verbalization.verbalizePlan))
                        ; (!(Tester.breakpoint))
                                        ; (IF(?(&(PlanManager.planningModality ROBOT) (PlanManager.shouldTellPlan TRUE)))  ;if the robot is leader for an agent it will verbalize the plan
                                        ; (!(PlanManager.tellPlan @plan))
                                        ; (!(Acapela.say "Let's start!"))
                                        ; )

                         (IF(?(PlanManager.humanActionManagement TASK))

                            (!(= @monitorActions (. .)))
                            (!(PlanManager.analyzePlanTree @planTree @monitorActions))


                            (!(Tester.breakpoint))

                            (=>(PlanManager.monitorPlan HERAKLES_HUMAN1 @monitorActions))
                     
                      
                            )

                         (WHILE(?(~(NULL @plan)))
                                        ;get agent
                               (!(= @anAgent (CAR @plan)))
                               (!(= @plan (CDR @plan)))
                               (!(== (VAL @anAgent) (. @agentName @agentType @agentActions  .)))
                               (!(ReportManager.sub PlanManager.agentReport  @agentName))
                               (=>(PlanManager.isSub PlanManager.agentReport @agentName))


                               (IF(?(EQUAL @agentType HUMAN))
                                  (IF(?(PlanManager.humanActionManagement LEAF))
                                     (=>(PlanManager.manageHumanActions (VAL @agentName) (VAL @agentActions) ))
                                   
                                     ELSEIF(?(PlanManager.humanActionManagement SEED))
                                     (=>(PlanManager.manageHumanActionsSeed (VAL @agentName) (VAL @agentActions) ))

                                     )
                                  (=>(PlanManager.isManagingHuman (VAL @agentName)))
                                  ELSEIF(?(EQUAL @agentType ROBOT))
                                  (IF(?(EQUAL @agentName @robotName))
                                     (IF(?(PlanManager.selfActionManagement SEED))
                                        (=>(PlanManager.manageRobotActionsSeed (VAL @agentActions)))
                                        ELSE
                                        (=>(PlanManager.manageRobotActions (VAL @agentActions)))
                                        )
                                     )
                                 )
                               )

                               ;;we wait for the report of an agent, for something unexpected to happen or for a stop request.

                               (^(|| (PlanManager.agentReport @agent @report)  (PlanManager.stop) (AgentActionMonitor.unexpectedAction @agent)))

                               (IF(?(AgentActionMonitor.unexpectedAction @agent))
                                  (!(PlanManager.chooseGoal @goal @parameters))

                                  (IF(?(PlanManager.planningModality (VAL @agent) ROBOT))   ;if robot was planning we switch to adapt and inform the user
                                        ; (!(Acapela.say "Do you want to do it in a different way? Let's see if I can help..."))
                                     (=>(PlanManager.planningModality (VAL @agent) ADAPTS))
                                     )

                                  (WHILE(?(PlanManager.isManagingAgent @anAgent))
                                        (=>(PlanManager.stopAgent (VAL @anAgent)))
                                        (^(PlanManager.agentReport (VAL @anAgent) @report))
                                        )
                              
                                  ELSEIF(?(PlanManager.stop))
                              
                                  (WHILE(?(PlanManager.isManagingAgent @anAgent))
                                        (=>(PlanManager.stopAgent (VAL @anAgent)))
                                        (^(PlanManager.agentReport (VAL @anAgent) @report))
                                        )
                                  (!(= @planningFailures @maxPlanningFailures))

                                  ELSEIF(?(PlanManager.agentReport @anAgent "FAILURE"))  ;if one of the agents fail we stop the other agent and replan
                                  (WHILE(?(PlanManager.isManagingAgent @otherAgent))
                                        (=>(PlanManager.stopAgent (VAL @otherAgent)))
                                        (^(PlanManager.agentReport (VAL @otherAgent) @report))
                                        )
                                  (!(= @planningFailures (+ @planningFailures 1)))

                                  ELSEIF(?(PlanManager.agentReport @anAgent "OK"))   ;if one of the agents completes we wait for the other agent positive report
                                  (WHILE(?(PlanManager.isManagingAgent @otherAgent))
                                        (^(|| (PlanManager.agentReport (VAL @otherAgent) @report) (PlanManager.stop) (AgentActionMonitor.unexpectedAction @agent)))

                                        (IF(?(PlanManager.agentReport (VAL @otherAgent) "FAILURE"))
                                           (!(= @planningFailures (+ @planningFailures 1)))

                                           ELSEIF(?(PlanManager.stop))
                                           (IF(?(PlanManager.isManagingAgent (VAL @otherAgent)))
                                              (=>(PlanManager.stopAgent @otherAgent))
                                              (^(PlanManager.agentReport (VAL @otherAgent) @report))
                                              )
                                           (!(= @planningFailures @maxPlanningFailures))

                                           ELSEIF(?(AgentActionMonitor.unexpectedAction @agent))
                                           (!(PRINT "Unexpected Action. Replanning"))
                                           (!(PlanManager.chooseGoal @goal @parameters))
                                           (IF(?(PlanManager.isManagingAgent (VAL @otherAgent)))
                                              (=>(PlanManager.stopAgent @otherAgent))
                                              (^(PlanManager.agentReport (VAL @otherAgent) @report))
                                              )
                                           )
                                        )
                               
                                  )
                               (!(= @status completed))
                               (WHILE(?(PlanManager.agentReport @agent @report))
                                     (~>(PlanManager.agentReport (VAL @agent) (VAL @report)))
                                     (IF(?(~(EQUAL @report "OK")))
                                        (!(= @status notCompleted))
                                        )

                                     )
                               (IF(?(EQUAL @status notCompleted))
                                  (^(ELAPSED-TIME (TIME) @timeToRetry))
                                  )
                               (!(PlanManager.clean))
                               )
                         )
                      (IF(?(EQUAL @status completed))
                         (=>(PlanManager.report "OK"))
                                        ; (!(Acapela.say "Task completed"))

                         ELSE
                                        ; (!(Acapela.say "Abandoning Task"))
                         (=>(PlanManager.report FAILED))
                         )
                      )

                (~>(PlanManager.isRunning TRUE))
                )
          )

 (defop |clean|
   :invocation (!(PlanManager.clean))
   :documentation "used to clean facts at the end of a plan"
   :body (

        (!(Tester.breakpoint))
          (WHILE(?(PlanManager.actionReport @action @report))
                (~>(PlanManager.actionReport (VAL @action) (VAL @report)))
                )

          (WHILE(?(PlanManager.isSub PlanManager.agentReport @agent))
                (!(ReportManager.unsub PlanManager.agentReport (VAL @agent)))
                (~>(PlanManager.isSub PlanManager.agentReport (VAL @agent)))
                )
          (WHILE(?(PlanManager.actionReport @link @report))
                (~>(PlanManager.actionReport (VAL @link) (VAL @report)))
                )
          (WHILE(?(PlanManager.stopAgent @agent))
                (~>(PlanManager.stopAgent (VAL @agent)))
                )
          (WHILE(?(AgentActionMonitor.unexpectedAction @agent))
                (~>(AgentActionMonitor.unexpectedAction @agent))
                )

          (~>(PlanManager.stop))

          )

   )

 (defop |manageHumanActionsSeed|
    :invocation(PlanManager.manageHumanActionsSeed @actions)
    :body (
         (!(= @oldObject NULL)) ;;this is just used for the getactionstring procedure, which gives different strings when we are doing more than one action with the same object.

         (IF(?(~(NULL @actions)))
            (=>(PlanManager.isManagingAgent @agent))
            (!(= @tempActions (VAL @actions)))
            ;;loop until every action has been executed or we receive a stop command
            (WHILE(?(&
                     (~(NULL @actions))
                     (~(PlanManager.agentReport (VAL @agent) @report))
                     ))
                  (!(= @action (CAR @actions)))
                  (!(= @actions (CDR @actions)))
                  (!(== (VAL @action) (. @actionToExecute @actionId @actionLinks .)))

                  (!(== (VAL @actionToExecute) (. @actionName @actionParameters .)))

                  (!(PlanManager.getActionString @actionName @actionParameters 0 @oldObject @followsHandover @actionString))
               

                  ;;movement actions and other actions are handled differently for now. Should change when we switch to TOASTER completely
                  (IF(?(Action.type (VAL @actionName) MOVEMENT))
                     (!(= @location (CAR(CDR @actionParameters))))
                     (=>(AgentActionMonitor.monitorMove @agent @location @actionId))

                     ELSE
                     ;;necessary to understand which sphere is linked with the action
                     (?(Actions.monitorParameter (VAL @actionName) @n))
                     (!(= @i 0))
                     (!(= @tempActionParameters (VAL @actionParameters)))
                     (WHILE(?(~(> (VAL @i) (VAL @n))))
                           (!(= @target (CAR @tempActionParameters)))
                           (!(= @tempActionParameters (CDR @tempActionParameters)))
                           (!(= @i (+ (VAL @i) 1)))
                           )

                     ;;get the corresponding sphereId (this should exist since inferences are calculated independently from this module)
                     (!(AgentActionMonitor.getSphereId (VAL @agent) (VAL @target) (VAL @actionName) @sphereId))

                     ;;monitor the action
                     (=>(AgentActionMonitor.monitorAction @agent @actionId @actionName @actionParameters @sphereId))
                     )
                  (^(|| (AgentActionMonitor.actionCompleted (VAL @agent) (VAL @actionId))
                     (PlanManager.stopAgent (VAL @agent))))  ;wait until we complete the action or we have a stopAgent (unexpectedAction is handled in planmanager)

                  (IF(?(AgentActionMonitor.actionCompleted (VAL @agent) (VAL @actionId)))
                     (~>(AgentActionMonitor.actionCompleted (VAL @agent) (VAL @actionId)))
                     (=>(PlanManager.actionReport @actionId "OK"))

                     ELSEIF(?(PlanManager.stopAgent (VAL @agent)))
                     (~>(PlanManager.stopAgent (VAL @agent)))
                     (=>(PlanManager.agentReport @agent "STOPPED"))
                     (~>(PlanManager.isManagingAgent (VAL @agent)))

                     (!(FAILED))
                     )

                  )
            (=>(PlanManager.agentReport @agent "OK"))
            (~>(PlanManager.isManagingAgent (VAL @agent)))
            )
      )

  )


(defop |manageRobotActionsSeed|
   :invocation(PlanManager.manageRobotActionsSeed @actions)
   :body (
      (?(PlanManager.seedBridge @seedName))
      (!(SEND-MESSAGE @seedName (PlanManager.seedPlan (. PR2_ROBOT ROBOT @actions .))))

   ;;(!(SEND-MESSAGE @seedName (PlanManager.seedPlan (. PR2_ROBOT ROBOT (. (. (. take (. PR2_ROBOT BRACKET_1 .) .) 324 (. .) .) .) .))))
      (!(= @seedReport (TERM-STRING-CAT @seedName ".report")))
      (!(= @seedReport (MAKE-ATOM @seedReport)))

      (?(Robot.name @robotName))

      (!(= @done FALSE))
      (WHILE(?(EQUAL @done FALSE))
        (=>(PlanManager.isManagingAgent robot))

       ;(!(SEND-MESSAGE @seedName (Seed.getAction)))
        (^(AttentionalInterface.execute @seedAction @seedActionParameters @returnDest))
      ;;execute action
      (IF(?(EQUAL @done FALSE)))
      (!(ExecutionManager.getFreeId @executionId))
      (!(ReportManager.sub ExecutionManager.report @executionId))

     (IF(?(EQUAL @seedAction go))
	 (!(= @realActionParameters (CONS-TAIL go @seedActionParameters)))
	 (!(= @realAction simpleGo))
	 
	 ELSEIF(?(EQUAL @seedAction search))
	 (!(= @realActionParameters (CONS-TAIL go @seedActionParameters)))
	 (!(= @realAction simpleGo))

	 ELSE
	 (!(= @realActionParameters (VAL @seedActionParameters)))
	 (!(= @realAction (VAL @seedAction)))
	 )

      (=>(ExecutionManager.execute @realAction @realActionParameters @executionId))

 
      (^(|| (ExecutionManager.report (VAL @executionId) @report) (PlanManager.stopAgent robot) (AttentionalInterface.stop)))
      (IF(?(ExecutionManager.isActive execution SIM))
        (^(ELAPSED-TIME (TIME) 10))
        )
      (IF(?(ExecutionManager.report (VAL @executionId) @report))
         (!(ReportManager.unsub ExecutionManager.report @executionId))
         (IF(?(~(EQUAL @report "OK")))
            (=>(PlanManager.agentReport robot "FAILURE"))
            (~>(PlanManager.isManagingAgent robot))
            (!(FAILED))
            
            ELSE
            (!(SEND-MESSAGE (VAL @returnDest) (AttentionalInterface.report OK)))
            (^(AttentionalInterface.isDone @done))

            )

        ;(IF(?(~(EQUAL @actionId -1)))
        ;(=>( PlanManager.actionReport @actionId "OK"))
        ;)

      ELSE
      (=>(ExecutionManager.stop @executionId))
      (^(ExecutionManager.report (VAL @executionId) @report))
      (!(ReportManager.unsub ExecutionManager.report @executionId))
      (IF(?(AttentionalInterface.stop))
        (~>(AttentionalInterface.stop))
        ELSE
        (=>(PlanManager.agentReport robot "STOPPED"))
        (~>(PlanManager.isManagingAgent robot))
        (!(FAILED))
        )
      )
      )


    (!(ReportManager.publish PlanManager.agentReport robot "OK"))


    (~>(PlanManager.isManagingAgent robot))
    )
)

 (defop |findStart|
   :invocation(!(PlanManager.findStart @tree $startId))
   :body (
          (?(Robot.name @robotName))
          (!(== (VAL @tree) (TASK
                             (TYPE @taskType)
                             (TASK-ID @taskId)
                             (TASK-NAME @taskName)
                             (ACTORS @actorList)
                             (PARAMETERS @parameters)
                             (SUBNODES @subNodes)
                             (LINK-LIST @linkList)
                             )
                ))

          (IF(?(~(NULL @subNodes)))
             (!(= @node (CAR @subNodes)))
             (!(PlanManager.findStart @node $startId))

             ELSE
             (!(= $startId @taskId))
             )
          )
   )

 (defop |findEnd|
   :invocation(!(PlanManager.findEnd @tree $endId))
   :body (
          (?(Robot.name @robotName))
          (!(== (VAL @tree) (TASK
                             (TYPE @taskType)
                             (TASK-ID @taskId)
                             (TASK-NAME @taskName)
                             (ACTORS @actorList)
                             (PARAMETERS @parameters)
                             (SUBNODES @subNodes)
                             (LINK-LIST @linkList)
                             )
                ))

          (IF(?(~(NULL @subNodes)))
             (!(= @node (LAST @subNodes)))
             (!(PlanManager.findEnd @node $endId))
             ELSE
             (!(= $endId @taskId))
             )
          )
   )

 (defop |addVerbalization|
   :invocation(!(PlanManager.addVerbalization @tree @taskId))
   :body (
                                        ;  (!(Tester.breakpoint))
          (!(PlanManager.findStart @tree @startId))
          (!(PlanManager.findEnd @tree @endId))
          (=>(PlanManager.verbalization start (VAL @taskId) @startId))
          (=>(PlanManager.verbalization end (VAL @taskId) @endId))
          ; (IF(?(PlanManager.verbalization end (VAL @taskId) @nodeList))
          ;    (!(= @nodeList (CONS-TAIL (VAL @endId) @nodeList)))
          ;    (=>(PlanManager.verbalization end (VAL @taskId) @nodeList))

          ;    ELSE
          ;    (=>(PlanManager.verbalization end (VAL @taskId) (. @endId .)))
          ;    )
          (=>(PlanManager.wasRobot TRUE))
          (~>(PlanManager.lastRobotLeaf @any))
          (=>(PlanManager.lastRobotLeaf @endId))
          )
   )


 (defop |linkSubNodes|
   :invocation(!(PlanManager.linkSubNodes @tree @id))
   :body (
          (?(Robot.name @robotName))
          (!(== (VAL @tree) (TASK
                             (TYPE @taskType)
                             (TASK-ID @taskId)
                             (TASK-NAME @taskName)
                             (ACTORS @actorList)
                             (PARAMETERS @parameters)
                             (SUBNODES @subNodes)
                             (LINK-LIST @linkList)
                             )
                ))
          (IF(?(NULL @subNodes))
             (=>(PlanManager.subNodeLink @id @taskId))
             ELSE
             (WHILE(?(~(NULL @subNodes)))
                   (!(= @sn (CAR @subNodes)))
                   (!(= @subNodes (CDR @subNodes)))
                   (!(PlanManager.linkSubNodes @sn @id))
             )
          )
   )
   )

 (defop |getAllLeaves|
    :invocation(!(PlanManager.getAllLeaves @tree $leaves))
    :body (
      (?(Robot.name @robotName))
       (!(== (VAL @tree) (TASK
        (TYPE @taskType)
        (TASK-ID @taskId)
        (TASK-NAME @taskName)
        (ACTORS @actorList)
        (PARAMETERS @parameters)
        (SUBNODES @subNodes)
        (LINK-LIST @linkList)
        )
       ))
       (!(= @tempLeaves (. .)))
       (IF(?(EQUAL @taskType ACTION))
        (!(= $leaves  (. @tree .)))
        ;(!(= $leaves (CONS-TAIL (VAL @tree) @tempLeaves)))
        
        ELSE
        (!(= @tempLeaves (. .)))
        (WHILE(?(~(NULL @subNodes)))
          (!(= @node (CAR @subNodes)))
          (!(= @subNodes (CDR @subNodes)))
          (!(PlanManager.getAllLeaves @node @newLeaves))
          (!(= @tempLeaves (LIST-UNION (VAL @newLeaves) (VAL @tempLeaves))))
          )
          (!(= $leaves @tempLeaves)) 
        )

       )
    )

(defop |checkTreeLinks|
  :invocation(!(PlanManager.checkTreeLinks @tree $isLinkedToRobotReturn))
  :body (
      (?(Robot.name @robotName))
    (!(PlanManager.getAllLeaves @tree @leaves))

    (!(= @isLinkedToRobotTemp FALSE))
    (IF(?(~(NULL @leaves)))
      (!(= @middleSonListLength (LENGTH @leaves)))
      (!(= @middleSonListLength (- @middleSonListLength 1)))
      (!(= @i 1))
      (WHILE(?(< @i @middleSonListLength))
        (!(= @i (+ @i 1)))
        (!(= @aLeaf (CAR @leaves)))
        (!(= @leaves (CDR @leaves)))
        (!(== (VAL @aLeaf) (TASK
          (TYPE @taskType)
          (TASK-ID @taskId)
          (TASK-NAME @taskName)
          (ACTORS @actorList)
          (PARAMETERS @parameters)
          (SUBNODES @subNodes)
          (LINK-LIST @linkList)
          )
        ))

        (WHILE(?(& 
          (~(NULL @linkList)) 
          (EQUAL @isLinkedToRobotTemp FALSE) 
           
          ))
          (!(= @aLink (CAR @linkList)))
          (!(= @linkList (CDR @linkList)))
          (IF(?(PlanManager.actorAction (VAL @robotName) (VAL @aLink)))
            (!(= @isLinkedToRobotTemp TRUE))
            )       
          )
        )
      ) 
      (!(= $isLinkedToRobotReturn @isLinkedToRobotTemp))
    )

  )
; (defop |checkTreeLinks|
;   :invocation (!(PlanManager.checkTreeLinks @tree @isMiddleSon $isLinkedToRobotReturn))
;   :body (
;            (?(Robot.name @robotName))
;            (!(== (VAL @tree) (TASK
;                             (TYPE @taskType)
;                             (TASK-ID @taskId)
;                             (TASK-NAME @taskName)
;                             (ACTORS @actorList)
;                             (PARAMETERS @parameters)
;                             (SUBNODES @subNodes)
;                             (LINK-LIST @linkList)
;                             )
;            ))
;            (!(= @isLinkedToRobotTemp FALSE))
;            (!(Tester.breakpoint))

;            (IF(?(&(EQUAL @taskType ACTION) (EQUAL @isMiddleSon TRUE)))
;             (WHILE(?(&(~(NULL @linkList) (EQUAL @isLinkedToRobotTemp FALSE))))
;               (!(= @aLink (CAR @linkList)))
;               (!(= @linkList (CDR @linkList)))
;               (IF(?(PlanManager.actorAction (VAL @robotName) (VAL @aLink)))
;                 (!(= @isLinkedToRobotTemp TRUE))
;                 )
;               )

          
;             ELSEIF(?(EQUAL @taskType METHOD))
;             (IF(?(~(NULL @subNodes)))
;               ;;cut first and last son
;               (!(= @firstSon (CAR @subNodes)))
;               (!(= @subNodes (CDR @subNodes)))
;               (!(PlanManager.checkTreeLinks @firstSon FALSE @isLinkedToRobotTemp))
;               (IF(?(EQUAL @isLinkedToRobotTemp FALSE))
;                 (!(= @middleSonListLength (LENGTH @subNodes)))
;                 (!(= @middleSonListLength (- @middleSonListLength 1)))
;                 (!(= @i 0))
;                 (WHILE(?(&(< @i @middleSonListLength)(EQUAL @isLinkedToRobotTemp FALSE)))
;                   (!(= @middleSon (CAR @subNodes)))
;                   (!(= @subNodes (CDR @subNodes)))
;                   (!(PlanManager.checkTreeLinks @middleSon TRUE @isLinkedToRobotTemp))                

;                   (!(= @i (+ @i 1)))
;                   )
;                 (IF(?(EQUAL @isLinkedToRobotTemp FALSE))
;                   (!(= @lastSon (CAR @subNodes)))
;                   (!(= @subNodes (CDR @subNodes)))
;                   (!(PlanManager.checkTreeLinks @lastSon FALSE @isLinkedToRobotTemp))
;                   )

;                 )
;                 )
;               (!(= $isLinkedToRobotRetun @isLinkedToRobotTemp))

;               )
;            )
;         )


(defop |getKnowledgeParameters|
  :invocation(!(PlanManager.getKnowledgeParameters @taskName @parameters $returnParameters))
  :body (
    (!(= @knowledgeParameters (. .)))
    (?(Actions.knowledgeParametersType (VAL @taskName) @knowledgeParametersTypes))
    (IF(?(~(NULL @parameters)))
     (!(= @tempActionParameters @parameters))
                     (!(= @aParameter (CAR @tempActionParameters)))  ;skip the actor parameter.
                     (!(= @tempActionParameters (CDR @tempActionParameters)))
                     )
    (WHILE(?(~(NULL @knowledgeParametersTypes)))
      (!(= @kpt (CAR @knowledgeParametersTypes)))
      (!(= @knowledgeParametersTypes (CDR @knowledgeParametersTypes)))
      (!(= @aParameter (CAR @tempActionParameters)))
      (!(= @tempActionParameters (CDR @tempActionParameters)))

      (?(Object.type (VAL @aParameter) @class @type))
      (IF(?(EQUAL @kpt CLASS))
       (!(= @aKnowledgeParameter @class))

       ELSEIF(?(EQUAL @kpt TYPE))
       (!(= @aKnowledgeParameter @type))

       ELSE
       (!(= @aKnowledgeParameter @aParameter))
       )
      (!(= @knowledgeParameters (CONS-TAIL (VAL @aKnowledgeParameter) @knowledgeParameters)))
      )
    (!(= @knowledgeParameters (CONS-TAIL (VAL @taskName) @knowledgeParameters)))
    (!(= $returnParameters @knowledgeParameters))
    )
  )
(defop |analyzePlanTree|
  :invocation(!(PlanManager.analyzePlanTree @tree $monitorList))
  :documentation "For now this doesn't work for actions with more than one human"
  :body (
         (?(Robot.name @robotName))
         (!(== (VAL @tree) (TASK
                            (TYPE @taskType)
                            (TASK-ID @taskId)
                            (TASK-NAME @taskName)
                            (ACTORS @actorList)
                            (PARAMETERS @parameters)
                            (SUBNODES @subNodes)
                            (LINK-LIST @linkList)
                            )
               ))




         (!(= @hasRobot FALSE))
         (!(= @humanList (. .)))
         (!(= @tempMonitorList (VAL $monitorList)))
         (WHILE(?(~(NULL @actorList)))
               (!(= @actor (CAR @actorList)))
               (!(= @actorList (CDR @actorList)))

               (IF(?(EQUAL @actor (VAL @robotName)))
                  (!(= @hasRobot TRUE))

                  ELSE
                  (!(= @hasHuman TRUE))
                  (!(= @humanList (CONS-TAIL (VAL @actor) @humanList)))
                  )
               )
         (IF(?(&(EQUAL @hasRobot TRUE) (EQUAL @hasHuman TRUE)))
             ;(!(PlanManager.addVerbalization @tree @taskId))
            (WHILE(?(~(NULL @subNodes)))
              (!(= @subNode (CAR @subNodes)))
              (!(= @subNodes (CDR @subNodes)))
              (!(PlanManager.analyzePlanTree @subNode  @tempMonitorList))
              )

            ELSEIF(?(EQUAL @hasRobot TRUE))
            (!(PlanManager.addVerbalization @tree @taskId))

            ELSEIF(?(EQUAL @hasHuman TRUE))
            (!(= @ok TRUE))
            (WHILE(?(&(~(NULL @humanList)) (EQUAL @ok TRUE)))
                  (!(= @anHuman (CAR @humanList)))
                  (!(= @humanList (CDR @humanList)))

                  (!(PlanManager.getKnowledgeParameters (VAL @taskName) @parameters @knowledgeParameters))
                  (!(DatabaseInterface.find (AGENT-STATEMENT (VAL @robotName) (VAL @anHuman) (VAL @knowledgeParameters) PRACTICAL) @result))
                  (IF(?(EQUAL @result (. FALSE .)))
                     (!(= @ok FALSE))
                     )
                  )

            (IF(?(EQUAL @ok TRUE))
               (!(PlanManager.checkTreeLinks (VAL @tree) @isLinkedToRobot))
              (IF(?(EQUAL @isLinkedToRobot FALSE))

               (!(= @tempMonitorList (CONS-TAIL (. (VAL @taskName) (VAL @taskId) (VAL @parameters) .) @tempMonitorList)))

               (IF(?(PlanManager.wasRobot TRUE))
                (?(PlanManager.lastRobotLeaf @robotTaskId))
                (=>(PlanManager.taskLink (VAL @taskId) (VAL @robotTaskId)))
                )
               (!(PlanManager.linkSubNodes (VAL @tree) @taskId))
               )
               ELSE
               (WHILE(?(~(NULL @subNodes)))
                     (!(= @subNode (CAR @subNodes)))
                     (!(= @subNodes (CDR @subNodes)))
                     (!(PlanManager.analyzePlanTree @subNode  @tempMonitorList))
                     )
               )
            (~>(PlanManager.wasRobot TRUE))
            (~>(PlanManager.lastRobotLeaf @any))

            )

         (!(= $monitorList @tempMonitorList))

         )
  )

(defop |getParameter|
  :invocation(!(PlanManager.getParameter @parameters @n $return))
  :body (

         (!(= @i 0))
         (WHILE(?(~(> @i @n)))
               (!(= @p (CAR @parameters)))
               (!(= @parameters (CDR @parameters)))

               (!(= @i (+ @i 1)))
               )
         (!(= $return @p))
         )
  )

(defop |monitorPlan|
  :invocation (PlanManager.monitorPlan @agent @taskList)
  :body (
         (?(Robot.name @robotName))
          (=>(PlanManager.isManagingAgent @agent))

         (!(Tester.breakpoint))
         (WHILE(?(&(~(NULL @taskList )) (~(PlanManager.stopAgent (VAL @agent)))))
               (!(= @task (CAR @taskList)))
               (!(= @taskList (CDR @taskList)))
               (!(== (VAL @task) (. @actionName @actionId @actionParameters .)))

               (!(= @monitorParameterList (. .)))
               (!(= @hasSpecificParameters FALSE))
               (IF(?(Actions.monitorInformationParameters (VAL @actionName) @monitorParametersId))
                  (!(= @hasSpecificParameters TRUE))
                  (WHILE(?(~(NULL @monitorParametersId)))
                        (!(= @aMonitorParameterId (CAR @monitorParametersId)))
                        (!(= @monitorParametersId (CDR @monitorParametersId)))

                        (!(PlanManager.getParameter @actionParameters @aMonitorParameterId @aParameter))
                        (!(= @monitorParameterList (CONS-TAIL (VAL @aParameter) @monitorParameterList)))
                        )
                  )
               (IF(?(EQUAL @hasSpecificParameters TRUE))
                  (?(Actions.monitorInformation (VAL @actionName) (VAL @monitorParameterList) @taskPostconditions @expectedTime))

                  ELSE
                  (?(Actions.monitorInformation (VAL @actionName) @taskPostconditions @expectedTime))
                  )
               (!(= @postConditionsFacts (. .)))
               (WHILE(?(~(NULL @taskPostconditions)))
                     (!(= @aPostcondition (CAR @taskPostconditions)))
                     (!(= @taskPostconditions (CDR @taskPostconditions)))

                     (!(== (VAL @aPostcondition) (SUBJECT TYPE @sType @conditionSubject PREDICATE @predicate VALUE TYPE @vType @conditionValue)))
                     (IF(?(EQUAL @sType SYMBOL))
                        (!(= @subject @conditionSubject))

                        ELSE
                        (!(PlanManager.getParameter @actionParameters @conditionSubject @subject))
                        )
                     (IF(?(EQUAL @vType SYMBOL))
                        (!(= @value @conditionValue))

                        ELSE
                        (!(PlanManager.getParameter @actionParameters @conditionValue @value))
                        )
                     (!(= @postConditionsFacts (CONS-TAIL (AGENT-STATEMENT (VAL @robotName) (VAL @subject) (VAL @predicate) (VAL @value)) @postConditionsFacts)))

                     )

               (WHILE(?(PlanManager.taskLink (VAL @actionId) @link))
                     (^(||(PlanManager.actionReport (VAL @link) @report) (PlanManager.stopAgent (VAL @agent))))
                     (~>(PlanManager.taskLink (VAL @actionId) (VAL @link)))
                     )

               (!(DatabaseInterface.addMonitor @postConditionsFacts (PlanManager.taskAchieved) @result))

               (!(Verbalization.verbalizeStartAction @actionId))

               (^(||(PlanManager.taskAchieved) (ELAPSED-TIME (TIME) (VAL @expectedTime) ) (PlanManager.stopAgent (VAL @agent))))
               (IF(?(PlanManager.taskAchieved))
                  (~>(PlanManager.taskAchieved))
                  (=>(PlanManager.actionReport (VAL @actionId) "OK"))
                  (!(Verbalization.verbalizeEndAction @actionId))
                  (!(PlanManager.getKnowledgeParameters @actionName @actionParameters @knowledgeParameters))
                  (!(DatabaseInterface.findList (AGENT-STATEMENT @robotName @agent @knowledgeParameters @l) (. @l .) @result))
                  (!(= @oldLevel (CAR(CAR @result))))

                  (!(DatabaseInterface.set (AGENT-STATEMENT @robotName @agent @knowledgeParameters PRACTICAL) @result))
                  (!(SEND-MESSAGE DatabaseInterface (Database.nfacts 2)))
                  (!(SEND-MESSAGE DatabaseInterface (DatabaseInterface.operation updateKnowledge remove (AGENT-STATEMENT @robotName @agent @knowledgeParameters @oldLevel))))
                  (!(SEND-MESSAGE DatabaseInterface (DatabaseInterface.operation updateKnowledge add (AGENT-STATEMENT @robotName @agent @knowledgeParameters PRACTICAL))))

                  (WHILE(?(PlanManager.subNodeLink (VAL @actionId) @subNodeLink))
                        (=>(PlanManager.actionReport (VAL @subNodeLink) "OK"))
                        (~>(PlanManager.subNodeLink (VAL @actionId) (VAL @subNodeLink)))
                        )

                  ELSEIF(?(PlanManager.stopAgent (VAL @agent)))
                  (~>(PlanManager.stopAgent (VAL @agent)))
                  (=>(PlanManager.agentReport (VAL @agent) "STOPPED"))
                  (!(FAILED))

                  ELSE
                  (=>(PlanManager.agentReport (VAL @agent) "FAILURE"))
                  (!(FAILED))
                  )
               )
         (~>(PlanManager.isManagingAgent (VAL @agent)))
         )
  )

(defop |manageHumanActions|
  :invocation (PlanManager.manageHumanActions @agent @actions)
  :documentation "Procedure to handle the human actions into a plan. When the agent has an empty action list it just reports an okay. "
  :body (
         (!(= @oldObject NULL)) ;;this is just used for the getactionstring procedure, which gives different strings when we are doing more than one action with the same object.

         (IF(?(~(NULL @actions)))
            (=>(PlanManager.isManagingAgent @agent))
            (!(= @tempActions (VAL @actions)))
            ;;loop until every action has been executed or we receive a stop command
            (WHILE(?(&
                     (~(NULL @actions))
                     (~(PlanManager.agentReport (VAL @agent) @report))
                     ))
                  (!(= @action (CAR @actions)))
                  (!(= @actions (CDR @actions)))
                  (!(== (VAL @action) (. @actionToExecute @actionId @actionLinks .)))

                  ;;wait until the linked action is completed or there is a problem
                  (WHILE(?(~(NULL @actionLinks)))
                        (!(= @currentLink (CAR @actionLinks)))
                        (!(= @actionLinks (CDR @actionLinks)))
                        (^(|| (PlanManager.actionReport (VAL @currentLink) @report) (PlanManager.stopAgent (VAL @agent))))

                        (IF(?(PlanManager.stopAgent (VAL @agent))) ;;problem: we received a stop
                           (~>(PlanManager.stopAgent (VAL @agent)))
                           (!(AgentActionMonitor.cancelActions (VAL @agent)))
                           (=>(PlanManager.agentReport @agent "STOPPED"))
                           (~>(PlanManager.isManagingAgent (VAL @agent)))
                           (!(FAILED))
                           )
                        (IF(?(~(EQUAL @report "OK")))  ;problem: the linked action failed
                           (=>(PlanManager.agentReport (VAL @agent) "FAILURE"))
                           (~>(PlanManager.isManagingAgent (VAL @agent)))

                           (!(FAILED))
                           )
                        )
                  (!(== (VAL @actionToExecute) (. @actionName @actionParameters .)))

                  (!(PlanManager.getActionString @actionName @actionParameters 0 @oldObject @followsHandover @actionString))
                  (IF(?(PlanManager.planningModality (VAL @agents) ROBOT))  ;if robot plans then he tells the human he should execute the action
                     (!(Acapela.say @actionString))
                     )
                  (!(PRINT "HUMAN: "))
                  (!(PRINT @actionString))
                  (!(PRINT @actionId))

                  ;;movement actions and other actions are handled differently for now. Should change when we switch to TOASTER completely
                  (IF(?(Action.type (VAL @actionName) MOVEMENT))
                     (!(= @location (CAR(CDR @actionParameters))))
                     (=>(AgentActionMonitor.monitorMove @agent @location @actionId))

                     ELSE
                     ;;necessary to understand which sphere is linked with the action
                     (?(Actions.monitorParameter (VAL @actionName) @n))
                     (!(= @i 0))
                     (!(= @tempActionParameters (VAL @actionParameters)))
                     (WHILE(?(~(> (VAL @i) (VAL @n))))
                           (!(= @target (CAR @tempActionParameters)))
                           (!(= @tempActionParameters (CDR @tempActionParameters)))
                           (!(= @i (+ (VAL @i) 1)))
                           )

                     ;;get the corresponding sphereId (this should exist since inferences are calculated independently from this module)
                     (!(AgentActionMonitor.getSphereId (VAL @agent) (VAL @target) (VAL @actionName) @sphereId))

                     ;;monitor the action
                     (=>(AgentActionMonitor.monitorAction @agent @actionId @actionName @actionParameters @sphereId))
                     )
                  (^(|| (AgentActionMonitor.actionCompleted (VAL @agent) (VAL @actionId))
                     (PlanManager.stopAgent (VAL @agent))))  ;wait until we complete the action or we have a stopAgent (unexpectedAction is handled in planmanager)

                  (IF(?(AgentActionMonitor.actionCompleted (VAL @agent) (VAL @actionId)))
                     (~>(AgentActionMonitor.actionCompleted (VAL @agent) (VAL @actionId)))
                     (=>(PlanManager.actionReport @actionId "OK"))

                     ELSEIF(?(PlanManager.stopAgent (VAL @agent)))
                     (~>(PlanManager.stopAgent (VAL @agent)))
                     (=>(PlanManager.agentReport @agent "STOPPED"))
                     (~>(PlanManager.isManagingAgent (VAL @agent)))

                     (!(FAILED))
                     )

                  )
            (=>(PlanManager.agentReport @agent "OK"))
            (~>(PlanManager.isManagingAgent (VAL @agent)))
            )
         )
  )
(defop |manageRobotActions|
  :invocation(PlanManager.manageRobotActions @actions)
  :documentation "Manages the execution of the robot actions"
  :body (
         (!(= @oldObject NULL))
         (?(Robot.name @robotName))
     ;    (!(Tester.breakpoint))

         (WHILE(?(~ (NULL @actions)) )
               (=>(PlanManager.isManagingAgent robot))
               (!(= @currentAction (CAR @actions)))
               (!(= @actions (CDR @actions)))

               (!(== (VAL @currentAction) (. @actionToExecute @actionId @actionLinks .)))
               ;;wait for previous linked actions to be completed or to fail


               (WHILE(?(~(NULL @actionLinks)))
                     (!(= @currentLink (CAR @actionLinks)))
                     (IF(?(~(PlanManager.actionReport (VAL @currentLink) @report)))
                        (!(PRINT "Robot waits for action"))
                        (!(PRINT @currentLink))
                        )
                     (^(|| (PlanManager.actionReport (VAL @currentLink) @report)
                        (PlanManager.stopAgent robot)))

                     (IF(?(PlanManager.stopAgent robot))
                        (=>(PlanManager.agentReport robot "STOPPED"))
                        (~>(PlanManager.isManagingAgent robot))
                        (!(FAILED))
                        )
                     (IF(?(~(PlanManager.actionReport (VAL @currentLink) "OK")))
                        (=>(PlanManager.agentReport robot "FAILURE"))
                        (~>(PlanManager.isManagingAgent robot))
                        (!(FAILED))
                        )
                     (!(= @actionLinks (CDR @actionLinks)))
                     )
               (!(== (VAL @actionToExecute) (. @actionName @actionParameters .)))

               (IF(?(EQUAL @actionName undefined))
                  (=>(PlanManager.actionReport (VAL @actionId) "OK"))

                  ELSE
                                        ;verbalize action
                  (!(PlanManager.getActionString @actionName @actionParameters 0 @oldObject @followsHandover @actionString))
                  (!(Acapela.say @actionString))
                  (!(PRINT "ROBOT: "))
                  (!(PRINT @actionString))
                                        ;execute action
                  (!(ExecutionManager.getFreeId @executionId))
                  (!(ReportManager.sub ExecutionManager.report @executionId))



                  (!(= @actionParameters (CDR @actionParameters))) ;cut the agent parameter


                  (IF(?(PlanManager.verbalization start @taskId (VAL @actionId)))
                     (!(Verbalization.verbalizeStartAction @taskId))
                     )
                  (=>(ExecutionManager.execute @actionName @actionParameters @executionId))
                  (^(|| (ExecutionManager.report (VAL @executionId) @report) (PlanManager.stopAgent robot)))
                  (^(ELAPSED-TIME (TIME) 1))
                  (IF(?(ExecutionManager.report (VAL @executionId) @report))
                     (!(ReportManager.unsub ExecutionManager.report @executionId))
                     (IF(?(~(EQUAL @report "OK")))
                        (=>(PlanManager.agentReport robot "FAILURE"))
                        (~>(PlanManager.isManagingAgent robot))
                        (=>(PlanManager.failedAction @actionId))
                        (!(FAILED))
                        )

                     (=>(PlanManager.actionReport @actionId "OK"))
                     (IF(?(PlanManager.verbalization end @taskId (VAL @actionId)))
                   ;     (!(Tester.breakpoint))
                        (!(Verbalization.verbalizeEndAction @taskId))
                        )

                     ELSE
                     (=>(ExecutionManager.stop @executionId))
                     (^(ExecutionManager.report (VAL @executionId) @report))
                     (!(ReportManager.unsub ExecutionManager.report @executionId))
                     (=>(PlanManager.agentReport robot "STOPPED"))
                     (~>(PlanManager.isManagingAgent robot))
                     (!(FAILED))
                     )
                  )
               )
         (!(ReportManager.publish PlanManager.agentReport robot "OK"))


         (~>(PlanManager.isManagingAgent robot))
         )

  )

(defop |manageOtherRobotActions|
  :invocation(PlanManager.manageOtherRobotActions @robot @actions)
  :documentation "manages actions for other robot agents"
  :body (
         (?(Connector.robot (VAL @robot) @robotKernel))
         (?(Connector.robot SELF @selfKernel))
         (IF(?(~(NULL @actions)))
            (=>(PlanManager.isManagingAgent @robot))
            (WHILE(?(~ (NULL @actions)) )
                  (!(= @currentAction (CAR @actions)))
                  (!(= @actions (CDR @actions)))

                  (!(== (VAL @currentAction) (. @actionToExecute @actionId @actionLinks .)))
                  ;;wait for previous linked actions to be completed or to fail

                  (WHILE(?(~(NULL @actionLinks)))
                        (!(= @currentLink (CAR @actionLinks)))
                        (^(|| (PlanManager.actionReport (VAL @currentLink) @report)
                           (PlanManager.stopAgent robot)))

                        (IF(?(PlanManager.stopAgent (VAL @robot)))
                           (=>(PlanManager.agentReport (VAL @robot) "STOPPED"))
                           (~>(PlanManager.isManagingAgent (VAL @robot)))
                           (!(FAILED))
                           )
                        (IF(?(~(PlanManager.actionReport (VAL @currentLink) "OK")))
                           (=>(PlanManager.agentReport (VAL @robot) "FAILURE"))
                           (~>(PlanManager.isManagingAgent (VAL @robot)))
                           (!(FAILED))
                           )
                        (!(= @actionLinks (CDR @actionLinks)))
                        )
                  (!(== (VAL @actionToExecute) (. @actionName @actionParameters .)))

                  (IF(?(PlanManager.planningModality (VAL @robot) ROBOT))
                     (!(SEND-MESSAGE @robotKernel @selfKernel (Connector.command order @currentAction)))
                     )
                  (^(|| (PlanManager.actionReport (VAL @actionId) @report) (PlanManager.stopAgent (VAL robot))))
                  (IF(?(PlanManager.stopAgent (VAL @robot)))
                     (~>(PlanManager.stopAgent (VAL @robot)))
                     (=>(PlanManager.agentReport (VAL @robot) "STOPPED"))
                     (~>(PlanManager.isManagingAgent (VAL @robot)))
                     (!(FAILED))
                     ELSEIF(?(~(EQUAL @report "OK")))
                     (=>(PlanManager.agentReport (VAL @robot) FAILED))
                     (~>(PlanManager.isManagingAgent (VAL @robot)))
                     (!(FAILED))
                     )

                  )
            )
         (=>(PlanManager.agentReport (VAL @robot) "OK"))
         (~>(PlanManager.isManagingAgent (VAL @robot)))
         )
  )




(defop |tellGoal|
  :invocation(!(PlanManager.tellGoal @goal @parameters))
  :documentation "Returns a text string containing a suitable verbalization for a goal"
  :body (
         (IF(?(EQUAL @goal Clean))
            (IF(?(PlanManager.takeInitiative TRUE))
               (!(Acapela.say "We will clean the table together."))
               (^(ELAPSED-TIME (TIME) 1))

               ELSE
               (!(Acapela.say "I think you want to clean the table. Let's see if I can help..."))
               (^(ELAPSED-TIME (TIME) 1))
               )
            )

         )
  )
(defop |getActionString|
  :invocation(!(PlanManager.getActionString @actionName @actionParameters @nAction $oldObject $followsHandover $string))
  :documentation "Returns a text string containing a suitable verbalization for an action
  @actionName name of the action to verbalize
  @actionParameters parameters of the action
  @subject -I - or -You -
  @nAction 1 or 2. Number of actions verbalized in a row. The second one doesn't have the subject.
  $oldobject object of the last action. If it's the same as the current object the robot will say -it- and not objectName. Modified with the current object at the end of the op
  $followsHandover TRUE if last action was an handover. Modified to TRUE if this action was an handover and to FALSE otherwise
  $string  output message string"
  :body (
         (!(= @message ""))


         (IF(?(Actions.nParameters (VAL @actionName) 2))
            (!(== (VAL @actionParameters) (. @agent @object .)))

            ELSE
            (!(== (VAL @actionParameters) (. @agent @object @otherObject .)))
            )

         (IF(?(EQUAL @object $oldObject))
            (!(= @translatedObject "it "))
            ELSE
            (?(Acapela.translation (VAL @object) @translatedObject))
            (!(= @translatedObject (TERM-STRING-CAT "the " @translatedObject " ")))
            )
         (!(= $oldObject @object))

         (?(Acapela.translation (VAL @agent) @translatedAgent))
         (?(Acapela.translation (VAL @actionName) @translatedAction))

         (IF(?(Action.nParameters (VAL @actionName) 2))
            (!(= @message (TERM-STRING-CAT @translatedAgent " " @translatedAction " " @translatedObject)))

            ELSEIF(?(Action.nParameters (VAL @actionName) 3))
            (?(Robot.name @robotName))
            (IF(?(EQUAL @robotName @otherObject))
               (!(= @translatedOtherObject "me"))

               ELSE
               (?(Acapela.translation (VAL @otherObject) @translatedOtherObject))
               )
            (!(= @message (TERM-STRING-CAT @translatedAgent " " @translatedAction " " @translatedObject)))

            )
         (!(= $string @message))

         )
  )


(defop |tellPlan|
  :invocation(!(PlanManager.tellPlan @plan))
  :documentation "Verbalizes a plan using acapela"
  :body (
         (!(= @robotActions (. .)))
         (!(= @humansActions (. .)))
         (WHILE(?(~(NULL @plan)))
                                        ;get agent
               (!(= @anAgent (CAR @plan)))
               (!(= @plan (CDR @plan)))
               (!(== (VAL @anAgent) (. @agentName @agentType @agentActions  .)))
               (IF(?(EQUAL @agentType HUMAN))
                  (!(= @humanActions @agentActions))

                  ELSEIF(?(EQUAL @agentType ROBOT))
                  (!(= @robotActions @agentActions))
                  )
               )





         (!(Acapela.say "Okay... this is the plan"))
         (!(= @first TRUE))
         ;; the idea here is looping on the actions of robot and human, calling each time the op tellPossibleActions. This op tells all actions that don't have pre-requisite actions not completed. So the robot will
         ;; say "i do this and this, then you do that" and so on.
         (WHILE(?(|| (~(NULL @robotActions)) (~(NULL @humanActions))))

               (!(PlanManager.tellPossibleActions PR2_ROBOT @robotActions @first))
               (!(PlanManager.tellPossibleActions human @humanActions @first))

               )
         (^(ELAPSED-TIME (TIME) 1))
         )
  )

(defop |tellPossibleActions|
  :invocation(!(PlanManager.tellPossibleActions @agentName $agentActions $first))
  :documentation "Verabalizes all possible sequential actions (before the agent needs to wait for another agent's action
    @agentName PR2_ROBOT or anyother. If it's PR2_ROBOT the robot will say -i do this- if not -you do this-
    $agentActions the list of actions. This will be modified here
    $first . TRUE if this is the first action to be verbalized. Will be placed false automatically by this methoid. The first action will be told in a  different way from the others."
  :body (

         (!(= @hasUndefined FALSE))      ;;this is needed because we don't verbalize undefined actions.
         (!(= @followsHandover FALSE))   ;;the problem is that handover is a joint action but it's considered as a "robot action" and so the treatmant of it and of following actions is a little different.
         (!(= @n 0))                    ;;this is a count on the number of actions told. If we have only one undefined action we will not verbalize the plan.

         (IF(?(~(NULL $agentActions)))
            (!(= @actionsTold FALSE))               ;;when this goes true we will go out of the method
            (IF(?(EQUAL @agentName PR2_ROBOT))
               (!(= @subject "I "))
               (!(= @subject2 "you "))             ;;used for joint actions (i give you)
               ELSE
               (!(= @subject "you "))
               (!(= @subject2 "me "))
               )
            (IF(?(EQUAL $first TRUE))
               (!(Acapela.getSentence startSentence @message))
               ELSE
               (!(Acapela.getSentence continueSentence @message))
               )

            (!(= @nAction 0))  ;;this will range from 0 to 2. The robot will say actions in groups of 2 (I do this and this. Then I do this and that.) 0 is used just for the first action. After that nAction is set to 1 and the robot will say "and i do this" . At this point the value will become 2 and the robot will start a new sentece, returning to 1 after saying the first action in this new sentence.

            (!(= @oldObject NULL)) ;;if two following actions have the same object the robot will say "it" instead of the objectName
            (WHILE(?(&(EQUAL @actionsTold FALSE) (~(NULL $agentActions))))
                  (!(= @currentAgentAction (CAR $agentActions)))
                  (!(== (VAL @currentAgentAction) (. @agentAction @actionId @agentLinks .)))
                  (!(== (VAL @agentAction) (. @actionName @actionParameters .)))

                  ;;check that every link has been verified.
                  (WHILE(?(& (~(NULL @agentLinks)) (EQUAL @actionsTold FALSE)))
                        (!(= @currentLink (CAR @agentLinks)))
                        (!(= @agentLinks (CDR @agentLinks)))
                        (IF(?(~(PlanManager.actionTold (VAL @currentLink))))
                           (!(= @actionsTold TRUE))   ;;if a link hasn't been verified we stop
                           )
                        )
                  (IF(?(EQUAL @actionsTold FALSE))
                     (!(= $agentActions (CDR $agentActions)))

                     (IF(?(EQUAL @actionName undefined))
                        (=>(PlanManager.actionTold @actionId))
                        (!(= @hasUndefined TRUE))

                        ELSE
                        (!(= @n (+ @n 1)))
                        (IF(?(EQUAL @nAction 0))
                           (!(= @nAction 1))

                           ELSE
                           (IF(?(EQUAL @nAction 1))  ;we concatenate to the previous action
                              (!(= @message (TERM-STRING-CAT @message "and ")))
                              (!(= @nAction 2))

                              ELSEIF(?(EQUAL @nAction 2))  ;we start a new sentence, which will be different from the first sentence of the agent. For example it could be "Moving on, i will do this".
                              (!(Acapela.getSentence continueSentence @continueSentence))
                              (!(= @message (TERM-STRING-CAT @message ". " @continueSentence)))
                              (!(= @nAction 1))
                              )
                           )
                        (!(PlanManager.getActionString @actionName @actionParameters @subject @nAction @oldObject @followsHandover @actionString))  ;gets a verbalization for the action
                        (!(= @message (TERM-STRING-CAT @message @actionString)))
                        (=>(PlanManager.actionTold @actionId))
                        )
                     )
                  )
            (IF(?(> @n 0))  ;;we verbalize the plan only if we have treated more than one actions or if we treated one action and that action is not 'undefined'.
               (!(Acapela.say @message))
               (!(= $first FALSE))
               )
            (!(PRINT @message))

            )











         )

  )
)
