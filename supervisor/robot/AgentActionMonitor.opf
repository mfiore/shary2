;; -*-Lisp-*-
;;author: Michelangelo Fiore
;;this files contains procedures to monitor actions by other agentsÃ¹




(

 (defop |init|
   :invocation(!(AgentActionMonitor.init))
   :documentation "Inits the module"
   :body (
          (!(SEM-CREATE AgentActionMonitor.sem 1 SEM-FIFO))
          (!(AgentActionMonitor.cleanMonitorSpheres))
          (=>(AgentActionMonitor.startMonitorSphereLoop))

          )
   )

 (defop |startMonitoringAgent|
   :invocation(!(AgentActionMonitor.startMonitoringAgent @agent))
   :documentation "Starts monitoring an agent"
   :body (
	  (IF(?(~(AgentActionMonitor.isMonitoringAgent (VAL @agent) @id)))
	     (!(MonitorManager.getFreeId @monitorId))
  
         (?(Spark.humanHead @sparkHumanHead))
         ;; ;;start the monitoring
        ; (!(MonitorManager.monitorTarget @agent @sparkHumanHead MEDIUM @monitorId))
         (!(DatabaseInterface.registerToChanges (AGENT-STATEMENT PR2_ROBOT (VAL @agent) isAt) (humanLocation (VAL @agent)) @result))  ;;for movement actions
         (=>(AgentActionMonitor.isMonitoringAgent @agent @monitorId))
	     )
	  
	  )
   )

 (defop |cancelActions|
   :invocation (!(AgentActionMonitor.cancelActions @agent))
   :body (
          (WHILE(?(AgentActionMonitor.monitorAction (VAL @agent) @actionId @actionName @actionParameters @sphere))   ;;since we are not monitoring the agent anymore we are not monitoring his actions anymore
                (~>(AgentActionMonitor.monitorAction (VAL @agent) (VAL @actionId) (VAL @actionName) (VAL @actionParameters) (VAL @sphere)))
                )
          )
   )
 (defop |stopMonitoringAgent|
   :invocation(!(AgentActionMonitor.stopMonitoringAgent @agent))
   :documentation "Stops monitoring the agent"
   :body (
	  (IF(?(AgentActionMonitor.isMonitoringAgent (VAL @agent) @monitorId))
	     ;;we cancel even when the monitoring manager is not monitoring the agent because maybe the module has the agent in it's queue but it's currently monitoring something else. With the current implementation there could be some problems, like the monitoring manager looking for a second at the agent before stopping.
	     (=>(MonitorManager.cancelMonitoring (VAL @monitorId)))
	     (~>(AgentActionMonitor.isMonitoringAgent (VAL @agent) (VAL @monitorId)))
         (!(AgentActionMonitor.cancelActions @agent))
         (!(DatabaseInterface.cancelRegisterToChanges (AGENT-STATEMENT PR2_ROBOT (VAL @agent) isAt) (humanLocation (VAL @agent)) @result))
	     )
	  )
   )




 (defop |cleanObjectMonitorSpheres| 
   :invocation(!(AgentActionMonitor.cleanObjectMonitorSpheres @object))
   :documentation "clean the monitor spheres associated to an object"
   :body (
	  (!(SEM-P AgentActionMonitor.sem))
      (WHILE(?(AgentActionMonitor.sphere @agent (VAL @object)  @action @sphereId))
            (!(Spark.getFreeId @sparkId))
            (!(ReportManager.sub Spark.report @sparkId))
            (=>(Spark.request updateSphereMonitor (VAL @sphereId) GEN_FALSE (VAL @object) 0 (VAL @agent) 0 0 0 SPARK_PICK_OBJECT (VAL @sparkId)))
            (^(Spark.report (VAL @sparkId) @report))
            (!(ReportManager.unsub Spark.report @sparkId))
            (~>(AgentActionMonitor.sphere (VAL @agent) (VAL @object) @action (VAL @sphereId)))
            (~>(AgentActionMonitor.sphereType (VAL @sphereId) @actionName @activation))
            )
      (!(SEM-V AgentActionMonitor.sem))
	  )
   )
 (defop |cleanMonitorSpheres|
   :invocation(!(AgentActionMonitor.cleanMonitorSpheres))
   :documentation "Erase every monitor sphere"
   :body (
          (!(SEM-P AgentActionMonitor.sem))
          (!(= @sphereId 0))
          ;;we take a random object and agent to set the parameters for the update sphere monitor procedure
          (?(Object.type @object @type PICKABLE))
          (?(Object.type @agent HUMAN AGENT))
          (WHILE(?(< @sphereId 10))   ;from 0 to 10 (indexes of the monitor spheres in spark)
                (!(Spark.getFreeId @sparkId))
                (!(ReportManager.sub Spark.report @sparkId))

                (=>(Spark.request updateSphereMonitor (VAL @sphereId) GEN_FALSE @object 0 @agent 0 0 0 SPARK_PICK_OBJECT (VAL @sparkId)))
                (^(Spark.report (VAL @sparkId) @report))
                (!(ReportManager.unsub Spark.report @sparkId))

                (IF(?(AgentActionMonitor.sphere @agent @object @action (VAL @sphereId)))  ;we erase the spheres from the db
                   (~>(AgentActionMonitor.sphere (VAL @agent) (VAL @object) (VAL @action) (VAL @sphereId)))
                   (~>(AgentActionMonitor.sphereType (VAL @sphereId) @actionName @activation ))
                   )
                (!(= @sphereId (+ @sphereId 1)))
                )
          (!(SEM-V AgentActionMonitor.sem))
          
          )

   )

 (defop |cleanAgentMonitorSpheres|
   :invocation(!(AgentActionMonitor.cleanAgentMonitorSpheres @agent))
   :documentation "Erase the monitor spheres of a particular agent"
   :body (
          (!(SEM-P AgentActionMonitor.sem))
          (!(= @sphereId 0))

          (WHILE(?(< @sphereId 10))  ;from 0 to 9 (index of the monitor spheres in spark)
                (IF(?(AgentActionMonitor.sphere (VAL @agent) @object @action (VAL @sphereId)))  ;if there is a sphere for an agent if we cancel it
                   (!(Spark.getFreeId @sparkId))
                   (!(ReportManager.sub Spark.report @sparkId))
                   (=>(Spark.request updateSphereMonitor (VAL @sphereId) GEN_FALSE (VAL @object) 0 @agent 0 0 0 SPARK_PICK_OBJECT (VAL @sparkId)))
                   (^(Spark.report (VAL @sparkId) @report))
                   (!(ReportManager.unsub Spark.report @sparkId))

                   (~>(AgentActionMonitor.sphere (VAL @agent) (VAL @object) (VAL @action) (VAL @sphereId)))
                   (~>(AgentActionMonitor.sphereType (VAL @sphereId) @action @activation))
                   )
                (!(= @sphereId (+ @sphereId 1)))
                )
          (!(SEM-V AgentActionMonitor.sem))
          )
   )

 

 (defop |cleanMonitorSphere|
   :invocation (!(AgentActionMonitor.cleanMonitorSphere @sphereId))
   :documentation "Erase a particular monitor sphere"
   :body (
          (!(SEM-P AgentActionMonitor.sem))


          (IF(?(AgentActionMonitor.sphere @agent @object @action (VAL @sphereId)))  ;;get agent and object associated to the sphere
             (~>(AgentActionMonitor.sphere @agent @object @action (VAL @sphereId)))
             (~>(AgentActionMonitor.sphereType (VAL @sphereId) @action @activation))
             ;;erase the sphere
             (!(Spark.getFreeId @sparkId))
             (!(ReportManager.sub Spark.report @sparkId))
             (=>(Spark.request updateSphereMonitor (VAL @sphereId) GEN_FALSE @object 0 @agent 0 0 0 SPARK_PICK_OBJECT (VAL @sparkId)))
             (^(Spark.report (VAL @sparkId) @report))
             (!(ReportManager.unsub Spark.report @sparkId))
             )
          (!(SEM-V AgentActionMonitor.sem))
          )
   )


 (defop |activateMonitorSpheres|
   :invocation (!(AgentActionMonitor.activateMonitorSpheres @objectList @actionName @agent))
   :documentation "Activate monitor spheres for an agent and an action on the objects present in objectList"
   :body (

          (!(SEM-P AgentActionMonitor.sem))
          (WHILE(?(~(NULL @objectList)))
                (!(= @currentObject (CAR @objectList)))
                (!(= @objectList (CDR @objectList)))
                (IF(?(~(AgentActionMonitor.sphere (VAL @agent) (VAL @currentObject) (VAL @actionName) @sphereId))) ;if the sphere is not already activated

                   ;;get the coordinates of the object
                   (!(Spark.getFreeId @sparkId))
                   (!(ReportManager.sub Spark.report @sparkId))
                   (=>(Spark.request getJointAbsPose @currentObject NO_NAME @sparkId))
                   (^(Spark.report (VAL @sparkId) @report))
                   (^(Spark.result (VAL @sparkId) @x @y @z @yaw @pitch @roll))
                   (!(ReportManager.unsub Spark.report @sparkId))
                   (~>(Spark.result (VAL @sparkId) (VAL @x) (VAL @y) (VAL @z) (VAL @yaw) (VAL @pitch) (VAL @roll)))

                   ;;activate a monitor sphere
                   (!(Spark.getFreeId @sparkId))
                   (!(Spark.getFreeSphereId @sphereId))
                   (?(Spark.humanHand RIGHT @sparkHand))

                   (!(ReportManager.sub Spark.report @sparkId))
                   (=>(Spark.request updateSphereMonitor (VAL @sphereId) GEN_TRUE (VAL @currentObject) (VAL @sparkHand)
                                     (VAL @agent) (VAL @x) (VAL @y) (VAL @z) SPARK_SIMPLE_ENTRY (VAL @sparkId)))
                   (^(Spark.report (VAL @sparkId) @report))
                   (!(ReportManager.unsub Spark.report @sparkId))

                   ;;set the parameters for the monitoring
                   (?(Actions.activation (VAL @actionName) @sphereActivation))
                   (=>(AgentActionMonitor.sphere @agent @currentObject (VAL @actionName) @sphereId))
                   (=>(AgentActionMonitor.sphereType @sphereId @actionName @sphereActivation))
                   )
                )
          (!(SEM-V AgentActionMonitor.sem))
		
          )
   
   )
 
(defop |calculateInferenceForPresentAgents|
  :invocation(!(AgentActionMonitor.calculatePresentInferences @agent))
  :documentation "calculate inferences for agents in the same position as @agent"
  :body (

         (?(Robot.name @robotName))
         (!(= @agentList (. .)))
         (!(DatabaseInterface.findList (AGENT-STATEMENT (VAL @robotName) (VAL @agent) isAt @l) (. @l .) @result))
         (IF(?(~(NULL @result)))
            (!(= @location (CAR(CAR @result))))

            (!(DatabaseInterface.findList (AGENT-STATEMENT (VAL @robotName) @a isAt (VAL @location)) (. @a .) @result ))
            (WHILE(?(~(NULL @result)))
                  (!(= @agent (CAR(CAR @result))))
                  (!(= @result (CDR @result)))

                  (IF(?(&(~(EQUAL @agent @robotName)) (Object.type (VAL @agent) @t AGENT)))
                     (!(= @agentList (CONS-TAIL (VAL @agent) @agentList)))
                     )
                  )
         )
         (IF(?(~(NULL @agentList)))
            (!(AgentActionMonitor.calculateInferencesForAgents @agentList))
            )

         )
  )

(defop |calculateInferences|
  :invocation(!(AgentActionMonitor.calculateInferencesForAgents @agentList))
  :documentation "adds inferences for all agents in the list"
  :body (	 
         (?(Robot.name @robotName))

         (WHILE(?(~(NULL @agentList)))
               (!(= @agent (CAR @agentList)))
               (!(= @agentList (CDR @agentList)))

               ;;if the agent is holding an object save it's name
               (!(DatabaseInterface.findList (AGENT-STATEMENT (VAL @robotName) (VAL @agent) hasInHand @o) (. @o .) @result))
               (IF(?(~(NULL @result)))
                  (!(= @heldObject (CAR(CAR @result))))
                  ELSE
                  (!(= @heldObject NO_NAME))
                  )

               ;;get the position of the agent
               (!(DatabaseInterface.findList (AGENT-STATEMENT PR2_ROBOT (VAL @agent) isAt @l) (. @l .) @result))
               (!(= @location (CAR(CAR @result))))
               (IF(?(~(NULL @result)))
                  (!(DatabaseInterface.findList (AGENT-STATEMENT PR2_ROBOT @t isAt (VAL @location)) (. @t .) @tableList))
                  (WHILE(?(~(NULL @tableList)))
                        (!(= @table (CAR(CAR @tableList))))
                        (!(= @tableList (CDR @tableList)))

                        (IF(?(Object.type (VAL @table) @type SUPPORT))

                           ;;for every object in that position
                           (!(DatabaseInterface.findList (AGENT-STATEMENT PR2_ROBOT @o isOn (VAL @table)) (. @o .) @result))
                           (IF(?(~(NULL @result)))
                              (!(= @objectList @result))
                              (WHILE(?(~(NULL @objectList)))
                                    (!(= @anObject (CAR(CAR @objectList))))
                                    (!(= @objectList (CDR @objectList)))

                                    (?(Object.type (VAL @anObject) @class @type))
                                    (?(Object.actions (VAL @type) @actionList))   ;;get the associated actions to that objects

                                    (IF(?(~(EQUAL @heldObject NO_NAME)))  ;;set parameters for the preconditions check
                                       (!(= @parameters (. (VAL @agent) (VAL @heldObject) (VAL @anObject) .) ))
                                       (!(= @nActualPar 3))
                                       ELSE
                                       (!(= @parameters (. (VAL @agent) (VAL @anObject) .)))
                                       (!(= @nActualPar 2))
                                       )
                                    (WHILE(?(~(NULL @actionList))) ;;for every associated action
                                          (!(= @anAction (CAR @actionList)))
                                          (!(= @actionList (CDR @actionList)))

                                          (?(Actions.nParameters (VAL @anAction) @nActionParameters))
                                          (IF(?(||(EQUAL @nActionParameters @nActualPar) (< @nActionParameters @nActualPar))) ;;if the associated action's parameters are equal to the current parameters

                                               (!(Actions.checkPreconditions (VAL @anAction) @parameters @result))  ;;check the preconditions
                                               (IF(?(EQUAL @result TRUE)) ;;if they are true add a monitor spheree
                                                (IF(?(~(AgentActionMonitor.sphere (VAL @agent) (VAL @anObject) (VAL @anAction) @id)))
                                                   (!(AgentActionMonitor.activateMonitorSpheres (. (VAL @anObject) .) (VAL @anAction) (VAL @agent)))
                                                   )

                                                ELSE ;;if they are false and there is a monitor sphere on that object, erase it
                                                (IF(?(AgentActionMonitor.sphere (VAL @agent) (VAL @anObject) (VAL @anAction) @id))
                                                   (!(AgentActionMonitor.cleanMonitorSphere @id))
                                                   )
                                                )
                                             ELSE ;;if the number of parameters is different and there is a monitor sphere, erase it (it means that, for example, the agent has taken an item, so we erase all
                                             ;;the inferences for take actions)
                                             (IF(?(AgentActionMonitor.sphere (VAL @agent) (VAL @anObject) (VAL @anAction) @id))
                                                (!(AgentActionMonitor.cleanMonitorSphere @id))
                                                )
                                             )
                                          )
                                    )
                              )
                           )
                        )
                  )
               )
         )
  )




 (defop |MonitorSphereLoop|
   :invocation(AgentActionMonitor.startMonitorSphereLoop) 
   :documentation "Loop to read the poster of the monitor spheres"
   :body (
      (IF(?(Spark.isActive monitorSpheres TRUE))
	     (WHILE(?(~(AgentActionMonitor.stopMonitorSphereLoop)))
		   (!(AgentActionMonitor.readMonitorSpheresPoster))
		   (^ (ELAPSED-TIME (TIME) 1))
		   )
	     (~>(AgentActionMonitor.stopMonitorSphereLoop))
	     )
	  )
   
   )
 

 (defop |readMonitorSpherePoster|
   :invocation(!(AgentActionMonitor.readMonitorSpheresPoster))
   :documentation "Reads the monitor sphere poster apply action postconditions"
   :body (

          (IF(?(Spark.isActive monitorSpheres TRUE))

             (?(Robot.name @robotName))
             (!(READ-POSTER-INTERNAL SPARK_MONITORINGSPHERES @poster))
             (IF(! (==  (VAL @poster) (SPARK_MONITORINGSPHERES_POSTER_STR (monitoringSpheres @spheres (modifIndex @currentSpheresModifIndex)))))
                (!(= @sphereId 0))
                (!(= @spheresList (BUILD-LLISP-FROM-TERM-COMP @spheres)))
                (!(= @spheresList (CDR @spheresList)))
                (WHILE(?(< @sphereId 10)) ;for all the spheres get the parameters
                      (!(= @element (CAR @spheresList)))
                      (!(== (VAL @element) (isSphereActive @isSphereActive)))
                      (!(= @spheresList (CDR @spheresList)))
                      (!(= @element (CAR @spheresList)))
                      (!(== (VAL @element) (agentName (name @agentFactName))))
                      (!(= @spheresList (CDR @spheresList)))
                      (!(= @element (CAR @spheresList)))
                      (!(== (VAL @element) (agentIndex @agentIndex)))
                      (!(= @spheresList (CDR @spheresList)))
                      (!(= @element (CAR @spheresList)))
                      (!(== (VAL @element) (objectName (name @objectFactName))))
                      (!(= @spheresList (CDR @spheresList)))
                      (!(= @element (CAR @spheresList)))
                      (!(== (VAL @element) (entityIndex @entityIndex)))
                      (!(= @spheresList (CDR @spheresList)))
                      (!(= @element (CAR @spheresList)))
                      (!(== (VAL @element) (handIndexInput @handIndexInput)))
                      (!(= @spheresList (CDR @spheresList)))
                      (!(= @element (CAR @spheresList)))
                      (!(== (VAL @element) (sphereCenter (x @x) (y @y) (z @z))))
                      (!(= @spheresList (CDR @spheresList)))
                      (!(= @element (CAR @spheresList)))
                      (!(== (VAL @element) (sphereRadius @radius)))
                      (!(= @spheresList (CDR @spheresList)))
                      (!(= @element (CAR @spheresList)))
                      (!(== (VAL @element) (filteringTimeThreshold @timeThreshold)))
                      (!(= @spheresList (CDR @spheresList)))
                      (!(= @element (CAR @spheresList)))
                      (!(== (VAL @element) (sphereType @sphereType)))
                      (!(= @spheresList (CDR @spheresList)))
                      (!(= @element (CAR @spheresList)))
                      (!(== (VAL @element) (monitorEnterInResult @monitorEnterInResult)))
                      (!(= @spheresList (CDR @spheresList)))
                      (!(= @element (CAR @spheresList)))
                      (!(== (VAL @element) (monitorGetOutResult @monitorGetOutResult)))
                      (!(= @spheresList (CDR @spheresList)))
                      (!(= @element (CAR @spheresList)))
                      (!(== (VAL @element) (handIndexResult @handIndexResult)))
                      (!(= @spheresList (CDR @spheresList)))
                      (!(= @element (CAR @spheresList)))
                      (!(== (VAL @element) (modifIndex @modifIndex)))
                      (!(= @spheresList (CDR @spheresList)))
                      (!(= @element (CAR @spheresList)))
                      (!(== (VAL @element) (dummy @dummy)))
                      (!(= @spheresList (CDR @spheresList)))


                      (!(= @agentName (MAKE-ATOM @agentFactName)))
                      (!(= @objectName (MAKE-ATOM @objectFactName)))

                      ;;if this sphere is active
                      (IF(?(&(EQUAL @isSphereActive 1) (AgentActionMonitor.sphereType (VAL @sphereId) @actionName @sphereActivation))) ;;if the sphere was activated and we actually created a sphere for it (the & avoids some weird bug that I was having)

                         (?(AgentActionMonitor.sphereType (VAL @sphereId) @actionName @sphereActivation)) ;;check the activation we are interested in for the sphere (in or out)
                         (IF(?(AgentActionMonitor.simulateSphere (VAL @sphereId) TRUE)) ;;if the activation is simulated or the sphere is activated
                            (~>(AgentActionMonitor.simulateSphere (VAL @sphereId) TRUE))
                            (!(= @isActivated 1))

                            ELSEIF(?(EQUAL @sphereActivation OUT))
                            (!(= @isActivated (VAL @monitorGetOutResult)))

                            ELSE
                            (!(= @isActivated (VAL @monitorEnterInResult)))
                            )

                         (IF(?(EQUAL @isActivated 1))  ;;if the sphere is activated then an action has been performed
                            (!(DatabaseInterface.findList (AGENT-STATEMENT (VAL @robotName) (VAL @agentName) hasInHand @o) (. @o .) @result))
                            (IF(?(~(NULL @result))) ;;if the human has a object in its hand we are doing a placement or a throw operation. We take the height of the support-
                               (?(Object.type (VAL @objectName) @type @class))
                               (IF(?(Object.height (VAL @type) @zPlacement))
                                  (?(Object.height (VAL @type) @zPlacement))
                                  ELSE
                                  (!(= @zPlacement (VAL @z)))
                                  )

                               (!(= @heldObject (CAR(CAR @result))))  ;;and the object held by the agent
                               (!(= @pos  (. (VAL @x) (VAL @y) (VAL @zPlacement) .)))
                               (!(= @parameters (. (VAL @agentName) (VAL @heldObject) (VAL @objectName) (VAL @pos) .)))
                               ELSE
                               (!(= @parameters (. (VAL @agentName) (VAL @objectName) RIGHT  .))) ;;if we do a take we assume its with the right hand
                               )

                            (!(Actions.setPostconditions (VAL @actionName) (VAL @parameters))) ;;we set the postconditions of the action

                            (!(AgentActionMonitor.checkActionMonitoring @agentName @sphereId)) ;;we check if the action was monitored and warn the plan manager.
                            )
                         )
                      (!(= @sphereId (+ @sphereId 1)))
                      )
                )
             )
          )
   )


(defop |checkActionMonitoring|
  :invocation (!(AgentActionMonitor.checkActionMonitoring @agentName @sphereId))
  :documentation "Checks if the action associated to the @sphereId is monitored for @agentName. If yes will issue an actionCompleted report, if not an unexpectedAction report."
  :body (
     (IF(?(AgentActionMonitor.isMonitoringAgent (VAL @agentName) @monitorId))
        (IF(?(AgentActionMonitor.monitorAction (VAL @agentName) @actionId @actionName @actionParameters(VAL @sphereId)))
           (~>(AgentActionMonitor.monitorAction (VAL @agentName) (VAL @actionId) (VAL @actionName) (VAL @actionParameters) (VAL @sphereId)))
	       (=>(AgentActionMonitor.actionCompleted (VAL @agentName) (VAL @actionId)))
	       ELSE
	       (=>(AgentActionMonitor.unexpectedAction (VAL @agentName)))
	       )
	    )

	 )
  )

(defop |simulateNextAction|
  :invocation (!(AgentActionMonitor.simulateNextAction))
  :documentation "simulates the next human action in the plan"
:body (
       (?(AgentActionMonitor.monitorAction @agentName @n  @actionName @parameters @sphereId))
       (!(AgentActionMonitor.simulateAgentAction @sphereId))
       )
)
(defop |simulateAgentAction|
  :invocation(!(AgentActionMonitor.simulateAgentAction @sphereId))
  :documentation "simulates the action associated to the monitor sphere"
  :body (
         (IF(?(Spark.isActive monitorSpheres TRUE))  ;;if the spark monitor spheres module is active we just simulate the sphere
            (=>(AgentActionMonitor.simulateSphere (VAL @sphereId) TRUE))

            ELSE ;;if not we simulate the postconditions

            (?(AgentActionMonitor.sphere @agentName @objectName @actionName (VAL @sphereId)))
            (?(AgentActionMonitor.monitorAction (VAL @agentName) @actionId (VAL @actionName) @actionParameters (VAL @sphereId)))


            ;;get the coordinates of the object
            (!(Spark.getFreeId @sparkId))
            (!(ReportManager.sub Spark.report @sparkId))
            (=>(Spark.request getJointAbsPose @objectName NO_NAME @sparkId))
            (^(Spark.report (VAL @sparkId) @report))
            (^(Spark.result (VAL @sparkId) @x @y @z @yaw @pitch @roll))
            (!(ReportManager.unsub Spark.report @sparkId))
            (~>(Spark.result (VAL @sparkId) (VAL @x) (VAL @y) (VAL @z) (VAL @yaw) (VAL @pitch) (VAL @roll)))

            (!(DatabaseInterface.findList (AGENT-STATEMENT (VAL @robotName) (VAL @agentName) hasInHand @o) (. o .) @result))
            (IF(?(~(NULL @result)))
               (?(Object.type (VAL @objectName) @type @class))
               ;(?(Object.height (VAL @type) @zplacement))

                  (!(= @heldObject (CAR(CAR @result))))
                  (!(= @parameters (. (VAL @agentName) (VAL @heldObject) (VAL @objectName) RIGHT (. (VAL @x) (VAL @y) 0.7 .) .)))
                  ELSE
                  (!(= @parameters (. (VAL @agentName) (VAL @objectName) RIGHT .)))
                  )

            (!(Actions.setPostconditions (VAL @actionName) (VAL @parameters)))
            (~>(AgentActionMonitor.monitorAction (VAL @agentName) @actionId (VAL @actionName) @actionParameters (VAL @sphereId)))
            (=>(AgentActionMonitor.actionCompleted (VAL @agentName) (VAL @actionId)))
            (!(AgentActionMonitor.calculateInferencesForAgents (. @agentName .)))
            )

         )
  )



(defop |simulateMovement|
  :invocation(!(AgentActionMonitor.simulateMovement @location))
  :documentation "simulates a movement action"
  :body (
         (!(DatabaseInterface.set (AGENT-STATEMENT PR2_ROBOT HERAKLES_HUMAN1 isAt @location) @result))
         )
  )
(defop |agentHasMoved|
  :invocation(Database.valueChange (humanLocation @agent) @location)
  :documentation "reacts when the human changes his position (we register to this change when we start monitoring a human). Works the same as checkaction"
  :body (
         (!(AgentActionMonitor.cleanAgentMonitorSpheres (VAL @agent)))
         (!(AgentActionMonitor.calculateInferencesForAgents (. @agent .)))
         (IF(?(AgentActionMonitor.monitorMove (VAL @agent) (VAL @location) @actionId))
            (~>(AgentActionMonitor.monitorMove (VAL @agent) (VAL @location) (VAL @actionId)))
            (=>(AgentActionMonitor.actionCompleted (VAL @agent) (VAL @actionId)))

            ELSE
            (=>(AgentActionMonitor.unexpectedAction (VAL @agent)))
            )


         )

  )

(defop |getSphereId|
  :invocation(!(AgentActionMonitor.getSphereId @agent @target @action $sphereId))
  :documentation "gets the id of a sphere. It's useful because spheres can change and be updated at any moment, which can lead to inconsistencies if we don't use a semaphore"
  :body (
         (!(SEM-P AgentActionMonitor.sem))
         (IF(?(AgentActionMonitor.sphere (VAL @agent) (VAL @target) (VAL @action) @id))
            (!(= $sphereId (VAL @id)))

            ELSE
            (!(= $sphereId -1))
            )
         (!(SEM-V AgentActionMonitor.sem))

         )

  )


)
