;; -*-Lisp-*-
;;author: Michelangelo Fiore
;;this files contains procedures to move the robot

(

(defop |init|
  :invocation(!(BaseActions.init))
  :documentation "Inits the module"
  :body (
	 (=>(BaseActions.freeId 0))
	 (!(SEM-CREATE BaseActions.sem 1 SEM-FIFO))
	 (!(SEM-CREATE BaseActionsId.sem 1 SEM-FIFO))
	 )
  )

(defop |getFreeId|
  :invocation(!(BaseActions.getFreeId $id))
  :documentation "returns an available id for requestes"
  :body (
	 (!(SEM-P BaseActionsId.sem))
	 (?(BaseActions.freeId $id))
	 (=>(BaseActions.freeId (+ $id 1)))
	 (!(SEM-V BaseActionsId.sem))
	 )
  )

(defop |moveWaypoints|
  :invocation(BaseActions.action moveWaypoints @id)
  :body (
         (!(SEM-P BaseActions.sem))
         (IF(?(Softmotion.sim FALSE))
            (!(SEND-MESSAGE WaypointNavigation (move)))
            (^(||(WaypointNavigation.report @report)(BaseActions.stop (VAL @id)) ))
            (IF(?(WaypointNavigation.report OK))
               (~>(WaypointNavigation.report OK))
               (=>(BaseActions.report @id "OK"))

               ELSEIF(?(BaseActions.stop (VAL @id)))
               (!(SEND-MESSAGE WaypointNavigation (stop)))
               (^(WaypointNavigation.stop.report @report))
               (~>(WaypointNavigation.stop.report (VAL @report)))
               (=>(BaseActions.report @id "STOPPED"))

               ELSE
               (=>(BaseActions.report @id "FAILURE"))
               )
            )
         )
  )
(defop |move|
  :invocation(BaseActions.action move @waypoints @id)
  :documentation "moves the robot through a list of waypoints"
  :body (
	 (!(SEM-P BaseActions.sem)) 
	 (?(BaseActions.bridgeName @name))
	 (?(BaseActions.timeToWait @time))

	 (!(= @reportName1 (TERM-STRING-CAT (VAL @name) ".move.report")))
	 (!(= @reportName1 (MAKE-ATOM @reportName1)))

	 (!(= @reportName2 (TERM-STRING-CAT (VAL @name) ".move.update")))
	 (!(= @reportName2 (MAKE-ATOM @reportName2)))
        (IF(?(Softmotion.sim FALSE))
	       
	       (!(SEND-MESSAGE @name (move euler @waypoints)))
	       (!(= @nextLocation (CAR @waypoints)))
	       (!(= @waypoints (CDR @waypoints)))
	       (!(= @completed FALSE))
	       
	       
	       (WHILE(?(EQUAL @completed FALSE))
		     (^(|| (@reportName1 @status) (@reportName2 @status) (BaseActions.stop (VAL @id)) (ELAPSED-TIME (TIME) @time)))
             (IF(?(BaseActions.stop (VAL @id)))
			(!(BaseActions.getFreeId @stopId))
            (=>(BaseActions.action stop (VAL @stopId)))
            (!(ReportManager.sub BaseActions.report @stopId))
            (^(BaseActions.report (VAL @stopId) @report))
            (!(ReportManager.unsub BaseActions.report @stopId))

            (^(@reportName1 @status))
            (^(@reportName2 @status))
            (~>(@reportName1 (VAL @status)))
            (~>(@reportName2 (VAL @status)))
                                        ;(!(ReportManager.sub BaseActions.report @id))
            ;(^(BaseActions.report (VAL @id) @report))
            ;(!(ReportManager.unsub BaseActions.report @id))

            (!(ReportManager.publish BaseActions.report @id "STOPPED"))

			(!(= @completed TRUE))
			
			ELSEIF(?(@reportName1 OK))
			(~>(@reportName1 @status)) 
			(=>(Robot.location (VAL @nextLocation)))
			(IF(?(~(NULL @waypoints)))
			   (!(= @nextLocation (CAR @waypoints)))
			   (!(= @waypoints (CDR @waypoints)))
			   )
			ELSEIF(?(@reportName2 OK))
            (~>(@reportName2 @status))
            (!(ReportManager.publish BaseActions.report @id "OK"))

			(!(= @completed TRUE))
			ELSE
			(~>(@reportName1 @status)) 
            (~>(@reportName2 @status))
            (!(ReportManager.publish BaseActions.report @id "FAILURE"))

			(!(= @completed TRUE))
			)
		     )
	       (~>(@reportName1 @status)) 
	       (~>(@reportName2 @status)) 
	       
	       ELSE
           (^(|| (@reportName1 @status) (@reportName2 @status) (BaseActions.stop (VAL @id))))
           (!(ReportManager.publish BaseActions.report @id @status))


	 )
	 (!(SEM-V BaseActions.sem))
	 )
  )

(defop |stop|
  :invocation(BaseActions.action stop @id)
  :documentation "halts the robot movement"
  :body (
     (IF(?(Softmotion.sim FALSE))
	 (?(BaseActions.bridgeName @name))
	 (?(BaseActions.timeToWait @time))
	 (!(= @reportName (TERM-STRING-CAT (VAL @name) ".stop.report")))
	 (!(= @reportName (MAKE-ATOM @reportName)))
	 (!(SEND-MESSAGE @name (stop)))
	 (^(||(@reportName @report) (ELAPSED-TIME (TIME) @time)))
	 (~>(@reportName @report))

     (!(ReportManager.publish BaseActions.report @id "OK"))

     )
     (!(ReportManager.publish BaseActions.report @id "OK"))

	 )
  )



   
)
