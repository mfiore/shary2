;; -*-Lisp-*-
;;author: Michelangelo Fiore
;;this files contains an interface for the Database in the supervision
;;system. At the moment it only handles the OPRS DB but in the future
;;it should be extended to handle different possibilities

(

 (defop |init|
   :invocation(!(DatabaseInterface.init))
   :documentation "Inits the module. For now we put a semaphore for the get result but it could be better to change the result to include an id. Too lazy to do that now =)"
   :body (
	     (!(SEM-CREATE DatabaseInterface.sem 1 SEM-FIFO))
	     )
   )
   

 
(defop |setReachabilityFalse|
  :invocation(!(DatabaseInterface.setReachabilityFalse @object $result))
  :documentation "Used to change the reachability of an object from the supervisor. This is used because sometimes (often) SPARK overestimates the capacity of the robot to reach objects"
  :body (
	 (!(SEM-P DatabaseInterface.sem))
	 (? (ONTO_NAME $ONTO_NAME))
	 (? (SUP_NAME $SUP_NAME))
	 (!(SEND-MESSAGE $ONTO_NAME (Database.setReachabilityFalse (VAL @object) $SUP_NAME)))
	 (!(DatabaseInterface.getResult $result))
	 (!(SEM-V DatabaseInterface.sem))
	 )
  )


(defop |findFacts|
  :invocation (! (DatabaseInterface.findFacts $factList $result))
  :documentation "this procedure contacts the Database to check if $fact is present. It returns Database.result TRUE, Database.result FALSE or Database.result ERROR in $result"
  :body (
         (!(SEM-P DatabaseInterface.sem))
         (? (ONTO_NAME $ONTO_NAME))
         (? (SUP_NAME $SUP_NAME))
         (!(SEND-MESSAGE $ONTO_NAME (Database.findFacts $factList $SUP_NAME)))
         (!(DatabaseInterface.getResult $result))
         (!(SEM-V DatabaseInterface.sem))
         )
  )

 (defop |find|
   :invocation (! (DatabaseInterface.find $fact $result))
   :documentation "this procedure contacts the Database to check if $fact is present. It returns Database.result TRUE, Database.result FALSE or Database.result ERROR in $result"
   :body (
	  (!(SEM-P DatabaseInterface.sem))
	  (? (ONTO_NAME $ONTO_NAME))
	  (? (SUP_NAME $SUP_NAME))
	  (!(SEND-MESSAGE $ONTO_NAME (Database.find $fact $SUP_NAME)))
	  (!(DatabaseInterface.getResult $result))
	  (!(SEM-V DatabaseInterface.sem))
	  )
   )

 (defop |findList|
   :invocation (! (DatabaseInterface.findList $request $unboundVariables $result))
   :documentation "this procedure returns in the variable $result a list of list, containing the values of the unbound variables. It's used parameters must be set as follows. $request= composed term like (fact 1 @b 3)  
$unboundVariables= lisp-list containing the variables for which we want to find values. Continuing from the previous examples this would be (. @b .)"
   :body 
   (	 
    (!(SEM-P DatabaseInterface.sem))
    (? (ONTO_NAME $ONTO_NAME))
    (? (SUP_NAME $SUP_NAME))
    (!(SEND-MESSAGE $ONTO_NAME (Database.findList $request $unboundVariables $SUP_NAME)))
    (!(DatabaseInterface.getResult $result))
    (!(SEM-V DatabaseInterface.sem))
    )	
   )	
 (defop |add|
   :invocation (!(DatabaseInterface.add $fact $result))
   :documentation "this procedure adds $fact into the database and returns $result. $fact= a composed term like (isOn cup_0 table_0)."
   :body (
	  (!(SEM-P DatabaseInterface.sem))
	  (? (ONTO_NAME $ONTO_NAME))
	  (? (SUP_NAME $SUP_NAME))
	  (!(SEND-MESSAGE $ONTO_NAME (Database.add $fact $SUP_NAME)))
	  (!(DatabaseInterface.getResult $result))   
	  (!(SEM-V DatabaseInterface.sem))
	)	
   )

(defop |addSetRemoveFacts|
  :invocation (!(DatabaseInterface.addSetRemoveFacts @addFacts @setFacts @removeFacts $result))
  :documentation "this procedure adds $fact into the database and returns $result. $fact= a composed term like (isOn cup_0 table_0)."
  :body (
         (!(SEM-P DatabaseInterface.sem))
         (? (ONTO_NAME $ONTO_NAME))
         (? (SUP_NAME $SUP_NAME))
         (!(SEND-MESSAGE $ONTO_NAME (Database.addSetRemoveFacts @addFacts @setFacts @removeFacts $SUP_NAME)))
         (!(DatabaseInterface.getResult $result))
         (!(SEM-V DatabaseInterface.sem))
         )
  )
(defop |set|
  :invocation (!(DatabaseInterface.set @fact $result))
  :body (
         (!(SEM-P DatabaseInterface.sem))
         (? (ONTO_NAME $ONTO_NAME))
         (? (SUP_NAME $SUP_NAME))
         (!(SEND-MESSAGE $ONTO_NAME (Database.set @fact $SUP_NAME)))
         (!(DatabaseInterface.getResult $result))
         (!(SEM-V DatabaseInterface.sem))
         )
  )



 (defop |remove|
   :invocation (!(DatabaseInterface.remove $fact $result))
   :documentation "this procedure removes $fact from the database. $fact= a composed termi like (isOn cup_0 table_0)"
   :body (	
	  (!(SEM-P DatabaseInterface.sem))
	  (? (ONTO_NAME $ONTO_NAME))
	  (? (SUP_NAME $SUP_NAME))
	  (!(SEND-MESSAGE $ONTO_NAME (Database.remove $fact $SUP_NAME)))
	  (!(DatabaseInterface.getResult $result))	
	  (!(SEM-V DatabaseInterface.sem))
   )
)
 (defop |addMonitor|
   :invocation (!(DatabaseInterface.addMonitor $factsToMonitor $event $result))
   :documentation "this procedure sets up a monitor for a given fact. When this fact is first added to the Database it returns $eventName to the current kernel. $fact and $event are both composed terms"
   :body (
	  (!(SEM-P DatabaseInterface.sem))
	  (? (ONTO_NAME $ONTO_NAME))
	  (? (SUP_NAME $SUP_NAME))
	  (!(SEND-MESSAGE $ONTO_NAME (Database.addMonitor (VAL $factsToMonitor) (VAL $event) $SUP_NAME)))
	  (!(DatabaseInterface.getResult $result))
	  (!(SEM-V DatabaseInterface.sem))
	  
	)	
   )
 (defop |removeMonitor|
   :invocation (!(DatabaseInterface.removeMonitor $factToMonitor $result))
   :documentation "this procedure removes the monitor for a given fact."
   :body (
	  (!(SEM-P DatabaseInterface.sem))
	  (? (ONTO_NAME $ONTO_NAME))
	  (? (SUP_NAME $SUP_NAME))
	  (!(SEND-MESSAGE $ONTO_NAME (Database.removeMonitor $factToMonitor $SUP_NAME)))
	  (!(DatabaseInterface.getResult $result))
	  (!(SEM-V DatabaseInterface.sem))

	  
	)	
   )

(defop |cancelRegisterToChanges|
  :invocation(!(DatabaseInterface.cancelRegisterToChanges $fact $event $result))
  :body (
         (!(SEM-P DatabaseInterface.sem))
         (? (ONTO_NAME $ONTO_NAME))
         (? (SUP_NAME $SUP_NAME))
         (!(SEND-MESSAGE $ONTO_NAME (Database.cancelRegisterToChanges $fact $event  $SUP_NAME)))
         (!(DatabaseInterface.getResult $result))
         (!(SEM-V DatabaseInterface.sem))
         )

  )
(defop |registerToChanges|
  :invocation(!(DatabaseInterface.registerToChanges $fact $event $result))
  :documentation ""
  :body (
         (!(SEM-P DatabaseInterface.sem))
         (? (ONTO_NAME $ONTO_NAME))
         (? (SUP_NAME $SUP_NAME))
         (!(SEND-MESSAGE $ONTO_NAME (Database.registerToChanges $fact $event  $SUP_NAME)))
         (!(DatabaseInterface.getResult $result))
         (!(SEM-V DatabaseInterface.sem))
         )
  )
 (defop |getResult|
   :invocation(!(DatabaseInterface.getResult $result))
   :documentation "this procedure handles the return message of the DB"
   :body (

	  (? (TIME_TO_WAIT_DB $TIME_TO_WAIT_DB))
      (^ (Database.result $result));(ELAPSED-TIME (TIME) $TIME_TO_WAIT_DB)))
	  (IF(?(Database.result $result))
	     (~>(Database.result $result))
	     ELSE
	     (!(= $result (. .)))
	     )

	  )
   )	  

   (defop |cleanDb|
  :invocation(!(DatabaseInterface.cleanDb $result))
  :documentation "clean GTP Facts on the database"
  :body (
	 (!(SEM-P DatabaseInterface.sem))
	 (? (ONTO_NAME $ONTO_NAME))
	 (? (SUP_NAME $SUP_NAME))
	 (!(SEND-MESSAGE $ONTO_NAME (Database.cleanDb $SUP_NAME)))
	 (!(DatabaseInterface.getResult $result))
	 (!(SEM-V DatabaseInterface.sem))
	 )
  )  
 
)
