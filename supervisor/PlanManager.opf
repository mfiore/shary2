;; -*-Lisp-*-
;;author: Michelangelo Fiore
;;this files contains procedures to manage plans in the supervision system.

(

 (defop |managePlans|
   :invocation(PlanManager.managePlans)
   :documentation "this is the main procedure of the Plan Manager. It's constantly running, receiving goals from the higher level, asking the planner for plans, breaking them into actions and sending those to the appropriate modules for execution"
   :body (
	  (=>(PlanManager.isRunning TRUE))
	  (!(= @humanAgent HERAKLES_HUMAN1))
					;get planning constants
	  (?(PlanManager.maxPlanningTime @maxPlanningTime))
	  (?(PlanManager.maxPlanningFailures @maxPlanningFailures))
	  (!(= @maxPlanningFailures 3))
	  (?(PlanManager.timeToRetry @timeToRetry))
	  (WHILE(?(PlanManager.shouldRun TRUE))
		;;wait for a new goal or for a stop
		(^(|| (PlanManager.newGoal TRUE) (PlanManager.shouldRun FALSE)))
		(IF(?(PlanManager.newGoal TRUE))
		   (=>(PlanManager.newGoal FALSE)) ;we are treating the goal so it's no longer new
		   (?(PlanManager.goal @goal @parameters))
		   (!(= @planningFailures 0))
		   ;;we loop until we try planning and the planner returns an "achieved" or we've failed enough times
		   
		   (!(= @status notStarted))
		   (WHILE(?(& 
			    (~(EQUAL @status completed)) 
			    (< @planningFailures @maxPlanningFailures)
			    ))
			 (=>(PlannerInterface.getPlan (VAL @goal) (VAL @parameters)))   ;;we ask for a plan
			 (^(PlannerInterface.report @report))
			 (~>(PlannerInterface.report (VAL @report)))
			 (IF(?(EQUAL @report ACHIEVED))
			    (!(= @status completed))
			 ELSEIF(?(EQUAL @report OK))
			    (!(Acapela.say "I've got a plan!"))

			    (!(ArmActions.getFreeId @actionId))
			    (=>(ArmActions.action moveToManipulationPosition @actionId))
			    (^(ArmActions.report (VAL @actionId) @report))
			    (~>(ArmActions.report (VAL @actionId) @report))

			    (!(AgentActionMonitor.startMonitoringAgent @humanAgent))
			    (^(PlannerInterface.result @plan))
			    (~>(PlannerInterface.result (VAL @plan)))

			    (!(== (VAL @plan) (. @robotActions @humanActions .)))     
			    
			    (IF(?(PlanManager.shouldTellPlan TRUE))
			       (!(PlanManager.tellPlan @plan))
			       )			    
			    ;;we launch the managing of the two planning lines

			    (=>(PlanManager.manageRobotActions (VAL @robotActions)))   
			    (=>(PlanManager.manageHumanActions (VAL @humanAgent) (VAL @humanActions)))
			    
			    (^(|| (PlanManager.agentReport robot @report) (PlanManager.agentReport (VAL @humanAgent) @report)  (PlanManager.stop) (AgentActionMonitor.unexpectedAction @agent)))
			    ;;we treat every possible case. If one of the two agent has failed it's execution we stop the other one and try replanning. If one of the two agents has completed we wait for the other one. If the robot is stopped we abort planning.
			    (IF(?(AgentActionMonitor.unexpectedAction @agent))
			       (=>(PlanManager.stopAgent @humanAgent))
			       (=>(PlanManager.stopAgent robot))
			       (^(PlanManager.agentReport robot @report))
			       (^(PlanManager.agentReport (VAL @humanAgent) @report))
			       			    
			       ELSEIF(?(PlanManager.stop))
			       (IF(?(PlanManager.isManagingAgent (VAL @humanAgent)))
				  (=>(PlanManager.stopAgent @humanAgent))
				  (^(PlanManager.agentReport (VAL @humanAgent) @report))
				  )
			       (IF(?(PlanManager.isManagingAgent robot))
				  (=>(PlanManager.stopAgent robot))
				  (^(PlanManager.agentReport robot @report))
				  )
			       (!(= @planningFailures @maxPlanningFailures))

			       ELSEIF(?(PlanManager.agentReport robot STOPPED))
			       (IF(?(PlanManager.isManagingAgent (VAL @humanAgent)))
				  (=>(PlanManager.stopAgent @humanAgent))
				  (^(PlanManager.agentReport (VAL @humanAgent) @report))
				  )
			       (!(= @planningFailures @maxPlanningFailures))
			       
			       ELSEIF(?(PlanManager.agentReport robot FAILURE)) 
			       (IF(?(PlanManager.isManagingAgent (VAL @humanAgent)))
				  (=>(PlanManager.stopAgent @humanAgent))
				  (^(PlanManager.agentReport (VAL @humanAgent) @report))
				  )
			       (!(= @planningFailures (+ @planningFailures 1)))
			       
			       ELSEIF(?(PlanManager.agentReport (VAL @humanAgent) FAILURE))
			       (IF(?(PlanManager.isManagingAgent robot))
				  (=>(PlanManager.stopAgent robot))
				  (^(PlanManager.agentReport robot @report))
				  )
			       
			       ELSEIF(?(PlanManager.agentReport robot OK))
			       (^(|| (PlanManager.agentReport (VAL @humanAgent) @report) (PlanManager.stop) (AgentActionMonitor.unexpectedAction @agent)))
			       (IF(?(PlanManager.agentReport (VAL @humanAgent) FAILURE))
				  (!(= @planningFailures (+ @planningFailures 1)))
				  
				  ELSEIF(?(PlanManager.stop))
				  (IF(?(PlanManager.isManagingAgent (VAL @humanAgent)))
				     (=>(PlanManager.stopAgent @humanAgent))
				     (^(PlanManager.agentReport (VAL @humanAgent) @report))
				     )
				  (!(= @planningFailures @maxPlanningFailures))

				  ELSEIF(?(AgentActionMonitor.unexpectedAction @agent))
				  (IF(?(PlanManager.isManagingAgent (VAL @humanAgent)))
				     (=>(PlanManager.stopAgent @humanAgent))
				     (^(PlanManager.agentReport (VAL @humanAgent) @report))
				     )
				  )

			       ELSEIF(?(PlanManager.agentReport (VAL @humanAgent) OK))
			       (^(|| (PlanManager.agentReport robot @robotReport)(PlanManager.stop) (AgentActionMonitor.unexpectedAction @agent)))
			       (IF(?(PlanManager.agentReport robot FAILURE))
				  (!(= @planningFailures (+ @planningFailures 1)))
				  
				  ELSEIF(?(AgentActionMonitor.unexpectedAction @agent))
				  (IF(?(PlanManager.isManagingAgent robot))
				     (=>(PlanManager.stopAgent robot))
				     (^(PlanManager.agentReport robot @report))
				     )
				  
				  ELSEIF(?(PlanManager.stop))
				  (IF(?(PlanManager.isManagingAgent robot))
				     (=>(PlanManager.stopAgent robot))
				     (^(PlanManager.agentReport robot @report))
				     )
				  (!(= @planningFailures @maxPlanningFailures))

				  )
			       )

			    ELSE
			    (!(= @planningFailures (+ @planningFailures 1)))
			    )
			 (IF(?(&(PlanManager.agentReport (VAL @humanAgent) OK) (PlanManager.agentReport robot OK)))
			    (!(= @status completed))
			    
			    ELSE
			    (^(ELAPSED-TIME (TIME) @timeToRetry))

			    )
			 
			 (!(PlanManager.clean))
			 (!(AgentActionMonitor.stopMonitoringAgent @humanAgent))
			 )
		   (!(PRINT "stopping monitoring agent"))
		   (IF(?(EQUAL @status completed))
		      (=>(PlanManager.report OK))
		      (!(Acapela.say "Task completed"))
		      
		      ELSE
		      (!(Acapela.say "Abandoning Task"))
		      (=>(PlanManager.report FAILED))
		      )
		   
		   )

	  
		)
	  (=>(PlanManager.isRunning TRUE))
	  )
   )

(defop |clean|
  :invocation (!(PlanManager.clean))
  :documentation "used to clean facts at the end of a plan"
  :body (
	 (WHILE(?(PlanManager.actionReport @action @report))
	       (~>(PlanManager.actionReport (VAL @action) (VAL @report)))
	       )
	 (WHILE(?(PlanManager.agentReport @agent @report))
	       (~>(PlanManager.agentReport (VAL @agent) (VAL @report)))
	       )
	 (WHILE(?(PlanManager.actionReport @link @report))
	       (~>(PlanManager.actionReport (VAL @link) (VAL @report)))
	       )
	 (WHILE(?(PlanManager.stopAgent @agent))
	       (~>(PlanManager.stopAgent (VAL @agent)))
	       )
	 (WHILE(?(AgentActionMonitor.unexpectedAction @agent))
	       (~>(AgentActionMonitor.unexpectedAction @agent))
	       )
	 (~>(PlanManager.stop))
	 
	 )
  
		
  
  )

 (defop |manageHumanActions|
   :invocation (PlanManager.manageHumanActions @agent @actions)
   :documentation "Procedure to handle the human actions into a plan"
   :body (
	  (IF(?(~(NULL @actions)))
	     (=>(PlanManager.isManagingAgent @agent))
	     (!(= @tempActions (VAL @actions)))
	     ;;loop until every action has been executed, we receive a stop commando or there is an unexpected action
	     	     (WHILE(?(& 
		      (~(NULL @actions))
		      (~(PlanManager.agentReport (VAL @agent) @report))
		      ))
		   (!(= @action (CAR @actions)))
		   (!(= @actions (CDR @actions)))
		   ;;get the action parameters
		   (!(== (VAL @action) (. @actionToExecute @actionId @actionLinks .)))
		  
		   (WHILE(?(~(NULL @actionLinks))) ;;TO REPUT STOPAGENT
			 (!(= @currentLink (CAR @actionLinks)))
			 (^(|| (PlanManager.actionReport (VAL @currentLink) @report) (PlanManager.stopAgent (VAL @agent))))
			 
			 (IF(?(PlanManager.stopAgent (VAL @agent)))
			    (=>(PlanManager.agentReport @agent STOPPED))
			    (!(FAILED))
			    )
			 (IF(?(~(EQUAL @report OK)))
			    (=>(PlanManager.agentReport (VAL @agent) FAILURE))
			    (!(FAILED))
			    )
		      (!(= @actionLinks (CDR @actionLinks)))
		      )
		   (!(== (VAL @actionToExecute) (. @actionName @actionParameters .)))
		   

		   (IF(?(Action.type (VAL @actionName) MANIPULATION))
		      (!(== (VAL @actionParameters) (. @object .)))
		      
		      ELSEIF(?(Action.type (VAL @actionName) PLACEMENT))
		      (!(== (VAL @actionParameters) (. @object @placement .)))
		      
		      ) 
		      

		   (!(= @message (TERM-STRING-CAT "Human executes" @actionName)))
		   (!(Acapela.say @message))

;;if we haven't activated a monitor sphere activate it. Associate a monitor sphere id
		      ;; with the id of the action to monitor  (?(Spark.monitorParameter (VAL @actionName) @parameterType))
		      
	     
		   (?(Spark.monitorParameter (VAL @actionName) @parameterType))
		   
		   (IF(?(EQUAL (VAL @parameterType) OBJECT))
		      (!(= @target @object))
		      ELSEIF(?(EQUAL (VAL @parameterType) PLACEMENT))
		      (!(= @target @placement))
		      )
		   ;;if we haven't activated a monitor sphere activate it. Associate a monitor sphere id
		   ;; with the id of the action to monitor
		   (IF(?(~(AgentActionMonitor.sphere (VAL @agent) (VAL @target) @sphereId)))
		      (!(AgentActionMonitor.activateMonitorSpheres (. @target .) @agent))
		      )
		   (?(AgentActionMonitor.sphere (VAL @agent) (VAL @target) @sphereId))
		   (=>(AgentActionMonitor.monitorAction @agent @actionId @sphereId))
		   (^(|| (AgentActionMonitor.actionCompleted (VAL @agent) (VAL @actionId)) 
		      (PlanManager.stopAgent (VAL @agent))))
			 
		   (IF(?(AgentActionMonitor.actionCompleted (VAL @agent) (VAL @actionId)))
		      (~>(AgentActionMonitor.actionCompleted (VAL @agent) (VAL @actionId)))
		      (=>(PlanManager.actionReport @actionId OK))
		      
		      ELSEIF(?(PlanManager.stopAgent (VAL @agent)))
		      (=>(PlanManager.agentReport @agent STOPPED))
		      (!(FAILED))      
		      )
		   
		   )
	     
	     (IF(?(PlanManager.stopAgent (VAL @agent)))
		(=>(PlanManager.agentReport @agent STOPPED))
		(~>(PlanManager.agentReport @agent STOPPED))
		
		ELSEIF(?(~(PlanManager.agentReport (VAL @agent) @agentReport)))
		(=>(PlanManager.agentReport @agent OK))
		)
	     
	     ELSE
	     (=>(PlanManager.agentReport @agent OK))
	     )
	  (~>(PlanManager.isManagingAgent @agent))
	  )

   )
 (defop |manageRobotActions|
   :invocation(PlanManager.manageRobotActions @actions)
   :documentation "Manages the execution of the robot actions"
   :body (
	  (WHILE(?(& (~ (NULL @actions)) (~ (PlanManager.stopAgent robot))))
		(=>(PlanManager.isManagingAgent robot))
		(!(= @currentAction (CAR @actions)))
		(!(= @actions (CDR @actions)))
		
		(!(== (VAL @currentAction) (. @actionToExecute @actionId @actionLinks .)))
		;;wait for previous linked actions to be completed or to fail

		(WHILE(?(~(NULL @actionLinks))) ;;TO REPUT STOPAGENT
		      (!(= @currentLink (CAR @actionLinks)))
		      (^(|| (PlanManager.actionReport (VAL @currentLink) @report)
			 (PlanManager.stopAgent robot)))

		      (IF(?(PlanManager.stopAgent robot))
			 (=>(PlanManager.agentReport robot STOPPED))
			 (!(FAILED))
			 )
		      (IF(?(~(PlanManager.actionReport (VAL @currentLink) OK)))
			 (=>(PlanManager.agentReport robot FAILURE))
			 (!(FAILED))
			 )
		      (!(= @actionLinks (CDR @actionLinks)))
		      )
		      (!(== (VAL @actionToExecute) (. @actionName @actionParameters .)))
		      (!(ExecutionManager.getFreeId @executionId))
		      (!(PRINT "starting execution"))
		      (!(= @message (TERM-STRING-CAT "I'm executing " @actionName)))
		      (!(Acapela.say @message))


		      (=>(ExecutionManager.executeAction @actionName @actionParameters @executionId))
		      (^(|| (ExecutionManager.report (VAL @executionId) @report) (PlanManager.stopAgent robot)))
		      (IF(?(ExecutionManager.report (VAL @executionId) @report))
			 (IF(?(EQUAL @report STOPPED))
			    (=>(PlanManager.agentReport robot STOPPED))
			    (!(FAILED))
			    )
			 (IF(?(~(EQUAL @report OK)))
			    (=>(PlanManager.agentReport robot FAILURE))
			    (!(FAILED))
			    )
			 (=>(PlanManager.actionReport @actionId OK))
			 
			 ELSE
			 (=>(ExecutionManager.stop @executionId))
			 (^(ExecutionManager.report (VAL @executionId) @report))
			 )
		      )
	  (IF(?(PlanManager.stopAgent robot))
	     (~>(PlanManager.stopAgent robot))
	     (=>(PlanManager.agentReport robot STOPPED))
	     (IF(?(ExecutionManager.isExecutingAction @executionId))
		(=>(ExecutionManager.stop @executionId))
		(^(ExecutionManager.report @executionId @report))
		(~>(ExecutionManager.report (VAL @executionId) (VAL @report)))
		)
	     
	     ELSE
	     (=>(PlanManager.agentReport robot OK))		
	     )
	  (~>(PlanManager.isManagingAgent robot))
	  )
   
   )

 (defop |tellPlan|
   :invocation(!(PlanManager.tellPlan @plan))
   :documentation "Verbalizes a plan using acapela"
   :body (
	  ;; (!(== (VAL @plan) (. @robotActions @humanActions .)))     
	  ;; (WHILE(?(~ (NULL @humanActions)))
	  ;; 	(!(PRINT "starting an action"))
	  ;; 	(!(= @currentAction (CAR @humanActions)))
	  ;; 	(!(= @actions (CDR @humanActions)))
	  ;; 	(!(== (VAL @currentAction) (. @actionToExecute @actionId @actionLinks .)))
	  ;; 	(!(== (VAL @actionToExecute) (. @actionName @actionParameters .)))
	  ;; 	(!(== (VAL @actionParameters) (. @object @support @placement .)))

	  ;; 	(IF(?(EQUAL @actionName take))
	  ;; 	   (!(= @message (TERM-STRING-CAT @actionName " " @object)))
		   
	  ;; 	   ELSE
	  ;; 	   (!(= @message (TERM-STRING-CAT @actionName " " @placement)))
	  ;; 	   )
	  ;; 	(!(Acapela.say @message))
	  ;; 	)
	  )
   )
)