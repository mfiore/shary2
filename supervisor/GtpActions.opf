;; -*-Lisp-*-
;;author: Michelangelo Fiore
;;This file contains procedures to handle GTP actions. Probably
;;there's no need for a whole file for this but i don't know where to
;;put them XD.

(
 (defop |init|
   :invocation(!(GtpActions.init))
   :documentation "init the module"
   :body (
	  (!(Mhp.getFreeId @id))
	  (=>(Mhp.request initGtp @id))
	  (^(Mhp.report (VAL @id) @report))
	  (=>(GtpActions.freeId 0))
	  (!(Mhp.getFreeId @id))
	  (=>(Mhp.request fetchEnvironment @id))
	  (!(GtpActions.handleReport Mhp @id @gtpId))
	  ) 
   )
 (defop |getFreeId|
   :invocation(!(GtpActions.getFreeId $id))
   :body (
	  (?(GtpActions.freeId $id))
	  (=>(GtpActions.freeId (+ $id 1)))
	  )
   )

 (defop |pick|
   :invocation(GtpActions.action pick @object @hand @gtpId)
   :body (
	  (?(Robot.name @robotName))
	  
	  (!(Mhp.getFreeId @id))
	  (=>(Mhp.request addGtpAgent mainAgent @robotName @id))
	  (!(GtpActions.handleReport Mhp @id @gtpId))

	  (!(Mhp.getFreeId @id))
	  (=>(Mhp.request addGtpObject mainObject @object @id))
	  (!(GtpActions.handleReport Mhp @id @gtpId))

	  (!(Mhp.getFreeId @id))
	  (=>(Mhp.request addGtpData hand @hand @id))
	  (!(GtpActions.handleReport Mhp @id @gtpId))

	  (!(GtpActions.executeTask pick @gtpId))

	  
	  )
   )

(defop |place|
  :invocation(GtpActions.action place @mainObject @supportObject @hand @x @y @theta @constraintArea @noUse)
  :body (
	  (?(Robot.name @robotName))
	  
	  (!(Mhp.getFreeId @id))
	  (=>(Mhp.request addGtpAgent mainAgent @robotName @id))
	  (!(GtpActions.handleReport Mhp @id @gtpId))

	  (!(Mhp.getFreeId @id))
	  (=>(Mhp.request addGtpObject mainObject @mainObject @id))
	  (!(GtpActions.handleReport Mhp @id @gtpId))

	  (!(Mhp.getFreeId @id))
	  (=>(Mhp.request addGtpObject supportObject @supportObject @id))
	  (!(GtpActions.handleReport Mhp @id @gtpId))

	  (!(Mhp.getFreeId @id))
	  (=>(Mhp.request addGtpPoint target @x @y @theta))
	  (!(GtpActions.handleReport Mhp @id @gtpId))

	  (!(Mhp.getFreeId @id))
	  (=>(Mhp.request addGtpData hand @hand @id))
	  (!(GtpActions.handleReport Mhp @id @gtpId))

	  (!(GtpActions.executeTask place @gtpId))
	 )
  )

(defop |placeReachable|
  :invocation(GtpActions.action placeReachable @targetAgent @mainObject @supportObject @hand)
  :body (
	  (?(Robot.name @robotName))
	  
	  (!(Mhp.getFreeId @id))
	  (=>(Mhp.request addGtpAgent mainAgent @robotName @id))
	  (!(GtpActions.handleReport Mhp @id @gtpId))

	  (!(Mhp.getFreeId @id))
	  (=>(Mhp.request addGtpAgent targetAgent @targetAgent @id))
	  (!(GtpActions.handleReport Mhp @id @gtpId))

	  (!(Mhp.getFreeId @id))
	  (=>(Mhp.request addGtpObject mainObject @mainObject @id))
	  (!(GtpActions.handleReport Mhp @id @gtpId))

	  (!(Mhp.getFreeId @id))
	  (=>(Mhp.request addGtpObject supportObject @supportObject @id))
	  (!(GtpActions.handleReport Mhp @id @gtpId))

	  (!(Mhp.getFreeId @id))
	  (=>(Mhp.request addGtpData hand @hand @id))
	  (!(GtpActions.handleReport Mhp @id @gtpId))

	  (!(GtpActions.executeTask placeReachable @gtpId))

	 )
  )

(defop |travelTo|
  :invocation (GtpActions.action travelTo @object @point @gtpId)
  :documentation "@points (. @x  @y @z .) "
  :body (
	  (?(Robot.name @robotName))
	  

	  (!(Mhp.getFreeId @id))
	  (=>(Mhp.request addGtpAgent mainAgent @robotName @id))
	  (!(GtpActions.handleReport Mhp @id @gtpId))



	  (IF(?(~(EQUAL @object NO_NAME)))
	       (!(Mhp.getFreeId @id))
	       (=>(Mhp.request addGtpObject target @object @id))
	       (!(GtpActions.handleReport Mhp @id @gtpId))
	      
	       ELSEIF(?(~(EQUAL @point NO_NAME)))
	       (!(Mhp.getFreeId @id))
	       (=>(Mhp.request addGtpPoint target @point @id))
	       (!(GtpActions.handleReport Mhp @id @gtpId))

	       ELSE
	       (=>(GtpActions.report (VAL @gtpId) FAILURE))
	       (!(FAILED))
	     )
	  
	  (!(GtpActions.executeTask "goto" @gtpId))
	 
	 )
  )

(defop |moveTo|
  :invocation(GtpActions.action moveTo @gtpId @configurationName @gtpId) 
  :body (
	  (?(Robot.name @robotName))
	  

	  (!(Mhp.getFreeId @id))
	  (=>(Mhp.request addGtpAgent mainAgent @robotName @id))
	  (!(GtpActions.handleReport Mhp @id @gtpId))



	  (!(Mhp.getFreeId @id))
	  (=>(Mhp.request addGtpData confName @configurationName @id))
	  (!(GtpActions.handleReport Mhp @id @gtpId))
	      
	  (!(GtpActions.executeTask moveto @gtpId))
	 
	  )
  )


 (defop |executeTask|
   :invocation(!(GtpActions.executeTask @task @gtpId))
   :body (

	  (!(Mhp.getFreeId @id))
	  (=>(Mhp.request fetchEnvironment @id))
	  (!(GtpActions.handleReport Mhp @id @gtpId))
	  
	  (!(Mhp.getFreeId @id))
	  (=>(Mhp.request planGtpTask @task @id))
	  (!(GtpActions.handleReport Mhp @id @gtpId))

	  (?(Mhp.previousTask @taskId @alternativeId))

	  (!(Mhp.getFreeId @id))
	  (=>(Mhp.request smoothGtpTraj @taskId @alternativeId @id))
	  (!(GtpActions.handleReport Mhp @id @gtpId))


	  (!(Mhp.getFreeId @id))
	  (=>(Mhp.request getGtpTaskDetails @taskId @alternativeId @id))
	  (^(Mhp.report (VAL @id) @report))
	  (~>(Mhp.report (VAL @id) (VAL @report)))
	  
	  (!(= @follow 0))
	  (IF(?(EQUAL @report "OK"))
	     (^(Mhp.result (VAL @id) @trajList))
	     (~>(Mhp.result (VAL @id) (VAL @trajList)))
	     (WHILE(?(~(NULL @trajList)))
		   (!(= @traj (CAR @trajList)))
		   (!(= @trajList (CDR @trajList)))
		   
;		   (!(== (VAL @traj) (. @subTrajId @dummy @subTrajName @robot .)))
		   ;;unification doesn't seem to work here =\ maybe because it was already unified somewhere?

		   (!(= @subTrajId (CAR @traj)))
		   (!(= @dummy (CAR(CDR @traj))))
		   (!(= @subTrajName (CAR(CDR(CDR @traj)))))
		   (!(= @robot (CAR(CDR(CDR(CDR @traj))))))  

		   (IF(?(EQUAL @subTrajName "grasp"))
		      (!(ArmActions.getFreeId @id))
		      (=>(ArmActions.action closeGripper RIGHT @id))
		      (!(GtpActions.handleReport ArmActions @id @gtpId))
		      
		      ELSEIF(?(EQUAL @subTrajName "release"))
		      (!(ArmActions.getFreeId @id))
		      (=>(ArmActions.action openGripper RIGHT @id))
		      (!(GtpActions.handleReport ArmActions @id @gtpId))

		      ELSEIF(?(EQUAL @subTrajName "navigate"))
		      (!(Mhp.getFreeId @id))
		      (=>(Mhp.request loadGtpTaskTrajForNav @taskId @alternativeId @subTrajId @follow @id))
		      (!(GtpActions.handleReport Mhp @id @gtpId))
		      (?(Mhp.result (VAL @id) @waypoints))
		      (~>(Mhp.result (VAL @id) @waypoints))
		      (!(= @finalWaypoints (LAST @waypoints)))
		      
		      (!(BaseActions.getFreeId @id))
		      (=>(BaseAction.action move @finalWaypoint @id))
		      (!(GtpActions.handleReport BaseActions @id @gtpId))
		      
		      ELSE
		      (!(Mhp.getFreeId @id))
		      (=>(Mhp.request loadGtpTaskTraj @taskId @alternativeId @subTrajId @follow @id))
		      (!(GtpActions.handleReport Mhp @id @gtpId))

		      (!(Softmotion.getFreeId @id))
		      (=>(Softmotion.request moveArm RARM @id))
		      (!(GtpActions.handleReport Softmotion @id @gtpId))
		      )
		   (!(Mhp.getFreeId @id))
		   (=>(Mhp.request fetchEnvironment @id))
		   (!(GtpActions.handleReport Mhp @id @gtpId))
	  

		   (!(= @follow 1))
		   )
	     )
	  (!(Mhp.getFreeId @id))
	  (=>(Mhp.request clearGtpInputs @id))
	  (!(GtpActions.handleReport Mhp @id @gtpId))

	  (=>(GtpActions.report @gtpId OK))

	  )
   )

(defop |handleReport|
     :invocation(!(GtpActions.handleReport @module @id @actionId))
     :documentation "Utility function to avoid some code duplication when waiting for the response of a genom module. This can't be used when we don't want to fail if the genom request fails"
     :body (
	  (!(= @reportName (TERM-STRING-CAT (VAL @module) ".report")))
	  (!(= @reportName (MAKE-ATOM @reportName)))

	  ;wait for a report or until we are paused or until we are stopped
	  (^(|| (@reportName (VAL @id) @report) (GtpActions.halt (VAL @actionId)) (GtpActions.stop (VAL @actionId))))
		
	  ;if we are paused we give a halt request if we were doing a softmotion request or simply wait for a resume
	  (IF(?(GtpActions.halt (VAL @actionId)))
	     (~>(GtpActions.halt (VAL @actionId)))
	     (IF(?(EQUAL @module Softmotion))
		   (!(Softmotion.getFreeId @smId))
		   (=>(Softmotion.request halt (VAL @smId)))
		   (^(Softmotion.report (VAL @smId) @smReport))
		   (~>(Softmotion.report (VAL @smId) (VAL @smReport)))
		   (^(@reportName (VAL @id) @report))
		   (~>(@reportName (VAL @id) (VAL @report)))

		   ELSEIF(?(EQUAL @module ArmActions))
		   (=>(ArmActions.halt (VAL @id)))
		   )
	     ;we wait for a stop or for a resume
	     (^(|| (GtpActions.stop (VAL @actionId)) (GtpActions.resume (VAL @actionId))))
	     (IF(?(GtpActions.resume (VAL @actionId)))   ;we ask to resume and recall this function to wait for the report
		(~>(GtpActions.resume (VAL @actionId)))
		(IF(?(EQUAL @module Softmotion))
		   (!(Softmotion.getFreeId @smId))
		   (=>(Softmotion.request resume @smId))
		   (^(Softmotion.report (VAL @smId) @smReport))
		   (~>(Softmotion.report (VAL @smId) (VAL @smReport)))
		   (^(ELAPSED-TIME (TIME) 3))

		   ELSEIF(?(EQUAL @module ArmActions))
		   (=>(ArmActions.resume (VAL @id)))
		   )
		ELSEIF(?(GtpActions.stop (VAL @actionId)))
		(~>(GtpActions.stop (VAL @actionId)))
		
		(IF(?(EQUAL @module Softmotion))
		   (=>(Softmotion.stop (VAL @id)))    
		      (!(Softmotion.getFreeId @smId))
		      (=>(Softmotion.request stop (VAL @smId)))
		      (^(Softmotion.report (VAL @smId) @smReport))
		      (~>(Softmotion.report (VAL @smId) (VAL @smReport)))
		      (^(|| (@reportName (VAL @id) @report)))
		      (~>(@reportName (VAL @id) @report))
		      
		      
		      ELSEIF(?(EQUAL @module ArmActions))
		      (=>(ArmActions.stop @id))
		      
		      ELSEIF(?(EQUAL @module Mhp))
		      (=>(Mhp.stop (VAL @id)))
		      )
		(=>(GtpActions.report @actionId STOPPED))
		(!(FAILED))
		)
	     
	     
	     ELSEIF(?(GtpActions.stop (VAL @actionId)))
	     (~>(GtpActions.stop (VAL @actionId)))
	     
 	     (IF(?(EQUAL @module Softmotion))
		(=>(Softmotion.stop (VAL @id)))    
		(!(Softmotion.getFreeId @smId))
		(=>(Softmotion.request stop (VAL @smId)))
		(^(Softmotion.report (VAL @smId) @smReport))
		(~>(Softmotion.report (VAL @smId) (VAL @smReport)))
		(^(|| (@reportName (VAL @id) @report)))
		(~>(@reportName (VAL @id) @report))
		
		ELSEIF(?(EQUAL @module ArmActions))
		(=>(ArmActions.stop @id))
	       	
		ELSEIF(?(EQUAL @module Mhp))
		(=>(Mhp.stop (VAL @id)))
		)
	     (=>(GtpActions.report @actionId STOPPED))
	     (!(FAILED))
	     
	     
	     ELSE	 ;we got a report. If it's a good report we continue if not we report a fail and exit.
	     (~>( @reportName (VAL @id) (VAL @report)))
	     (IF(?(~(EQUAL @report "OK")))
		(!(PRINT @report))
		(=> (GtpActions.report (VAL @actionId) @report))
		(!(FAILED))
		)
	     )
	  )
     )

 

)
