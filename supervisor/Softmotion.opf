;; -*-Lisp-*-
;;author: Michelangelo Fiore
;;This module handles Softmotion requestes. These procedures are thread safe. Each part of the body is governed by a different mutex.


(
 (defop |init|
   :invocation(!(Softmotion.init))
   :documentation "Initializes the module"
   :body (
	  (!(SEM-CREATE Softmotion.semRArm 1 SEM-FIFO))
	  (!(SEM-CREATE Softmotion.semLArm 1 SEM-FIFO))
	  (!(SEM-CREATE Softmotion.semRGripper 1 SEM-FIFO))
	  (!(SEM-CREATE Softmotion.semLGripper 1 SEM-FIFO))
	  (!(SEM-CREATE Softmotion.semHead 1 SEM-FIFO))
	  (!(SEM-CREATE Softmotion.semStop 1 SEM-FIFO))
	  (!(SEM-CREATE Softmotion.sem 1 SEM-FIFO))
	  (=>(Softmotion.freeId 0))
	  )
   )

(defop |Softmotion.getFreeId|
   :invocation(!(Softmotion.getFreeId $id))
   :documentation "gets a new id for requestes"
   :body (
	  (!(SEM-P Softmotion.sem))
	  (?(Softmotion.freeId $id))

	  (=>(Softmotion.freeId (+ $id 1)))
	  (!(SEM-V Softmotion.sem))
	  )
   )
 (defop |moveArm|
   :invocation(Softmotion.request moveArm @armId @id)
   :documentation "Executes the trajectory calculated previously by MHP"
   :body (
	  (?(Softmotion.arm @arm (VAL @armId)))
	  (IF(?(EQUAL @arm RIGHT))
	     (!(SEM-P Softmotion.semRArm))
	     
	     ELSE
	     (!(SEM-P Softmotion.semLArm))
	     )
	  
	  (=>(Softmotion.freeId (+ @id 1)))
	  
	  (!(= @parameters 
	       (PR2SM_TRACK_STR 
		(posterName 
		 (name  "mhpArmTraj"))	     
		(trackMode PR2SM_TRACK_POSTER )
		(robotPart (VAL @armId)))))

	  (!(GenomInterface.handleRequest  PR2SOFTMOTION PR2SOFTMOTION_TRACKQ (Softmotion.stop (VAL @id)) (Robot.isMovingArm (VAL @arm) TRUE) (Robot.isMovingArm (VAL @arm) FALSE) 300 (VAL @parameters) @report @result))
	  (=>(Softmotion.report (VAL @id) (VAL @report)))
	  (=>(Softmotion.freeId (+ @id 1)))
	 
	  (IF(?(EQUAL @arm RIGHT))
	     (!(SEM-V Softmotion.semRArm))
	     ELSE
	     (!(SEM-V Softmotion.semLArm))
	     ) 
	  (!(Mhp.cleanTrajectories))
	  )
   
   )

 (defop |moveHead|
   :invocation(Softmotion.request moveHead @pan @tilt @id)
   :documentation "Moves the head of the robot"
   :body  (
	   
	   (!(SEM-P Softmotion.semHead))

	   (=>(Softmotion.freeId (+ @id 1)))
	   (!(= @parameters 
		(PR2SM_QSTR 
		 (robotPart  HEAD)
		 (relatif  0)
		 (base_tx  0.0)
		 (base_ty  0.0)
		 (base_tz  0.0)
		 (base_rx  0.0)
		 (base_ry  0.0)
		 (base_rz  0.0)
		 (torso  0.0)
		 (head_pan  (VAL @pan))
		 (head_tilt  (VAL @tilt))
		 (laser_tilt  0.0)
		 (r_shoulder_pan  0.0)
		 (r_shoulder_lift  0.0)
		 (r_upper_arm_roll  0.0)
		 (r_elbow_flex  0.0)
		 (r_forearm_roll  0.0)
		 (r_wrist_flex  0.0)
		 (r_writ_roll  0.0)
		 (r_gripper  0.0)
		 (r_gripper_false  0.0)
		 (l_shoulder_pan  0.0)
		 (l_shoulder_lift  0.0)
		 (l_upper_arm_roll  0.0)
		 (l_elbow_flex  0.0)
		 (l_forearm_roll  0.0)
		 (l_wrist_flex  0.0)
		 (l_wrist_roll  0.0)
		 (l_gripper  0.0)
		 (l_gripper_false  0.0))
		))
	   
	   

	   (!(GenomInterface.handleRequest PR2SOFTMOTION PR2SOFTMOTION_GOTOQ (Softmotion.stop (VAL @id)) (Robot.isMovingHead TRUE) (Robot.isMovingHead FALSE) 300 (VAL @parameters) @report @result))
	   (=>(Softmotion.report (VAL @id) (VAL @report)))
	   (!(SEM-V Softmotion.semHead))

	   )
   )

(defop |halt|
  :invocation (Softmotion.request halt @id)
  :documentation "Halts the execution, waiting for a resume"
  :body (
	  (!(SEM-P Softmotion.semStop))
	  
	  (=>(Softmotion.freeId (+ @id 1)))
	  
	  (!(GenomInterface.handleRequest PR2SOFTMOTION PR2SOFTMOTION_HALT (Softmotion.stop (VAL @id)) (FALSE) (FALSE) 300  NIL @report @result))
	  (=>(Softmotion.report (VAL @id) (VAL @report)))

	  (!(SEM-V Softmotion.semStop))
	  )
  )
  

(defop |resume|
  :invocation (Softmotion.request resume @id)
  :documentation "Halts the execution, waiting for a resume"
  :body (
	  (!(SEM-P Softmotion.semStop))
	  
	  (=>(Softmotion.freeId (+ @id 1)))
	  
	  (!(GenomInterface.handleRequest PR2SOFTMOTION PR2SOFTMOTION_RESUME (Softmotion.stop (VAL @id)) (FALSE) (FALSE) 300  NIL @report @result))
	  (=>(Softmotion.report (VAL @id) (VAL @report)))

	  (!(SEM-V Softmotion.semStop))
	  )
  )

 (defop |stop|
   :invocation (Softmotion.request stop @id)
   :documentation "Stops the robot. This is not really safe i guess. The user should cancel all ongoing softmotion requestes or prepare for some failure reports"
   :body (
	  (!(SEM-P Softmotion.semStop))
	  
	  (=>(Softmotion.freeId (+ @id 1)))
	  
	  (!(GenomInterface.handleRequest PR2SOFTMOTION PR2SOFTMOTION_STOP (Softmotion.stop (VAL @id)) (FALSE) (FALSE) 300  NIL @report @result))
	  (=> (Robot.isMovingHead FALSE))
	  (=> (Robot.isMovingArm RIGHT FALSE))
	  (=> (Robot.isMovingArm LEFT FALSE))
	  (=> (Robot.isMoving FALSE))
	  (=>(Softmotion.report (VAL @id) (VAL @report)))

	  (!(SEM-V Softmotion.semStop))
	  )
   )


 
 (defop |useGripper|
   :invocation (Softmotion.request useGripper @state @id)
   :documentation "opens or closes the gripper of the robot"
   :body (
	 
	  
	  (=>(Softmotion.freeId (+ @id 1)))
	  (IF(?(||(EQUAL @state ROPEN) (EQUAL @state RCLOSE) (EQUAL @state RCANCEL) (EQUAL @state RGRAB) (EQUAL @state RRELEASE)))
	     (!(SEM-P Softmotion.semRGripper))
	     
	     ELSE
	     (!(SEM-P Softmotion.semLGripper))
	     )
	  
	  (!(= @irAddFact (FALSE)))
	  (IF(?(EQUAL @state ROPEN))
	     (!(= @stopFact (Robot.gripper RIGHT OPEN)))
	     
	     ELSEIF(?(EQUAL @state RRELEASE))
	     (!(= @stopFact (Robot.gripper RIGHT OPEN_AFTER_PRESSION)))
	     (!(= @irAddFact (Robot.gripper RIGHT WAITING_PRESSION)))

	     ELSEIF(?(EQUAL @state RCLOSE))
	     (!(= @stopFact (Robot.gripper RIGHT CLOSE)))
	     
	     ELSEIF(?(EQUAL @state RCANCEL))
	     (IF(?(Robot.gripper RIGHT WAITING_PRESSION))
		(!(= @stopFact (Robot.gripper RIGHT CLOSE)))
		
		ELSEIF(?(Robot.gripper RIGHT WAITING_CONTACT))
		(!(= @stopFact (Robot.gripper RIGHT OPEN)))
		
		ELSE
		(!(= @stopFact (FALSE))) 
		)
	     
	     ELSEIF(?(EQUAL @state RGRAB))
	     (!(= @stopFact (Robot.gripper RIGHT CLOSE_AFTER_CONTACT)))
	     (!(= @irAddFact (Robot.gripper RIGHT WAITING_CONTACT)))
	     
	     
	     ELSEIF(?(EQUAL @state LOPEN))
	     (!(= @stopFact (Robot.gripper LEFT OPEN)))
	     
	     ELSEIF(?(EQUAL @state LRELEASE))
	     (!(= @stopFact (Robot.gripper LEFT OPEN_AFTER_PRESSION)))
	     (!(= @irAddFact (Robot.gripper LEFT WAITING_PRESSION)))

	     ELSEIF(?(EQUAL @state LCLOSE))
	     (!(= @stopFact (Robot.gripper LEFT CLOSE)))
	     
	     ELSEIF(?(EQUAL @state LCANCEL))
	     (IF(?(Robot.gripper LEFT WAITING_PRESSION))
		(!(= @stopFact (Robot.gripper LEFT CLOSE)))
		
		ELSEIF(?(Robot.gripper LEFT WAITING_CONTACT))
		(!(= @stopFact (Robot.gripper LEFT OPEN)))
		ELSE
		(!(= @stopFact (FALSE))) 
		)
	    
	     ELSEIF(?(EQUAL @state LGRAB))
	     (!(= @stopFact (Robot.gripper LEFT CLOSE_AFTER_CONTACT)))
	     (!(= @irAddFact (Robot.gripper LEFT WAITING_CONTACT)))
	     
	     )


	  (IF(?(|| (EQUAL @state RRELEASE) (EQUAL @state LRELEASE)))
	     (!(= @waitTime (FALSE)))

	     ELSE
	  (!(= @waitTime 300))
	  )
      
	  
	  (IF (?(Robot.simu FALSE)) ;;the gripper doesn't seem to work in simulation
	      (!(= @parameters (PR2SM_gripperGrabRelease (VAL @state))))	     
	      (!(GenomInterface.handleRequest PR2SOFTMOTION PR2SOFTMOTION_GRIPPERGRABRELEASE (Softmotion.stop (VAL @id)) (VAL @irAddFact) (VAL @stopFact) (VAL @waitTime) @parameters @report @result)) 
	      (=>(Softmotion.report (VAL @id) (VAL @report)))
	      
	      ELSEIF(?(EQUAL @state RRELEASE))
	      (^(Softmotion.stop (VAL @id)))
	      (~>(Softmotion.stop (VAL @id)))
	      (=>(Softmotion.report (VAL @id) "OK"))
	      
	      ELSE
	      (=>(VAL @stopFact))
	      (=>(Softmotion.report (VAL @id) "OK"))
	      )

	  (IF(?(||(EQUAL @state ROPEN) (EQUAL @state RGRAB) (EQUAL @state RCLOSE) (EQUAL @state RCANCEL) (EQUAL @state RRELEASE)))
	     (!(SEM-V Softmotion.semRGripper))
	     
	     ELSE
	     (!(SEM-V Softmotion.semLGripper))
	     )

	  )
   )
 

 (defop |getPanTiltFromXYZ|
   :invocation(Softmotion.request getPanTiltFromXYZ @x @y @z @id)
   :documentation "get the pan and tilt to move the head to look at a point x y z"
   :body (
	  (!(SEM-P Softmotion.semHead)) 
	  
	  (=>(Softmotion.freeId (+ @id 1)))
	  (!(= @parameters (PR2SM_xyzHead 
           (x  (VAL @x))
           (y  (VAL @y))
           (z  (VAL @z))
           (frame  "/map"))
	       ))
	  
	  (!(GenomInterface.handleRequest PR2SOFTMOTION PR2SOFTMOTION_GETPANTILTFROMXYZ (Softmotion.stop (VAL @id)) (FALSE) (FALSE) 300 @parameters @report @result))
	  (=>(Softmotion.report (VAL @id) (VAL @report)))

	  (!(== (VAL @result) (PR2SM_PanTilt 
			     (pan  @pan)
			     (tilt  @tilt))
		))
	  (=>(Softmotion.result (VAL @id) (VAL @pan) (VAL @tilt)))

	  (!(SEM-V Softmotion.semHead)) 
	  )

 
   )

(defop |detectPression|
  :invocation(Softmotion.request detectPression @state @id)
  :documentation "Request for detect pression. It accepts as @state every possibile state of the gripper, but for some of these states I don't know what the procedure will actually do. Release and Grab are tested and fine."
  :body (
	  (IF(?(||(EQUAL @state ROPEN) (EQUAL @state RCLOSE) (EQUAL @state RCANCEL) (EQUAL @state RGRAB) (EQUAL @state RRELEASE)))

	     (!(= @stopFact (Robot.gripper RIGHT DETECTED_PRESSION)))
	     (!(= @irAddFact (Robot.gripper RIGHT DETECTING_PRESSION)))	     
	     ELSE

	     (!(= @stopFact (Robot.gripper LEFT DETECTED_PRESSION)))
	     (!(= @irAddFact (Robot.gripper LEFT DETECTING_PRESSION)))	     
	     )
	  
	 (!(= @parameters (PR2SM_gripperGrabRelease (VAL @state))))	     
	 (!(GenomInterface.handleRequest PR2SOFTMOTION PR2SOFTMOTION_DETECTPRESSION (Softmotion.stop (VAL @id)) @irAddFact @stopFact (FALSE) @parameters @report @result)) 
	 (=>(Softmotion.report (VAL @id) (VAL @report)))
	 

	  
	 )

  )


)
