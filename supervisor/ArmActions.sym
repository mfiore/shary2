declare cwp Robot.closeToObject

;;global
declare ff ArmActions.freeId 0
declare be ArmActions.action ;;used for every invocation of an action
declare cwp ArmActions.result
declare cwp ArmActions.stop
declare cwp ArmActions.report
declare ff ArmActions.detectPression 2

;;init

declare op_predicate ArmActions.init

;;getFreeId

declare op_predicate ArmActions.getFreeId
declare symbol id

;;moveTo
declare symbol moveTo
declare symbol arm
declare symbol taskect
declare symbol armGoto
declare symbol object
declare symbol support
declare symbol placement
declare symbol useObjGoto
declare symbol objGoto
declare symbol actionId
declare symbol armStart
declare predicate objStart
declare symbol mhpId
declare symbol smId
declare symbol mhpArm
declare symbol smArm


;escape object
declare symbol escapeObject
declare symbol arm
declare symbol object 
declare symbol actionId
declare symbol armGoto
declare cwp objGoto

;moveToX
declare symbol moveToX
declare symbol arm
declare symbol object
declare symbol x
declare symbol y
declare symbol z
declare symbol actionId
declare symbol task
declare symbol armGoto
declare symbol objGoto
declare predicate objGoto

;moveToQ
declare symbol moveToQ
declare symbol arm
declare symbol object
declare symbol q0
declare symbol q1
declare symbol q2 
declare symbol q3
declare symbol q4
declare symbol q5
declare symbol q6
declare symbol actionId
declare symbol task
declare symbol armGoto
declare symbol objGoto
declare cwp objGoto


;moveToObject
declare symbol moveToObject
declare symbol arm
declare symbol object
declare symbol actionId
declare symbol objStart
declare symbol objGoto
declare cwp objStart
declare cwp objGoto
declare symbol armGoTo

;goToPlaceObject
declare symbol movetoPlaceObject
declare symbol arm
declare symbol object
declare symbol support
declare symbol placement
declare symbol actionId
declare symbol task
declare symbol armGoto
declare symbol objGoto
declare predicate objGoto

;moveToRestPosition
declare symbol movetoRestPosition
declare symbol arm
declare symbol actionId

;moveToExtendedPosition
declare symbol moveToExtendedPosition
declare symbol arm
declare symbol q0
declare symbol actionId

;moveToReadyPosition
declare symbol moveToReadyPosition
declare symbol arm
declare symbol q0 
declare symbol actionId

;closeGripper
declare symbol closeGripper
declare symbol gripper
declare symbol actionId
declare symbol state

;openGripper
declare symbol openGripper
declare symbol gripper
declare symbol actionId
declare symbol state

;openGripperOnPressure
declare symbol openGRipperOnPressure
declare symbol gripper
declare symbol actionId
declare symbol state

;use Gripper
declare symbol useGripper
declare symbol gripper
declare symbol state
declare symbol actionId
declare symbol smId

;stopOpenGripperOnPressure
declare symbol stopOpenGripperOnPressure
declare symbol gripper
declare symbol actionId
declare symbol smId
declare symbol report
declare symbol state

;handleReport
declare op_predicate ArmActions.handleReport
declare symbol reportName
declare symbol id
declare symbol actionId
declare symbol report
