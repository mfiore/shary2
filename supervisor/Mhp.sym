;;GENERAL
declare symbol Mhp.sem
declare ff Mhp.freeId 0
declare be Mhp.request
declare cwp Mhp.report
declare cwp Mhp.result
declare cwp Mhp.stop
declare symbol MHP
declare symbol MHP_RIGHT_ARM
declare symbol MHP_LEFT_ARM
declare symbol MHP_ARM_PICK_GOTO
declare symbol MHP_ARM_PLACE_FROM_FREE
declare symbol MHP_ARM_TAKE_TO_FREE
declare symbol MHP_ARM_FREE
declare symbol MHP_ARM_TAKE_TO_PLACE
declare cwp Mhp.hasTrajectory

;;init
declare op_predicate Mhp.init

;getFreeId
declare op_predicate getFreeId
declare symbol id

;makeArmStartParameter
declare op_predicate makeArmStartParameter
declare symbol q1
declare symbol q2
declare symbol q3
declare symbol q4
declare symbol q5
declare symbol q6 
declare symbol q7
declare symbol armStart
declare predicate armStart
declare predicate q1
declare predicate q2
declare predicate q3
declare predicate q4
declare predicate q5
declare predicate q6
declare predicate q7


;makeArmGoToParameter
declare op_predicate makeArmGotoParameter
declare symbol q1
declare symbol q2
declare symbol q3
declare symbol q4
declare symbol q5
declare symbol q6
declare symbol q7
declare symbol armGoto

declare predicate armGoto
declare predicate q1
declare predicate q2
declare predicate q3
declare predicate q4
declare predicate q5
declare predicate q6
declare predicate q7


;setTrajectories
declare symbol setTrajectories
declare symbol trajList
declare symbol useobjStart
declare cwp Mhp.stopSetTrajectories
declare symbol traj
declare symbol task
declare symbol armId
declare symbol armGoto
declare symbol object
declare symbol support
declare symbol placement
declare symbol cartesian
declare symbol useObjGoto
declare symbol objGoto
declare symbol mhpTrajId

;setTrajectory
declare symbol setTrajectory
declare symbol startIsCurrent
declare symbol task
declare symbol armId
declare symbol armStart
declare symbol armGoto
declare symbol object
declare symbol support
declare symbol placement
declare symbol cartesian
declare symbol useObjStart
declare symbol objStart
declare symbol useObjGoto
declare symbol objgoto
declare symbol mhpId

declare symbol mhpId2
declare symbol trajId
declare symbol report
declare symbol report1
declare symbol mhpId3
declare symbol report2

;;armSelectTraj
declare symbol armSelectTraj
declare symbol trajId
declare symbol id
declare symbol parameters
declare predicate INTEGER
declare symbol ARMSELECT_TRAJ
declare symbol report
declare symbol result

;;choseTargetForTrajectory
declare op_predicate chooseTargetForTrajectory
declare symbol task
declare symbol object
declare symbol placement
declare symbol armGoto
declare symbol useObjGoto
declare symbol objGoto
declare symbol target

;;armPlanTask
declare symbol armPlanTask
declare symbol startIsCurrent
declare symbol task
declare symbol armId
declare symbol armStart
declare symbol armGoto
declare symbol object
declare symbol support
declare symbol placement
declare symbol cartesian
declare symbol useObjStart
declare symbol objStart
declare symbol useObjGoto
declare symbol id
declare symbol parameters

declare predicate STRUCT_MHP_ARM_PLAN_PARAMS
declare predicate trajId
declare predicate startIsCurrent
declare predicate taskType
declare predicate armId
declare predicate objectName
declare predicate supportName
declare predicate placementName
declare predicate cartesian
declare predicate useObjStart
declare predicate unused2
declare predicate useObjGoto

declare symbol MHP_ARMPLANTASK

;;selectTrajId
declare op_predicate Mhp.getTrajId
declare symbol trajId
declare symbol i
declare symbol isFound
declare symbol armId
declare symbol task
declare symbol target


;cleanTrajectories
declare op_predicate cleanTrajectories
declare cwp Mhp.stopSetTrajectories
declare symbol toDo
declare symbol id
declare symbol armId
declare symbol task
declare symbol target

