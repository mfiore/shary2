;; -*-Lisp-*-
;;author: Michelangelo Fiore
;;this files contains procedures to monitor actions by other agentsÃ¹




(

 (defop |init|
   :invocation(!(AgentActionMonitor.init))
   :body (
	  (!(SEM-CREATE AgentActionMonitor.sem 1 SEM-FIFO))
	  (!(AgentActionMonitor.cleanMonitorSpheres))
	  (=>(AgentActionMonitor.startMonitorSphereLoop))
	  )
   )

 (defop |startMonitoringAgent|
   :invocation(!(AgentActionMonitor.startMonitoringAgent @agent))
   :body (
	  (?(MonitorManager.lastPriority @lastPriority))  ; the usual problem in dealing with priorities
	  (!(MonitorManager.getFreeId @monitorId))
	  (!(= @priority (+ @lastPriority 1)))
	  
	     ;;set the parameters for the monitor manager
	  (!(= @successConditions (. (.(PlanManager.agentReport (VAL @agent) OK) .) (. .) .)))
	  (!(= @failureConditions (. (. (PlanManager.agentReport (VAL @agent) FAILURE) .) (. .) .) )) 		    
	  (?(Spark.humanHead @sparkHumanHead))
	  
					;start the monitoring
	  (!(MonitorManager.monitorTarget @agent @sparkHumanHead @successConditions @failureConditions @priority @monitorId))
	  (=>(AgentActionMonitor.monitorId @agent @monitorId))

	  (=>(AgentActionMonitor.isMonitoringAgent @agent))
	  
	  )
   )

 (defop |stopMonitoringAgent|
   :invocation(!(AgentActionMonitor.stopMonitoringAgent @agent))
   :body (
	  (IF(?(AgentActionMonitor.isMonitoringAgent (VAL @agent)))
	     (?(AgentActionMonitor.monitorId (VAL @agent) @monitorId))
	     (IF(?(MonitorManager.isMonitoringTarget (VAL @monitorId)))
		(=>(MonitorManager.cancelMonitoring (VAL @monitorId)))
		)
	     (~>(AgentActionMonitor.monitorId (VAL @agent) (VAL @monitorId)))
	     )
	  (~>(AgentActionMonitor.isMonitoringAgent (VAL @agent)))
	  )
   )






 (defop |cleanMonitorSpheres|
   :invocation(!(AgentActionMonitor.cleanMonitorSpheres))
   :body (
	  
	  (!(= @sphereId 0))
	  (WHILE(?(< @sphereId 10))
		(!(Spark.getFreeId @sparkId))
		(=>(Spark.request updateSphereMonitor (VAL @sphereId) GEN_FALSE GREY_TAPE 0 HERAKLES_HUMAN1 0 0 0 SPARK_PICK_OBJECT (VAL @sparkId)))
		(^(Spark.report (VAL @sparkId) @report))
		(~>(Spark.report (VAL @sparkId) @report))
		(IF(?(AgentActionMonitor.sphere @agent @object (VAL @sphereId)))
		   (~>(AgentActionMonitor.sphere (VAL @agent) (VAL @object) (VAL @sphereId)))
		   )
		(!(= @sphereId (+ @sphereId 1)))
		)
	  )
   )

 (defop |cleanAgentMonitorSpheres|
   :invocation(!(AgentActionMonitor.cleanAgentMonitorSpheres @agent))
   :body (
	  
	  (!(= @sphereId 0))
	  (WHILE(?(< @sphereId 10))
		(IF(?(AgentActionMonitor.sphere (VAL @agent) @object (VAL @sphereId)))
		   (!(Spark.getFreeId @sparkId))
		   (=>(Spark.request updateSphereMonitor (VAL @sphereId) GEN_FALSE GREY_TAPE 0 HERAKLES_HUMAN1 0 0 0 SPARK_PICK_OBJECT (VAL @sparkId)))
		   (^(Spark.report (VAL @sparkId) @report))
		   (~>(Spark.report (VAL @sparkId) @report))
		   (~>(AgentActionMonitor.sphere (VAL @agent) (VAL @object) (VAL @sphereId)))
		   )
		(!(= @sphereId (+ @sphereId 1)))
		)
	  )
   )
 (defop |cleanMonitorSphere|
   :invocation (!(AgentActionMonitor.cleanMonitorSphere @sphereId))
   :body (
	  (!(Spark.getFreeId @sparkId))
	  (=>(Spark.request updateSphereMonitor (VAL @sphereId) GEN_FALSE GREY_TAPE 0 HERAKLES_HUMAN1 0 0 0 SPARK_PICK_OBJECT (VAL @sparkId)))
	  (^(Spark.report (VAL @sparkId) @report))
	  (~>(Spark.report (VAL @sparkId) @report))
	  (IF(?(AgentActionMonitor.sphere @agent @object (VAL @sphereId)))
	     (~>(AgentActionMonitor.sphere @agent @object (VAL @sphereId)))
	     )
	     
	  )
   )
 (defop |activateMonitorSpheres|
   :invocation (!(AgentActionMonitor.activateMonitorSpheres @objectList @agent))
   :body (

	  ;;activate monitor spheres
	  
	  (WHILE(?(~(NULL @objectList)))
		(!(= @currentObject (CAR @objectList)))
		(!(= @objectList (CDR @objectList)))

		   ;;get the coordinates of the object
		   (!(Spark.getFreeId @sparkId))
		   (=>(Spark.request getJointAbsPose @currentObject NO_NAME @sparkId))
		   (^(Spark.report (VAL @sparkId) @report))
		   (^(Spark.result (VAL @sparkId) @x @y @z @yaw @pitch @roll))
		   (~>(Spark.report (VAL @sparkId) @report))
		   (~>(Spark.result (VAL @sparkId) (VAL @x) (VAL @y) (VAL @z) (VAL @yaw) (VAL @pitch) (VAL @roll)))		
		   ;;activate a monitor sphere
		   (!(Spark.getFreeId @sparkId))
		   (!(Spark.getFreeSphereId @sphereId))
		   (?(Spark.humanHand RIGHT @sparkHand))
		   (?(Spark.typeMonitorSphere (VAL @currentObject) @sphereType))
		   
		   (=>(Spark.request updateSphereMonitor (VAL @sphereId) GEN_TRUE (VAL @currentObject) (VAL @sparkHand)
				     (VAL @agent) (VAL @x) (VAL @y) (VAL @z) (VAL @sphereType) (VAL @sparkId)))
		   (^(Spark.report (VAL @sparkId) @report))
		   (~>(Spark.report (VAL @sparkId) @report))
		   
		   (=>(AgentActionMonitor.sphere @agent @currentObject @sphereId))
		   )
	  
		
	  )
   
   )
 
 
 
 (defop |objectAppears|
   :invocation(objectAppears @object)
   :documentation "when an object appears we check if a human had it and in that case remove the inference" 
   :body (
	  (!(SEM-P AgentActionMonitor.sem ))
	  (IF(?(Agent.hasObject @agent (VAL @object)))
		(~>(Agent.hasObject (VAL @agent) (VAL @object)))
		(!(Spark.getFreeId @sparkId))
		(?(Spark.humanHand RIGHT @sparkHand))
		(=>(Spark.request setInferrenceForObject @object 0 @agent @sparkHand SPARK_HUMAN_HAND 1.0 @sparkId))
		)
	  
	  ;activate monitor spheres for every present agent
	  (!(DatabaseInterface.findList (AGENT-STATEMENT PR2_ROBOT @presentAgents isPresent true) (. @presentAgents .) @result))
	  (!(= @agents (CAR @result)))
	  (WHILE(?(~(NULL @agents)))
		(!(= @agent (CAR @agents)))
		(!(= @agents (CDR @agents)))
		(IF(?(~(AgentActionMonitor.sphere (VAL @agent) (VAL @object) @sphereId)))
		   (!(PRINT "loop!"))
		   (!(AgentActionMonitor.activateMonitorSpheres (. @object .) @agent))
		   )
		)
	  (!(SEM-V AgentActionMonitor.sem ))
	  )
   )

 (defop |MonitorSphereLoop|
   :invocation(AgentActionMonitor.startMonitorSphereLoop) 
   :body (
	  (WHILE(?(~(AgentActionMonitor.stopMonitorSphereLoop)))
		(!(AgentActionMonitor.readMonitorSpheresPoster))
		(^ (ELAPSED-TIME (TIME) 1))
		)
	  (~>(AgentActionMonitor.stopMonitorSphereLoop))
	  )
   
   )
 
 (defop |stopMonitorSphere|
   :invocation(!(AgentActionMonitor.stopMonitorSphere @sphereId))
   :body (
	  (!(Spark.getFreeId @sparkId))
	  (=>(Spark.request updateSphereMonitor (VAL @sphereId) GEN_FALSE GREY_TAPE 0 HERAKLES_HUMAN1 0 0 0 SPARK_PICK_OBJECT (VAL @sparkId)))
	  (^(Spark.report (VAL @sparkId) @report))
	  (~>(Spark.report (VAL @sparkId) @report))
	  (IF(?(AgentActionMonitor.sphere @agent @object (VAL @sphereId)))
	     (~>(AgentActionMonitor.sphere (VAL @agent) (VAL @object) (VAL @sphereId)))
	     )
	  )
   )

 (defop |readMonitorSpherePoster|
   :invocation(!(AgentActionMonitor.readMonitorSpheresPoster))
   :documentation "Reads the monitor sphere poster and updates knowledge"
   :body (
	  (!(READ-POSTER-INTERNAL SPARK_MONITORINGSPHERES @poster))
	  (IF(! (==  (VAL @poster) (SPARK_MONITORINGSPHERES_POSTER_STR (monitoringSpheres @spheres (modifIndex @currentSpheresModifIndex)))))
	     (!(= @sphereId 0))
	     (!(= @spheresList (BUILD-LLISP-FROM-TERM-COMP @spheres)))
	     (!(= @spheresList (CDR @spheresList)))
	     (WHILE(?(< @sphereId 10)) ;for all the spheres get the parameters
		   (!(= @element (CAR @spheresList)))
		   (!(== (VAL @element) (isSphereActive @isSphereActive)))
		   (!(= @spheresList (CDR @spheresList)))
		   (!(= @element (CAR @spheresList)))
		   (!(== (VAL @element) (agentName (name @agentFactName))))
		   (!(= @spheresList (CDR @spheresList)))		   
		   (!(= @element (CAR @spheresList)))
		   (!(== (VAL @element) (agentIndex @agentIndex)))
		   (!(= @spheresList (CDR @spheresList)))
		   (!(= @element (CAR @spheresList)))
		   (!(== (VAL @element) (objectName (name @objectFactName))))
		   (!(= @spheresList (CDR @spheresList)))
		   (!(= @element (CAR @spheresList)))
		   (!(== (VAL @element) (entityIndex @entityIndex)))
		   (!(= @spheresList (CDR @spheresList)))
		   (!(= @element (CAR @spheresList)))
		   (!(== (VAL @element) (handIndexInput @handIndexInput)))
		   (!(= @spheresList (CDR @spheresList)))
		   (!(= @element (CAR @spheresList)))
		   (!(== (VAL @element) (sphereCenter (x @x) (y @y) (z @z))))
		   (!(= @spheresList (CDR @spheresList)))
		   (!(= @element (CAR @spheresList)))
		   (!(== (VAL @element) (sphereRadius @radius)))
		   (!(= @spheresList (CDR @spheresList)))		   
		   (!(= @element (CAR @spheresList)))
		   (!(== (VAL @element) (filteringTimeThreshold @timeThreshold)))
		   (!(= @spheresList (CDR @spheresList)))		   
		   (!(= @element (CAR @spheresList)))
		   (!(== (VAL @element) (sphereType @sphereType)))
		   (!(= @spheresList (CDR @spheresList)))		   
		   (!(= @element (CAR @spheresList)))
		   (!(== (VAL @element) (monitorEnterInResult @monitorEnterInResult)))
		   (!(= @spheresList (CDR @spheresList)))		   
		   (!(= @element (CAR @spheresList)))
		   (!(== (VAL @element) (monitorGetOutResult @monitorGetOutResult)))
		   (!(= @spheresList (CDR @spheresList)))		   
		   (!(= @element (CAR @spheresList)))
		   (!(== (VAL @element) (handIndexResult @handIndexResult)))
		   (!(= @spheresList (CDR @spheresList)))		   
		   (!(= @element (CAR @spheresList)))
		   (!(== (VAL @element) (modifIndex @modifIndex)))
		   (!(= @spheresList (CDR @spheresList)))		   
		   (!(= @element (CAR @spheresList)))
		   (!(== (VAL @element) (dummy @dummy)))
		   (!(= @spheresList (CDR @spheresList)))		   
		   
					;if we were monitoring this action then we say it was completed, else it was an unexpected action
		   (!(= @agentName (MAKE-ATOM @agentFactName)))
		   (!(= @objectName (MAKE-ATOM @objectFactName)))	   
					;if this sphere is active
		   (IF(?(EQUAL @isSphereActive 1))
		      (IF(?(EQUAL @monitorGetOutResult 1)) ;if the target has entered the sphere
			 
					 
					;update spark inferences and knowledge
			 (IF(?(EQUAL @sphereType SPARK_PICK_OBJECT))
			    (IF(?(~(Agent.hasObject (VAL @agentName) @object)))
			       (IF(?(AgentActionMonitor.isMonitoringAgent (VAL @agentName)))
				  (IF(?(AgentActionMonitor.monitorAction (VAL @agentName) @actionId (VAL @sphereId)))
				     (~>(AgentActionMonitor.monitorAction (VAL @agentName) (VAL @actionId) (VAL @sphereId)))
				     (=>(AgentActionMonitor.actionCompleted (VAL @agentName) (VAL @actionId)))
				     ELSE
				     (=>(AgentActionMonitor.unexpectedAction (VAL @agentName)))
				     )
				  )
			       
					;erase this monitor sphere
			       (!(AgentActionMonitor.stopMonitorSphere (VAL @sphereId)))
			       
			       (!(Spark.getFreeId @sparkId))
			       (?(Spark.humanHand RIGHT @sparkHand))
			       (=>(Spark.request setInferrenceForObject @objectName 1 @agentName @sparkHand SPARK_HUMAN_HAND 1.0 @sparkId))
			       (^(Spark.report (VAL @sparkId) @report))
			       
			       (=>(Agent.hasObject @agentName @objectName))
			       )			 
			    )
			 ELSEIF(?(EQUAL @monitorGetInResult 1))
			 (IF(?(EQUAL @sphereType SPARK_THROW_IN_CONTAINER))
			    (IF(?(Agent.hasObject (VAL @agentName) @heldObject))
			       (!(PRINT "has object"))
			       (IF(?(AgentActionMonitor.isMonitoringAgent (VAL @agentName)))
				  (!(PRINT "is monitoring agent"))				 
				  (IF(?(AgentActionMonitor.monitorAction (VAL @agentName) @actionId (VAL @sphereId)))
				     (!(PRINT "monitor action"))
				     (~>(AgentActionMonitor.monitorAction (VAL @agentName) (VAL @actionId) (VAL @sphereId)))
				     (=>(AgentActionMonitor.actionCompleted (VAL @agentName) (VAL @actionId)))
				     (!(PRINT "action completed"))
				     ELSE
				     (=>(AgentActionMonitor.unexpectedAction (VAL @agentName)))
				     )
				  )
			       
				  (!(Spark.getFreeId @sparkId))
				  (?(Spark.humanHand RIGHT @sparkHand))
				  (=>(Spark.request setInferrenceForObject @heldObject 0 @agentName @sparkHand SPARK_HUMAN_HAND 1.0 @sparkId))
				  (^(Spark.report (VAL @sparkId) @report))
				  
				  (!(Spark.getFreeId @sparkId))
				  (=>(Spark.request setInferrenceForObject @heldObject 1 @objectName 0 SPARK_IS_IN 1.0 @sparkId))
				  (^(Spark.report (VAL @sparkId) @report))
				  
				  (~>(Agent.hasObject (VAL @agentName) (VAL @heldObject)))
				  
				  )
			    )
			 )
		      
		      
		      )
		   (!(= @sphereId (+ @sphereId 1)))	 
		   )
	     
	     )
	  
	  )  	  
   )
 )




