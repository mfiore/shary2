;; -*-Lisp-*-
;;author: Michelangelo Fiore
;;this files contains the attentional system of the supervisor. This
;;module reads spark posters, analyzes data and updates the Database. At the moment data from spark are simply inserted into the Database with no processing.

(
 (defop |AsyncParseSparkFactOperationsPosterLoop|
   :invocation(AsyncParseSparkFactOperationsPosterLoop $mTimePeriod)
   :documentation "MATTHIEU'S CODE (with some small edit). Loop to get the Spark Operation poster and update the Database. At the moment the Database is not saved in case of crashes and is resetted every time." 
   :body (
	  (!(= @curSimuOroLineIndex -1)) 
	  (!(= @curSimuOroFullTableIter 0))  
	  (!(= @curSparkLineIndex -1)) 
	  (!(= @curSparkFullTableIter -1))  

	  (!(= @lastSaveDbTime (TIME)))
	  
	  (!(= @parseSparkPosterLoop true))
	  (WHILE(?(EQUAL @parseSparkPosterLoop true))
		(!(ParseSparkFactOperationsPoster (VAL @curSimuOroLineIndex) (VAL @curSimuOroFullTableIter) @curSparkLineIndex @curSparkFullTableIter @numLineMax @numNewOperations @reportTmp))
	    
		(IF(?(&
		      (EQUAL (VAL @curSimuOroLineIndex) (VAL @curSparkLineIndex))
		      (EQUAL (VAL @curSimuOroFullTableIter) (VAL @curSparkFullTableIter))))
		   
		   ELSE
		   (!(= @curSimuOroLineIndex @curSparkLineIndex)) 
		   (!(= @curSimuOroFullTableIter @curSparkFullTableIter))  
		   (!(PRINTF (FORMAT "Spark fact operation parsing got %s new operations. Loop period is %s\n" @numNewOperations $mTimePeriod)))
		   )
		
		(^(ELAPSED-MTIME (MTIME) $mTimePeriod))

	
	  )
   ) 

 (defop |ParseSparkFactOperationsPoster|
   :invocation(!(ParseSparkFactOperationsPoster $curSimuOroLineIndex $curSimuOroFullTableIter $curLineIndex $curFullTableIter $numLineMax $numNewOperations $report))
   :documentation "MATTHIEU'S CODE. Called by the AsyncParse module. Does the actual parsing." 
   :body (

	  (!(= @reportTmp OK))

	  (IF (! (READ-POSTER-INTERNAL SPARK_FACTOPERATIONS $poster))  ;;Does the actual poster reading
	      (IF(! (== $poster (SPARK_FACTOPERATIONS_POSTER_STR (factOperations (curLineIndex $curLineIndex) (curFullTableIter $curFullTableIter) (numLineMax $numLineMax) (maxFactOperationsUpdateNum $maxFactOperationsUpdateNum) $factOperationsArrayFact))))
		 
		 (!(= @factOperationsList (BUILD-LLISP-FROM-TERM-COMP $factOperationsArrayFact)))		
		 (!(= @factOperationsList (CDR @factOperationsList)))
		 (!(ProcessFactOperations (VAL @factOperationsList) $numLineMax $curSimuOroLineIndex $curSimuOroFullTableIter $curLineIndex $curFullTableIter $numNewOperations @reportTmp))

		 ELSE 
		 (!(= @reportTmp ERROR))
		 (!(PRINTF (FORMAT "impossible to identify on this poster SPARK_FACTOPERATIONS facts\n")))						
		 )  

	      ELSE
	      (!(= @reportTmp ERROR))
	      (!(PRINTF (FORMAT "impossible to read this poster SPARK_FACTOPERATIONS \n" )))
	      )

	  (!(= $report @reportTmp))
	  )
   )

 (defop |ProcessFactOperations|
   :invocation(!(ProcessFactOperations $factOperationsList $maxFactOperationsInPoster $curSimuOroLineIndex $curSimuOroFullTableIter $curLineIndex $curFullTableIter $numNewOperations $report))
   :documentation "MATTHIEU'S CODE (edited to use my DB). Called in the spark poster parsing. Inserts the stuff in the Database" 
   :body (

	  (!(= @reportTmp OK))
	  (!(= $diffFullTableIter (- $curFullTableIter $curSimuOroFullTableIter)))
	  (!(= $diffCurLineIndex (- $curLineIndex $curSimuOroLineIndex)))

	  (!(= @num (* $diffFullTableIter $maxFactOperationsInPoster)))
	  (!(= $numNewOperations (+ @num $diffCurLineIndex)))

	  (IF(?(||
		(> $diffFullTableIter 1)
		(&
		 (EQUAL $diffFullTableIter 1)
		 (> $diffCurLineIndex 0))))

	     (!(PRINTF (FORMAT "WARNING : Some facts operations were missed\n")))
	     (!(PRINTF (FORMAT "Number of missed line is %s\n" @num)))
	     
	     (!(PRINTF (FORMAT "curLineIndex is %s in simu oro and %s in poster , curFullTableIter is %s in simu oro and %s in poster\n" $curSimuOroLineIndex $curLineIndex $curSimuOroFullTableIter $curFullTableIter)))
	     )

	  (IF(?(EQUAL @reportTmp OK))

	     (IF(?(&
		   (EQUAL $diffFullTableIter 0)
		   (EQUAL $diffCurLineIndex 0)))
		
		;;Nothing has changeed
	
		ELSE
	
		(!(= @factOperationsListTmp $factOperationsList))
		(!(= @insideFactOperationIter 0))
		(!(= @factOperationIter 0))
		(!(= @posterParsingStepIter 0))

		(IF(?(> $diffCurLineIndex 0))
		   (!(= $lastPosterLineIndex $curLineIndex))
		   ELSE
		   (!(= $lastPosterLineIndex (- $maxFactOperationsInPoster 1)))
		   )
		
		(WHILE(?(&
			 (EQUAL @reportTmp OK) 
			 (~(EQUAL @posterParsingStepIter -1))
			 (~(NULL @factOperationsListTmp))
			 ))
		      
		      (IF(?(||
			    (&
			     (EQUAL @posterParsingStepIter 0)
			     (> @factOperationIter $curSimuOroLineIndex))
			    (&
			     (EQUAL @posterParsingStepIter 1)
			     (<= @factOperationIter $curLineIndex))))

			 
			 (!(= @factOperationElement (CAR @factOperationsListTmp)))	       

			 

			 (IF(?(EQUAL @insideFactOperationIter 0))
			    (IF(! (== (VAL @factOperationElement) (type @type)))
			       ELSE
			       (!(= @reportTmp ERROR))
			       (!(PRINTF (FORMAT "Problem identifying type in %s\n" @factOperationElement)))
			       )
			    ELSEIF(?(EQUAL @insideFactOperationIter 1))
			    (IF(! (== (VAL @factOperationElement) (agentModel (name @agentModel))))
			       (!(= @agentModel (MAKE-ATOM @agentModel)))
			       ELSE
			       (!(= @reportTmp ERROR))
			       (!(PRINTF (FORMAT "Problem identifying agentModel in %s\n" @factOperationElement)))
			       )
			    ELSEIF(?(EQUAL @insideFactOperationIter 2))
			    (IF(! (== (VAL @factOperationElement) (subject (name @subject))))
			       (!(= @subject (MAKE-ATOM @subject)))
			       ELSE
			       (!(= @reportTmp ERROR))
			       (!(PRINTF (FORMAT "Problem identifying subject in %s\n" @factOperationElement)))
			       )

			    ELSEIF(?(EQUAL @insideFactOperationIter 3))
			    (IF(! (== (VAL @factOperationElement) (predicate (name @predicate))))
			       (!(= @predicate (MAKE-ATOM @predicate)))
			       ELSE
			       (!(= @reportTmp ERROR))
			       (!(PRINTF (FORMAT "Problem identifying predicate in %s\n" @factOperationElement)))
			       )
			    
			    ELSEIF(?(EQUAL @insideFactOperationIter 4))
			    (IF(! (== (VAL @factOperationElement) (value (name @value))))
			       (!(= @value (MAKE-ATOM @value)))
	
			       (IF(?(EQUAL @type SPARK_ADD_FACT))
				  (! (= @fact (AGENT-STATEMENT (VAL @agentModel) (VAL @subject) (VAL @predicate) (VAL @value))))
				  
				  (=> (Database.add @fact))
		
				  ELSEIF(?(EQUAL @type SPARK_UPDATE_FACT))
				  (! (= @fact (AGENT-STATEMENT (VAL @agentModel) (VAL @subject) (VAL @predicate) (VAL @value))))
				  (=> (Database.add @fact))

				  ELSEIF(?(||
					   (EQUAL @type SPARK_REMOVE_FACT)
					   (EQUAL @type SPARK_CLEAR_FACT)))
				 
				  (! (= @fact (AGENT-STATEMENT (VAL @agentModel) (VAL @subject) (VAL @predicate) (VAL @value))))
				  (=> (Database.remove @fact))
				  )
			       ELSE
			       (!(= @reportTmp ERROR))
			       (!(PRINTF (FORMAT "Problem identifying value in %s\n" @factOperationElement)))
			       )
			    )
			 )

		      (!(= @insideFactOperationIter (+ @insideFactOperationIter 1)))
		      (IF(?(EQUAL @insideFactOperationIter 5))
			 (IF(?(&
			       (EQUAL @posterParsingStepIter 0)
			       (EQUAL @factOperationIter $lastPosterLineIndex)))
			    (IF(?(<= $diffCurLineIndex 0))
			       (!(= @posterParsingStepIter 1))
			       (!(= @factOperationsListTmp $factOperationsList))
			       (!(= @insideFactOperationIter 0))
			       (!(= @factOperationIter -1))
			       ELSE
			       (!(= @posterParsingStepIter -1))
			       )
			    ELSEIF(?(&
				     (EQUAL @posterParsingStepIter 1)
				     (EQUAL @factOperationIter $curLineIndex)))
			    (!(= @factOperationIter -1))
			    )		     
			 (!(= @factOperationIter (+ @factOperationIter 1)))
			 (!(= @insideFactOperationIter 0))
			 )
		      
		      (!(= @factOperationsListTmp (CDR @factOperationsListTmp)))
		      
		      )
		)
	     )
	  (!(= $report @reportTmp))
	  
	  )
   )
 
)
